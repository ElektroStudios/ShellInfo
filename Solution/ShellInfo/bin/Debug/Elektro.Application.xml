<?xml version="1.0"?>
<doc>
<assembly>
<name>
Elektro.Application
</name>
</assembly>
<members>
<member name="T:Elektro.Application.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Elektro.Application.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Elektro.Application.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:Elektro.Application.Data.Enums.SerializationType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a serialization format for data.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Data.Enums.SerializationType.Binary">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Serialize as binary content.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/4abbf6k0%28v=vs.110%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Data.Enums.SerializationType.Json">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Serialize as Json content.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/bb412179%28v=vs.110%29.aspx"/>
 <para></para>
 <see href="http://msdn.microsoft.com/en-us/library/system.web.script.serialization.javascriptserializer%28v=vs.110%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Data.Enums.SerializationType.Xml">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Serialize as Xml content.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/58a18dwa%28v=vs.110%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Data.Tools.SerializationUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains serialization related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Data.Tools.SerializationUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 prevents a default instance of the <see cref="T:Elektro.Application.Data.Tools.SerializationUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Data.Tools.SerializationUtil.GetSerializer``1(Elektro.Application.Data.Enums.SerializationType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the proper data serializer.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="format">
 The serialization format.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 format
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Data.Tools.SerializationUtil.GetSerializer``1(``0,Elektro.Application.Data.Enums.SerializationType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the proper data serializer.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="obj">
 The object to check.
 </param>
 
 <param name="format">
 The serialization format.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 format
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Data.Tools.SerializationUtil.Deserialize``1(System.String,Elektro.Application.Data.Enums.SerializationType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Deserializes the data of an Object from the specified file, using the specified serialization format.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example for Binary deserialization.
 <code>
 Dim obj As String() = {"Hello World!"}
 Serialize(obj, "C:\File.bin", SerializationType.Binary)
 
 obj = Deserialize(Of String())("C:\File.bin", SerializationType.Binary)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example for Json deserialization.
 <code>
 Dim obj As String() = {"Hello World!"}
 Serialize(obj, "C:\File.json", SerializationType.Json)
 
 obj = Deserialize(Of String())("C:\File.json", SerializationType.Json)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example for Xml deserialization.
 <code>
 Dim obj As String() = {"Hello World!"}
 Serialize(obj, "C:\File.xml", SerializationType.Xml)
 
 obj = Deserialize(Of String())("C:\File.xml", SerializationType.Xml)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="filepath">
 The filepath where from deserialize the serialized data.
 </param>
 
 <param name="format">
 The serialization format.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting object.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Data.Tools.SerializationUtil.Deserialize``1(``0@,System.String,Elektro.Application.Data.Enums.SerializationType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Deserializes the data of an Object from the specified file, using the specified serialization format.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example for Binary deserialization.
 <code>
 Dim obj As String() = {"Hello World!"}
 Serialize(obj, "C:\File.bin", SerializationType.Binary)
 Deserialize(obj, "C:\File.bin", SerializationType.Binary)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example for Json deserialization.
 <code>
 Dim obj As String() = {"Hello World!"}
 Serialize(obj, "C:\File.json", SerializationType.Json)
 Deserialize(obj, "C:\File.json", SerializationType.Json)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example for Xml deserialization.
 <code>
 Dim obj As String() = {"Hello World!"}
 Serialize(obj, "C:\File.xml", SerializationType.Xml)
 Deserialize(obj, "C:\File.xml", SerializationType.Xml)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="refObj">
 The by-reference object.
 </param>
 
 <param name="filepath">
 The filepath where from deserialize the serialized data.
 </param>
 
 <param name="format">
 The serialization format.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Data.Tools.SerializationUtil.IsTypeSerializable``1">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Type"/> can be serialized.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = IsTypeSerializable(Of Bitmap)()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The <see cref="T:System.Type"/> to check.
 </typeparam>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified <see cref="T:System.Type"/> can be serialized; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Data.Tools.SerializationUtil.IsTypeSerializable``1(``0)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Type"/> can be serialized.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = IsTypeSerializable(GetType(Bitmap))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="type">
 The <see cref="T:System.Type"/> to check.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified <see cref="T:System.Type"/> can be serialized; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Data.Tools.SerializationUtil.IsObjectSerializable``1(``0,Elektro.Application.Data.Enums.SerializationType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified object can be serialized.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim bmp As New Bitmap(256, 256)
 Dim result As Boolean = IsObjectSerializable(bmp, SerializationType.Binary)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="obj">
 The object to check.
 </param>
 
 <param name="format">
 The serialization format.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified object can be serialized; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Data.Tools.SerializationUtil.Serialize``1(``0,System.String,Elektro.Application.Data.Enums.SerializationType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Serializes the data of an Object to the specified file, using the specified serialization format.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example for Binary serialization.
 <code>
 Dim obj As String() = {"Hello World!"}
 Serialize(obj, "C:\File.bin", SerializationType.Binary)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example for Json serialization.
 <code>
 Dim obj As String() = {"Hello World!"}
 Serialize(obj, "C:\File.json", SerializationType.Json)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example for Xml serialization.
 <code>
 Dim obj As String() = {"Hello World!"}
 Serialize(obj, "C:\File.xml", SerializationType.Xml)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="obj">
 The object to be serialized.
 </param>
 
 <param name="filepath">
 The filepath where to save the serialized data.
 </param>
 
 <param name="format">
 The serialization format.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Enums.ProcessArchitecture">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a process architecture.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Enums.ProcessArchitecture.X86">
 <summary>
 A 32-Bit process.
 </summary>
</member>
<member name="F:Elektro.Application.Enums.ProcessArchitecture.X64">
 <summary>
 A 64-Bit process.
 </summary>
</member>
<member name="T:Elektro.Application.Enums.ComparerResult">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a comparison result.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Enums.ComparerResult.Equals">
 <summary>
 'A' is equals to 'B'.
 </summary>
</member>
<member name="F:Elektro.Application.Enums.ComparerResult.LessThan">
 <summary>
 'A' is less than 'B'.
 </summary>
</member>
<member name="F:Elektro.Application.Enums.ComparerResult.GreaterThan">
 <summary>
 'A' is greater than 'B'.
 </summary>
</member>
<member name="T:Elektro.Application.Extensions.DataTable.TypeConversion">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Data.DataTable"/> Object.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Extensions.DataTable.TypeConversion.ToDataGridView(System.Data.DataTable)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts the source <see cref="T:System.Data.DataTable"/> to a <see cref="T:System.Windows.Forms.DataGridView"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dt As New DataTable()
 dt.Columns.Add("Name", GetType(String))
 dt.Columns.Add("Date", GetType(Date))
 dt.Rows.Add("Elektro", Date.Parse("01-01-2016"))
 
 Dim dgv As DataGridView = dt.ToDataGridView()
 
 Me.Controls.Add(dgv)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Data.DataTable"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Windows.Forms.DataGridView"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Extensions.DataTable.TypeConversion.ToListView(System.Data.DataTable)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts the source <see cref="T:System.Data.DataTable"/> to a <see cref="T:System.Windows.Forms.ListView"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dt As New DataTable()
 dt.Columns.Add("Name", GetType(String))
 dt.Columns.Add("Date", GetType(Date))
 dt.Rows.Add("Elektro", Date.Parse("01-01-2016"))
 
 Dim lv As ListView = dt.ToListView()
 lv.View = View.Details
 lv.Dock = DockStyle.Fill
 
 Me.Controls.Add(lv)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Data.DataTable"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Windows.Forms.ListView"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Extensions.DataTable.TypeConversion.ToList(System.Data.DataTable)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts the source <see cref="T:System.Data.DataTable"/> to a <see cref="T:System.Collections.Generic.List`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dt As New DataTable()
 dt.Columns.Add("Name", GetType(String))
 dt.Columns.Add("Date", GetType(Date))
 dt.Rows.Add("Elektro", Date.Parse("01-01-2016"))
 
 Dim list As List(Of Dictionary(Of String, Object)) = dt.ToList()
 
 For Each dict As Dictionary(Of String, Object) In list
     For Each key As String In dict.Keys
         Console.WriteLine("Name: {0}, Value:{1}", key, dict(key).ToString())
     Next
 Next
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Data.DataTable"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Collections.Generic.List`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Extensions.DataTable.Export">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Data.DataTable"/> Object.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Extensions.DataTable.Export.ExportToCSV(System.Data.DataTable,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Exports the source <see cref="T:System.Data.DataTable"/> to <c>CSV</c> table format.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dt As New DataTable()
 dt.Columns.Add("Name", GetType(String))
 dt.Columns.Add("Date", GetType(Date))
 dt.Rows.Add("Elektro", Date.Parse("01-01-2016"))
 
 Dim csv As String = dt.ExportToCSV(defaultValueIfEmpty:="N/A")
 Console.WriteLine(csv)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Data.DataTable"/>.
 </param>
 
 <param name="defaultValueIfEmpty">
 A default value to write in a <c>CSV</c> field 
 if the corresponding <see cref="P:System.Data.DataRow.Item(System.Data.DataColumn)"/> value is <see langword="Nothing"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <c>CSV</c> table string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Extensions.DataTable.Export.ExportToXml(System.Data.DataTable)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Exports the source <see cref="T:System.Data.DataTable"/> to <c>Xml</c> format.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dt As New DataTable()
 dt.Columns.Add("Name", GetType(String))
 dt.Columns.Add("Date", GetType(Date))
 dt.Rows.Add("Elektro", Date.Parse("01-01-2016"))
 
 Dim xml As String = dt.ExportToXml()
 Console.WriteLine(xml)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Data.DataTable"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <c>Xml</c> string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Extensions.Delegate.Removing">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Delegate"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Extensions.Delegate.Removing.Remove(System.Delegate,System.Delegate)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes the last occurrence of the invocation list of the source <see cref="T:System.Delegate"/> 
 from the invocation list of another <see cref="T:System.Delegate"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="source">
 The source <see cref="T:System.Delegate"/> from which to remove the invocation list of.
 </param>
 
 <param name="target">
 The <see cref="T:System.Delegate"/> that supplies the invocation list to remove from the invocation list of.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A new delegate with an invocation list formed by taking the invocation list of <paramref name="source"/> and 
 removing the last occurrence of the invocation list of value, 
 if the invocation list of value is found within the invocation list of <paramref name="source"/>.
 <para></para>
 Returns <paramref name="source"/> if value is <see langword="Nothing"/> 
 or if the invocation list of value is not found within the invocation list of source.
 <para></para>
 Returns a null reference if the invocation list of value is equal to the invocation list of <paramref name="source"/> 
 or if <paramref name="source"/> is a null reference.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Extensions.Delegate.Removing.RemoveAll(System.Delegate,System.Delegate)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes all occurrences of the invocation list of the source <see cref="T:System.Delegate"/> 
 from the invocation list of another <see cref="T:System.Delegate"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="source">
 The source <see cref="T:System.Delegate"/> from which to remove the invocation list of.
 </param>
 
 <param name="target">
 The <see cref="T:System.Delegate"/> that supplies the invocation list to remove from the invocation list of.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A new delegate with an invocation list formed by taking the invocation list of <paramref name="source"/> 
 and removing all occurrences of the invocation list of <paramref name="target"/>,
 if the invocation list of value is found within the invocation list of source.
 <para></para>
 Returns <paramref name="source"/> if value is <see langword="Nothing"/> 
 or if the invocation list of <paramref name="target"/> is not found within the invocation list of <paramref name="source"/>.
 <para></para>
 Returns a null reference if the invocation list of <paramref name="target"/> 
 is equal to the invocation list of <paramref name="source"/>, 
 if <paramref name="source"/> contains only a series of invocation lists that 
 are equal to the invocation list of <paramref name="source"/>, or if <paramref name="source"/> is a null reference.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Extensions.Delegate.Combination">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Delegate"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Extensions.Delegate.Combination.Combine(System.Delegate,System.Delegate)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Concatenates the invocation lists of the source <see cref="T:System.Delegate"/> with another <see cref="T:System.Delegate"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="source">
 The source <see cref="T:System.Delegate"/> whose invocation list comes first.
 </param>
 
 <param name="target">
 The <see cref="T:System.Delegate"/> whose invocation list comes last.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A new delegate with an invocation list that concatenates the invocation lists of 
 <paramref name="source"/> and <paramref name="target"/> in that order.
 <para></para>
 Returns <paramref name="source"/> if <paramref name="target"/> is <see langword="Nothing"/>,
 <para></para>
 returns <paramref name="target"/> if <paramref name="source"/> is a null reference, 
 <para></para>
 and returns a null reference if both <paramref name="source"/> and <paramref name="target"/> are null references.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Extensions.Random.Next">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Random"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Extensions.Random.Next.NextOf``1(System.Random,``0[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Return a random value from the specified values.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim rand As New Random
 Dim value As Integer = rand.NextOf({1, 2, 3})
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Random"/>.
 </param>
 
 <param name="values">
 The values.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Extensions.EventHandler.Raise">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.EventHandler"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Extensions.EventHandler.Raise.RaiseEvent(System.EventHandler,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Raises the event of the source <see cref="T:System.EventHandler"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim handler As New EventHandler(Of EventArgs)(AddressOf DoClick)
 handler.RaiseEvent(Me)
 
 Private Sub DoClick(sender As Object, e As EventArgs) Handles MyBase.Click
     MsgBox("Click event raised.")
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="handler">
 The source <see cref="T:System.EventHandler"/>.
 </param>
 
 <param name="sender">
 The source of the event.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Extensions.EventHandler.Raise.RaiseEvent(System.EventHandler,System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Raises the event of the source <see cref="T:System.EventHandler"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim handler As New EventHandler(Of EventArgs)(AddressOf DoClick)
 handler.RaiseEvent(Me, New EventArgs)
 
 Private Sub DoClick(sender As Object, e As EventArgs) Handles MyBase.Click
     MsgBox("Click event raised.")
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="handler">
 The source <see cref="T:System.EventHandler"/>.
 </param>
 
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The event information.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Extensions.EventHandler.Raise.RaiseEvent``1(System.EventHandler{``0},System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Raises the event of the source <see cref="T:System.EventHandler"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim handler As New EventHandler(Of FormClosingEventArgs)(AddressOf Me.Form1_FormClosing)
 handler.RaiseEvent(Me)
 
 Private Sub Form1_FormClosing(sender As Object, e As FormClosingEventArgs) Handles MyBase.FormClosing
     MsgBox("FormClosing event raised.")
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of the event arguments.
 </typeparam>
 
 <param name="handler">
 The source <see cref="T:System.EventHandler"/>.
 </param>
 
 <param name="sender">
 The source of the event.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Extensions.EventHandler.Raise.RaiseEvent``1(System.EventHandler{``0},System.Object,``0)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Raises the event of the source <see cref="T:System.EventHandler"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim handler As New EventHandler(Of FormClosingEventArgs)(AddressOf Me.Form1_FormClosing)
 handler.RaiseEvent(Me, New FormClosingEventArgs(CloseReason.UserClosing, cancel:=True))
 
 Private Sub Form1_FormClosing(sender As Object, e As FormClosingEventArgs) Handles MyBase.FormClosing
     MsgBox("FormClosing event raised.")
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of the event arguments.
 </typeparam>
 
 <param name="handler">
 The source <see cref="T:System.EventHandler"/>.
 </param>
 
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The event information.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Resources.Tools.ResourceUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains .Net managed resources related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Resources.Tools.ResourceUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.Resources.Tools.ResourceUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Resources.Tools.ResourceUtil.ExtractResourceToDisk(System.Byte[],System.String,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Extracts a resource to disk.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 ExtractResourceToDisk(My.Resources.MyTextfile, "C:\File.txt")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="resource">
 The resource to extract.
 </param>
 
 <param name="targetFilepath">
 The target filepath where to save the resource data.
 </param>
 
 <param name="overwrite">
 If set to <see langword="True"/>, overwites any existing file, 
 otherwise, if the file already exists, a <see cref="T:System.IO.IOException"/> exception is thrown.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Resources.Tools.ResourceUtil.GetResourcesOf``1(System.Globalization.CultureInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the application resources of the specified type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example to get all String resources.
 <code>
 Dim resources As IEnumerable(Of DictionaryEntry) = GetResourcesOf(Of Bitmap)()
 
 For Each resource As DictionaryEntry In resources
 
     MsgBox(resource.Key)            '  Resource Name
     MsgBox(resource.Value.ToString) '  Resource Data
 
 Next resource
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of the resource to find.
 </typeparam>
 
 <param name="culture">
 The resource culture
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Resources.Types.Resource">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Defines a resource contained in a .Net managed resource file.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Resources.Types.Resource.Type">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the resource type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The resource type.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Resources.Types.Resource.#ctor(System.String,System.Object,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Resources.Types.Resource"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="name">
 The resource name.
 </param>
 
 <param name="data">
 The resource data.
 </param>
 
 <param name="comment">
 The resource comment.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Resources.Types.Resource`1">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Defines a resource contained in a .Net managed resource file.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Resources.Types.Resource`1.Name">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the resource name.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The resource name.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Resources.Types.Resource`1.nameB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The resource name.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Resources.Types.Resource`1.Data">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the resource data.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The resource data.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Resources.Types.Resource`1.dataB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The resource data.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Resources.Types.Resource`1.Type">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the resource type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The resource type.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Resources.Types.Resource`1.Comment">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the resource comment.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The resource comment.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Resources.Types.Resource`1.commentB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The resource comment.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Resources.Types.Resource`1.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.Resources.Types.Resource`1"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Resources.Types.Resource`1.#ctor(System.String,`0,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Resources.Types.Resource`1"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="name">
 The resource name.
 </param>
 
 <param name="data">
 The resource data.
 </param>
 
 <param name="comment">
 The resource comment.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Resources.Types.ResXManager">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Manages a .Net managed resource (ResX) file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
     Dim resX As New ResXManager(Path.Combine(Application.StartupPath, "MyResources.ResX"))
     With resX
 
         ' Create or overwrite the ResX file.
         .Create(overwrite:=True)
 
         ' Add a string resource.            
         Dim resStr As New Resource(Of String)("String Resource", "Hello World!", "String Comment")
         .AddResource(Of String)(resStr)
 
         ' Add a bitmap resource.
         Dim resBmp As New Resource(Of Bitmap)("Bitmap Resource", SystemIcons.Information.ToBitmap, "Bitmap Comment")
         .AddResource(Of Bitmap)(resBmp)
 
         ' Add a binary resource.
         Dim resBin As New Resource(Of Byte())("Binary Resource", File.ReadAllBytes("C:\File.mp3"), "Binary Comment")
         .AddResource(Of Byte())(resBin)
 
     End With
 
     ' *******************************************************************************************************
 
     ' Get the string resource.
     Dim stringResource As Resource(Of String) =
         resX.FindResource(Of String)("String Resource", StringComparison.OrdinalIgnoreCase)
 
     ' Get the bitmap resource.
     Dim bitmapResource As Resource(Of Bitmap) =
         resX.FindResource(Of Bitmap)("Bitmap Resource", StringComparison.OrdinalIgnoreCase)
 
     ' Get the binary resource.
     Dim binaryResource As Resource(Of Byte()) =
         resX.FindResource(Of Byte())("Binary Resource", StringComparison.OrdinalIgnoreCase)
 
     ' *******************************************************************************************************
 
     ' Get the string data.
     Dim stringData As String = stringResource.Data
 
     ' Get the bitmap data.
     Dim bitmapData As Bitmap = bitmapResource.Data
 
     ' Get the binary data.
     Dim binaryData As Byte() = binaryResource.Data
 
     ' *******************************************************************************************************
 
     ' Get all the resources at once.
     Dim resources As IEnumerable(Of Resource) = resX.Resources
 
     ' Get all the resources of specific Type at once.
     Dim stringResources As IEnumerable(Of Resource(Of String)) = resX.FindResources(Of String)()
 
     ' *******************************************************************************************************
 
     ' Get all the resource datas at once from Resource collection.
     Dim resourceDatas As IEnumerable(Of Object) =
         From res As Resource In resX.Resources
         Select res.Data
 
     ' Get all the resource datas of specific Type at once from Resource collection.
     Dim stringResourceDatas As IEnumerable(Of String) =
         From res As Resource In resX.Resources
         Where res.Type Is GetType(String)
         Select DirectCast(res.Data, String)
 
     ' *******************************************************************************************************
 
     ' Treat the string data as you like.
     MessageBox.Show(stringData, String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
 
     ' Treat the bitmap data as you like.
     Me.Icon = Icon.FromHandle(bitmapData.GetHicon)
 
     ' Treat the binary data as you like.
     File.WriteAllBytes("C:\new file.mp3", binaryData)
 
     ' *******************************************************************************************************
 
     ' Iterate all the resources.
     For Each res As Resource In resX.Resources
 
         Dim sb As New StringBuilder
 
         sb.AppendLine(String.Format("Name...: {0}", res.Name))
         sb.AppendLine(String.Format("Comment: {0}", res.Comment))
         sb.AppendLine(String.Format("Type...: {0}", res.Data.GetType.FullName))
         sb.AppendLine(String.Format("Data...: {0}", res.Data.ToString))
 
         MsgBox(sb.ToString)
 
     Next res
 
     ' Iterate all the resources of specific Type.
     For Each res As Resource(Of String) In resX.FindResources(Of String)()
 
         Dim sb As New StringBuilder
 
         sb.AppendLine(String.Format("Name...: {0}", res.Name))
         sb.AppendLine(String.Format("Comment: {0}", res.Comment))
         sb.AppendLine(String.Format("Type...: {0}", res.Type.ToString))
         sb.AppendLine(String.Format("Data...: {0}", res.Data.ToString))
 
         MsgBox(sb.ToString)
 
     Next res
 
     ' *******************************************************************************************************
 
     ' Remove a resource.
     resX.RemoveResource("Binary Resource")
 
     '  GC.Collect()
 
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Resources.Types.ResXManager.FilePath">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the .Net managed resource file path.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The .Net managed resource filepath.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Resources.Types.ResXManager.filepathB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The .Net managed resource file path.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Resources.Types.ResXManager.Resources">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the resources contained in the .Net managed resource file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The resources.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Resources.Types.ResXManager.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.Resources.Types.ResXManager"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Resources.Types.ResXManager.#ctor(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Resources.Types.ResXManager"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="resxFilePath">
 The .Net managed resource filepath.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Resources.Types.ResXManager.Create(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates the .Net managed resource file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="overwrite">
 If set to <see langword="True"/>, overwrites any existent file.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.IOException">
 Resource file already exists.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Resources.Types.ResXManager.AddResource``1(Elektro.Application.Resources.Types.Resource{``0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds a resource into the .Net managed resource file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="resource">
 The resource.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 Resource file not found.
 </exception>
 
 <exception cref="T:System.ArgumentException">
 A resource with the same name already exists in the table.;name
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Resources.Types.ResXManager.AddResource(System.String,System.Object,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds a resource into the .Net managed resource file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="name">
 The resource name.
 </param>
 
 <param name="data">
 The resource data.
 </param>
 
 <param name="comment">
 The resource comment.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 Resource file not found.
 </exception>
 
 <exception cref="T:System.ArgumentException">
 A resource with the same name already exists in the table.;name
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Resources.Types.ResXManager.AddResource``1(System.String,``0,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds a specified resource of the specified type into the .Net managed resource file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="name">
 The resource name.
 </param>
 
 <param name="data">
 The resource data.
 </param>
 
 <param name="comment">
 The resource comment.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 Resource file not found.
 </exception>
 
 <exception cref="T:System.ArgumentException">
 A resource with the same name already exists in the table.;name
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Resources.Types.ResXManager.ReplaceResource``1(Elektro.Application.Resources.Types.Resource{``0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Replaces a resource by the specified name inside the .Net managed resource file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="resource">
 The resource.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 Resource file not found.
 </exception>
 
 <exception cref="T:System.ArgumentException">
 A resource with the same name already exists in the table.;name
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Resources.Types.ResXManager.ReplaceResource(System.String,System.Object,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Replaces a resource by the specified name inside the .Net managed resource file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="name">
 The resource name.
 </param>
 
 <param name="data">
 The resource data.
 </param>
 
 <param name="comment">
 The resource comment.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 Resource file not found.
 </exception>
 
 <exception cref="T:System.ArgumentException">
 A resource with the same name already exists in the table.;name
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Resources.Types.ResXManager.ReplaceResource``1(System.String,``0,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Replaces a resource by the specified name of the specified type inside the .Net managed resource file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="name">
 The resource name.
 </param>
 
 <param name="data">
 The resource data.
 </param>
 
 <param name="comment">
 The resource comment.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 Resource file not found.
 </exception>
 
 <exception cref="T:System.ArgumentException">
 A resource with the same name already exists in the table.;name
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Resources.Types.ResXManager.FindResource``1(System.String,System.StringComparison)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Finds a resource by the specified name of specified type inside the .Net managed resource file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="name">
 The resource name.
 </param>
 
 <param name="stringComparison">
 The <see cref="T:System.StringComparison"/> to compare the resource name.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resource.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 Resource file not found.
 </exception>
 
 <exception cref="T:System.ArgumentException">
 Resource with the specified name is not found.;name
 </exception>
 
 <exception cref="T:System.ArgumentException">
 The specified Type differs from the resource Type.;T
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Resources.Types.ResXManager.FindResource(System.String,System.StringComparison)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Finds a resource by the specified name inside the .Net managed resource file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="name">
 The resource name.
 </param>
 
 <param name="stringComparison">
 The <see cref="T:System.StringComparison"/> to compare the resource name.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resource.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 Resource file not found.
 </exception>
 
 <exception cref="T:System.ArgumentException">
 Resource with the specified name is not found.;name
 </exception>
 
 <exception cref="T:System.ArgumentException">
 The specified Type differs from the resource Type.;T
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Resources.Types.ResXManager.FindResources``1">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Finds the resources of the specified type inside the .Net managed resource file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resource.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 Resource file not found.
 </exception>
 
 <exception cref="T:System.ArgumentException">
 Resource with the specified name is not found.;name
 </exception>
 
 <exception cref="T:System.ArgumentException">
 The specified Type differs from the resource Type.;T
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Resources.Types.ResXManager.RemoveResource(System.String,System.StringComparison)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes a resource by the specified name from the .Net managed resource file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="name">
 The resource name.
 </param>
 
 <param name="stringComparison">
 The <see cref="T:System.StringComparison"/> to compare the resource name.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 Resource file not found.
 </exception>
 
 <exception cref="T:System.ArgumentException">
 Any resource found matching the specified name.;name
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Resources.Types.ResXManager.AddResource(System.Boolean,System.String,System.Object,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds or replaces a resource into the .Net managed resource file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="replace">
 If set to <see langword="True"/>, the resource will be replaced.
 </param>
 
 <param name="name">
 The resource name.
 </param>
 
 <param name="data">
 The resource data.
 </param>
 
 <param name="comment">
 The resource comment.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 Resource file not found.
 </exception>
 
 <exception cref="T:System.ArgumentException">
 A resource with the same name already exists in the table.;name
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Resources.Types.ResXManager.GetResources">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets all the resources contained in the .Net managed resource file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Settings.Types.VisualBasicProjectFileManager">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents and manipulates an existing VisualBasic.NET Project File (vbproj).
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example that demonstrates a general usage of VisualBasicProjectFileManager members.
 <code>
 Dim vbproj As New VisualBasicProjectFileManager("C:\MyProject.vbproj")
 
 ' Set some properties.
 With vbproj
     .ProjectGuid = Guid.NewGuid()
     .AutoGenerateBindingRedirects = True
     .OptionExplicitEnabled = True
     .OptionStrictEnabled = True
     .OptionInferEnabled = False
 End With
 
 ' Add References (or clear them).
 Dim referencedAssemblies As SortedDictionary(Of String, String) = vbproj.ReferencedAssemblies
 With referencedAssemblies
     .Add("System.Net", Nothing) ' Assemblies stored in GAC directory doesnt's require a hint path.
     .Add("Elektro.Application", "..\..\ElektroKit\Elektro.Application.dll") ' Relative path.
     .Add("Elektro.Core", "C:\ElektroKit\Elektro.Core.dll") ' Absolute path.
 End With
 vbproj.ReferencedAssemblies = referencedAssemblies
 
 ' Add Imports (or clear them).
 Dim importedNamespaces As SortedSet(Of String) = vbproj.ImportedNamespaces
 With importedNamespaces
     .Add("System.Net")
     .Add("Elektro.Application.Types")
     .Add("Elektro.Core.Types")
 End With
 vbproj.ImportedNamespaces = importedNamespaces
 
 ' Save the changes we made, to a new file. 
 ' Note that the "vbproj" instance just serves as a visual representation, changes are not saved in the original file, 
 ' so we need to save any changes using the "vbproj.Document.Save()" method (we can replace the original file if we like).
 vbproj.Document.Save("C:\modified.vbproj", SaveOptions.None)
 Process.Start("notepad.exe", "C:\modified.vbproj")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.File">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the project file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The project file.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.fileB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 (Backing Field)
 The project file.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.Document">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the Xml document representation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Xml document representation.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.documentB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 (Backing Field)
 The document representation.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.PropertyGroupNodes">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a collection of the <c>&lt;PropertyGroup&gt;</c> nodes.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 A collection of the <c>&lt;PropertyGroup&gt;</c> nodes.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.ItemGroupNodes">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a collection of the <c>&lt;ItemGroup&gt;</c> nodes.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 A collection of the <c>&lt;ItemGroup&gt;</c> nodes.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.ReferencedAssemblies">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the referenced assemblies.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbproj As New VisualBasicProjectFileManager("C:\project.vbproj")
 Dim referencedAssemblies As SortedDictionary(Of String, String) = vbproj.ReferencedAssemblies
 referencedAssemblies.Clear()
 referencedAssemblies.Add("System", "") ' Assemblies stored in GAC directory doesnt's require a hint path.
 referencedAssemblies.Add("Elektro.Application", "..\..\ElektroKit\Elektro.Application.dll") ' Relative path.
 referencedAssemblies.Add("Elektro.Core", "C:\ElektroKit\Elektro.Core.dll") ' Absolute path.
 vbproj.ReferencedAssemblies = referencedAssemblies
 vbproj.Document.Save("C:\modified.vbproj", SaveOptions.None)
 Process.Start("notepad.exe", "C:\modified.vbproj")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The referenced assemblies.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.ImportedNamespaces">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the imported namespaces.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbproj As New VisualBasicProjectFileManager("C:\project.vbproj")
 Dim importedNamespaces As SortedSet(Of String) = vbproj.ImportedNamespaces
 importedNamespaces.Clear()
 importedNamespaces.Add("System")
 vbproj.ImportedNamespaces = importedNamespaces
 vbproj.Document.Save("C:\modified.vbproj", SaveOptions.None)
 Process.Start("notepad.exe", "C:\modified.vbproj")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The imported namespaces.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.TargetFrameworkVersion">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the target framework version.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbproj As New VisualBasicProjectFileManager("C:\project.vbproj")
 vbproj.TargetFrameworkVersion = "4.5"
 vbproj.Document.Save("C:\modified.vbproj", SaveOptions.None)
 Process.Start("notepad.exe", "C:\modified.vbproj")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The target framework version.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.ProjectGuid">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the project GUID.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbproj As New VisualBasicProjectFileManager("C:\project.vbproj")
 vbproj.ProjectGuid = New Guid("C370C005-08CA-4DD2-9902-4AB984F49818"}
 vbproj.Document.Save("C:\modified.vbproj", SaveOptions.None)
 Process.Start("notepad.exe", "C:\modified.vbproj")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The project GUID.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.Configuration">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the project's configuration mode.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbproj As New VisualBasicProjectFileManager("C:\project.vbproj")
 vbproj.Configuration = "Debug" ' Or "Release"
 vbproj.Document.Save("C:\modified.vbproj", SaveOptions.None)
 Process.Start("notepad.exe", "C:\modified.vbproj")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The project's configuration mode.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.Platform">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the project's target platform.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbproj As New VisualBasicProjectFileManager("C:\project.vbproj")
 vbproj.Platform = "AnyCPU" ' Or "x64" or "x86"
 vbproj.Document.Save("C:\modified.vbproj", SaveOptions.None)
 Process.Start("notepad.exe", "C:\modified.vbproj")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The project's target platform.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.OutputType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the project's output type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbproj As New VisualBasicProjectFileManager("C:\project.vbproj")
 vbproj.OutputType = "WinExe"
 vbproj.Document.Save("C:\modified.vbproj", SaveOptions.None)
 Process.Start("notepad.exe", "C:\modified.vbproj")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The project's output type.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.AssemblyName">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the project's assembly name.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbproj As New VisualBasicProjectFileManager("C:\project.vbproj")
 vbproj.AssemblyName = "MyProgram"
 vbproj.Document.Save("C:\modified.vbproj", SaveOptions.None)
 Process.Start("notepad.exe", "C:\modified.vbproj")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The project's assembly name.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.RootNamespace">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the project's root namespace.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbproj As New VisualBasicProjectFileManager("C:\project.vbproj")
 vbproj.RootNamespace = "WindowsApplication1"
 vbproj.Document.Save("C:\modified.vbproj", SaveOptions.None)
 Process.Start("notepad.exe", "C:\modified.vbproj")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The project's root namespace.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.StartupObject">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the project's startup object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbproj As New VisualBasicProjectFileManager("C:\project.vbproj")
 vbproj.StartupObject = "WindowsApplication1.My.MyApplication"
 vbproj.Document.Save("C:\modified.vbproj", SaveOptions.None)
 Process.Start("notepad.exe", "C:\modified.vbproj")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The project's startup object.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.FileAlignment">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the project's file alignment.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbproj As New VisualBasicProjectFileManager("C:\project.vbproj")
 vbproj.FileAlignment = 512
 vbproj.Document.Save("C:\modified.vbproj", SaveOptions.None)
 Process.Start("notepad.exe", "C:\modified.vbproj")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The project's file alignment.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.AutoGenerateBindingRedirects">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value that indicates whether binding redirects may be automatically added to the app configuration file 
 to override assembly unification.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbproj As New VisualBasicProjectFileManager("C:\project.vbproj")
 vbproj.AutoGenerateBindingRedirects = True
 vbproj.Document.Save("C:\modified.vbproj", SaveOptions.None)
 Process.Start("notepad.exe", "C:\modified.vbproj")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 Starting with Visual Studio 2013, when you compile apps that target the .NET Framework 4.5.1, 
 binding redirects may be automatically added to the app configuration file to override assembly unification.
 <para></para>
 Binding redirects are added if your app or its components reference more than one version of the same assembly, 
 even if you manually specify binding redirects in the configuration file for your app.
 <para></para>
 The automatic binding redirection feature affects traditional desktop apps and web apps that target the .NET Framework 4.5.1, 
 although the behavior is slightly different for a web app.
 <para></para>
 You can enable automatic binding redirection if you have existing apps that target previous versions of the .NET Framework, 
 or you can disable this feature if you want to keep manually authored binding redirects.
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> to enable binding redirects, otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.OptionExplicitEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value that determines whether <see langword="OptionExplicit"/> is enabled by default in the project.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbproj As New VisualBasicProjectFileManager("C:\project.vbproj")
 vbproj.OptionExplicitEnabled = True
 vbproj.Document.Save("C:\modified.vbproj", SaveOptions.None)
 Process.Start("notepad.exe", "C:\modified.vbproj")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> to enable <see langword="OptionExplicit"/>, otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.OptionStrictEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value that determines whether <see langword="OptionStrict"/> is enabled by default in the project.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbproj As New VisualBasicProjectFileManager("C:\project.vbproj")
 vbproj.OptionStrictEnabled = True
 vbproj.Document.Save("C:\modified.vbproj", SaveOptions.None)
 Process.Start("notepad.exe", "C:\modified.vbproj")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> to enable <see langword="OptionStrict"/>, otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.OptionInferEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value that determines whether <see langword="OptionInfer"/> is enabled by default in the project.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbproj As New VisualBasicProjectFileManager("C:\project.vbproj")
 vbproj.OptionInferEnabled = True
 vbproj.Document.Save("C:\modified.vbproj", SaveOptions.None)
 Process.Start("notepad.exe", "C:\modified.vbproj")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> to enable <see langword="OptionStrict"/>, otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.Settings.Types.VisualBasicProjectFileManager"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.#ctor(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Settings.Types.VisualBasicProjectFileManager"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The source .vbproj project filepath.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 file;The specified file isn't a VisualBasic.NET project file.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.#ctor(System.IO.FileInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Settings.Types.VisualBasicProjectFileManager"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="file">
 The source .vbproj project file.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 file;The specified file isn't a VisualBasic.NET project file.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.GetXDocument">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a <see cref="T:System.Xml.Linq.XDocument"/> that represents the .vbproj project file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Xml.Linq.XDocument"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.GetElementValue(System.Xml.Linq.XElement,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the value of the specified <see cref="T:System.Xml.Linq.XElement"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="parentElement">
 The parent element.
 </param>
 
 <param name="elementName">
 The name of the element.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The value of the specified <see cref="T:System.Xml.Linq.XElement"/>, or <see langword="Nothing"/> if the element doesn't exists.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.GetElementValue``1(System.Xml.Linq.XElement,System.String,System.Func{System.String,``0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the value of the specified <see cref="T:System.Xml.Linq.XElement"/> and casts it to the specified type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The value type.
 </typeparam>
 
 <param name="parentElement">
 The parent element.
 </param>
 
 <param name="elementName">
 The name of the element.
 </param>
 
 <param name="valueFunc">
 A function that determines how the value will be converted to the specified type.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The value of the specified <see cref="T:System.Xml.Linq.XElement"/>, or <see langword="Nothing"/> if the element doesn't exists.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.SetElementValue(System.Xml.Linq.XElement,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the value of the specified <see cref="T:System.Xml.Linq.XElement"/>. If the element doesn't exists, creates it.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="parentElement">
 The parent element.
 </param>
 
 <param name="elementName">
 The name of the element to set or create.
 </param>
 
 <param name="value">
 The value to assign to the <see cref="T:System.Xml.Linq.XElement"/> of <paramref name="elementName"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.GetReferencedAssemblies">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the referenced assemblies.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The referenced assemblies.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.SetReferencedAssemblies(System.Collections.Generic.SortedDictionary{System.String,System.String})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the referenced assemblies.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="value">
 The new referenced assemblies.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.GetImportedNamespaces">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the imported namespaces.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The imported namespaces.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.VisualBasicProjectFileManager.SetImportedNamespaces(System.Collections.Generic.SortedSet{System.String})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the imported namespaces.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="value">
 The new imported namespaces.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Settings.Types.IniKey">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents a initialization file (INI) key.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.IniKey.Name">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the key name.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The key name.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.IniKey.Value">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the key value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The key value.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.IniKey.CommentLine">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the key comment-line.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The key comment-line.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniKey.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.Settings.Types.IniKey"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniKey.#ctor(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Settings.Types.IniKey"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="name">
 The key name.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniKey.#ctor(System.String,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Settings.Types.IniKey"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="name">
 The key name.
 </param>
 
 <param name="value">
 The key value.
 </param>
 
 <param name="comment">
 The key commentary-line.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 name
 </exception>
 
 <exception cref="T:System.ArgumentException">
 The key name cannot contain the ';' symbol because it identifies a commentary line.,name
 or
 The key name cannot contain the '=' symbol because it delimits the name from the value.,name
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Settings.Types.IniKeyCollection">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents a strongly typed list of <see cref="T:Elektro.Application.Settings.Types.IniKey"/> that can be accessed by an index.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniKeyCollection.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Settings.Types.IniKeyCollection"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.IniKeyCollection.Item(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the <see cref="T:Elektro.Application.Settings.Types.IniKey"/> that matches the specified key name.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="keyName">
 The key name.
 </param>
 ----------------------------------------------------------------------------------------------------
 <value>
 The <see cref="T:Elektro.Application.Settings.Types.IniKey"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniKeyCollection.Add(Elektro.Application.Settings.Types.IniKey)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds a <see cref="T:Elektro.Application.Settings.Types.IniKey"/> to the end of the <see cref="T:Elektro.Application.Settings.Types.IniKeyCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="key">
 The key to add.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Section already exists.;section
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniKeyCollection.Add(System.String,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds a <see cref="T:Elektro.Application.Settings.Types.IniKey"/> to the end of the <see cref="T:Elektro.Application.Settings.Types.IniKeyCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="name">
 The name of the key to add.
 </param>
 
 <param name="value">
 The value.
 </param>
 
 <param name="comment">
 An optional comment-line.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Key already exists.;section
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniKeyCollection.AddRange(Elektro.Application.Settings.Types.IniKey[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds the specified keys to the end of the <see cref="T:Elektro.Application.Settings.Types.IniKeyCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="keys">
 The keys to add.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Key already exists.;section
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniKeyCollection.AddRange(System.String[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds the specified keys to the end of the <see cref="T:Elektro.Application.Settings.Types.IniKeyCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="keyNames">
 The names of the keys to add.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Section already exists.;section
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniKeyCollection.Remove(Elektro.Application.Settings.Types.IniKey)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes a <see cref="T:Elektro.Application.Settings.Types.IniKey"/> from the <see cref="T:Elektro.Application.Settings.Types.IniKeyCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="key">
 The key to remove.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Key doesn't exists.;key
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniKeyCollection.Remove(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes a <see cref="T:Elektro.Application.Settings.Types.IniKey"/> from the <see cref="T:Elektro.Application.Settings.Types.IniKeyCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="keyName">
 The key to remove.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Key doesn't exists.;keyName
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniKeyCollection.Contains(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the <see cref="T:Elektro.Application.Settings.Types.IniKeyCollection"/> contains a <see cref="T:Elektro.Application.Settings.Types.IniKey"/> that 
 matches the specified key name.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="keyName">
 The key name.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the <see cref="T:Elektro.Application.Settings.Types.IniKeyCollection"/> contains the <see cref="T:Elektro.Application.Settings.Types.IniKey"/>, 
 <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniKeyCollection.Find(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Searches for an <see cref="T:Elektro.Application.Settings.Types.IniKey"/> that matches the specified key name, 
 and returns the first occurrence within the entire <see cref="T:Elektro.Application.Settings.Types.IniKeyCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="keyName">
 The key name.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see cref="T:Elektro.Application.Settings.Types.IniKey"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniKeyCollection.IndexOf(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Searches for an <see cref="T:Elektro.Application.Settings.Types.IniKey"/> that matches the specified key name and 
 returns the zero-based index of the first occurrence within the entire <see cref="T:Elektro.Application.Settings.Types.IniKeyCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="keyName">
 The key name.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index of the first occurrence of <see cref="T:Elektro.Application.Settings.Types.IniKey"/> within the entire <see cref="T:Elektro.Application.Settings.Types.IniKeyCollection"/>, if found; 
 otherwise, <c>–1</c>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Settings.Types.IniFile">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents a INI file on which read or build sections and keys, to save or load application settings.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim ini As New IniFile("C:\File.ini", Encoding.Default)
 
 With ini
 
     .Clear()
 
     .Sections.Add("SectionName")
     .Sections("SectionName").Keys.Add("KeyName", value:="", comment:="Commentary")
     .Sections("SectionName").Keys("KeyName").Value = "True"
 
     .Save()
 
 End With
 
 Console.WriteLine(ini.ToString)
 
 Dim setting As Boolean = CBool(ini.Sections("SectionName").Keys("KeyName").Value)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Settings.Types.IniFile.fs">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The INI <see cref="T:System.IO.FileStream"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.IniFile.FilePath">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the initialization file (INI) path.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The initialization file (INI) path.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Settings.Types.IniFile.filepathB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The initialization file (INI) path.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.IniFile.Encoding">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the initialization file (INI) encoding.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The initialization file (INI) encoding.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Settings.Types.IniFile.encodingB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The initialization file (INI) encoding.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.IniFile.Sections">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the initialization file (INI) sections.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The initialization file (INI) sections.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Settings.Types.IniFile.sectionsB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The initialization file (INI) sections.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.IniFile.SectionNames">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the initialization file (INI) section names.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The initialization file (INI) section names.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniFile.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.Settings.Types.IniFile"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniFile.#ctor(System.String,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Settings.Types.IniFile"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The initialization file (INI) path.
 </param>
 
 <param name="enc">
 The encoding to read/write the INI file.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniFile.#ctor(System.IO.FileInfo,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Settings.Types.IniFile"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="fileinfo">
 The initialization file (INI).
 </param>
 
 <param name="enc">
 The encoding to read/write the INI file.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniFile.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a <see cref="T:System.String"/> that represents this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.String"/> that represents this instance.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniFile.Clear">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Clears the INI content.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniFile.Save">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Saves the INI changes to file.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniFile.GetIniSections">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the initialization file (INI) sections.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:Elektro.Application.Settings.Types.IniSectionCollection"/> collection that contains the INI sections.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniFile.GetIniSectionNames">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the INI section names.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The INI section names.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniFile.BuildIniContent">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Builds the new INI content
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniFile.GetIniContent">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the INI content as string.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Settings.Types.IniFile.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniFile.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniFile.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Settings.Types.IniSection">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents a initialization file (INI) section.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.IniSection.Name">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the section name.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The section name.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.IniSection.Keys">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the section keys.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The section keys.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniSection.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.Settings.Types.IniSection"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniSection.#ctor(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Settings.Types.IniSection"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="name">
 The section name.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniSection.#ctor(System.String,Elektro.Application.Settings.Types.IniKeyCollection)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Settings.Types.IniSection"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="name">
 The section name.
 </param>
 
 <param name="keys">
 The section keys.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 name
 </exception>
 
 <exception cref="T:System.ArgumentException">
 The section name cannot contain the '[' or ']' symbols because it identifies a section.,name
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Settings.Types.IniSectionCollection">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents a strongly typed list of <see cref="T:Elektro.Application.Settings.Types.IniSection"/> that can be accessed by an index.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniSectionCollection.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Settings.Types.IniSectionCollection"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.IniSectionCollection.Item(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the <see cref="T:Elektro.Application.Settings.Types.IniSection"/> that matches the specified section name.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sectionName">
 The section name.
 </param>
 ----------------------------------------------------------------------------------------------------
 <value>
 The <see cref="T:Elektro.Application.Settings.Types.IniSection"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniSectionCollection.Add(Elektro.Application.Settings.Types.IniSection)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds a <see cref="T:Elektro.Application.Settings.Types.IniSection"/> to the end of the <see cref="T:Elektro.Application.Settings.Types.IniSectionCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="section">
 The section to add.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Section already exists.;section
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniSectionCollection.Add(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds a <see cref="T:Elektro.Application.Settings.Types.IniSection"/> to the end of the <see cref="T:Elektro.Application.Settings.Types.IniSectionCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sectionName">
 The section name to add.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Section already exists.;section
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniSectionCollection.AddRange(Elektro.Application.Settings.Types.IniSection[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds the specified sections to the end of the <see cref="T:Elektro.Application.Settings.Types.IniSectionCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sections">
 The sections to add.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Section already exists.;section
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniSectionCollection.AddRange(System.String[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds the specified section names to the end of the <see cref="T:Elektro.Application.Settings.Types.IniSectionCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sectionNames">
 The section names to add.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Section already exists.;section
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniSectionCollection.Remove(Elektro.Application.Settings.Types.IniSection)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes a <see cref="T:Elektro.Application.Settings.Types.IniSection"/> from the <see cref="T:Elektro.Application.Settings.Types.IniSectionCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="section">
 The section to remove.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Section doesn't exists.;section
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniSectionCollection.Remove(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes a <see cref="T:Elektro.Application.Settings.Types.IniSection"/> from the <see cref="T:Elektro.Application.Settings.Types.IniSectionCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sectionName">
 The section name to remove.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Section doesn't exists.;section
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniSectionCollection.Contains(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the <see cref="T:Elektro.Application.Settings.Types.IniSectionCollection"/> contains a <see cref="T:Elektro.Application.Settings.Types.IniSection"/> that 
 matches the specified section name.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sectionName">
 The section name.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the <see cref="T:Elektro.Application.Settings.Types.IniSectionCollection"/> contains the <see cref="T:Elektro.Application.Settings.Types.IniSection"/>, 
 <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniSectionCollection.Find(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Searches for an <see cref="T:Elektro.Application.Settings.Types.IniSection"/> that matches the specified section name, 
 and returns the first occurrence within the entire <see cref="T:Elektro.Application.Settings.Types.IniSectionCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sectionName">
 The section name.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see cref="T:Elektro.Application.Settings.Types.IniSection"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.IniSectionCollection.IndexOf(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Searches for an <see cref="T:Elektro.Application.Settings.Types.IniSection"/> that matches the specified section name and 
 returns the zero-based index of the first occurrence within the entire <see cref="T:Elektro.Application.Settings.Types.IniSectionCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sectionName">
 The section name.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index of the first occurrence of <see cref="T:Elektro.Application.Settings.Types.IniSection"/> within the entire <see cref="T:Elektro.Application.Settings.Types.IniSectionCollection"/>, if found; 
 otherwise, <c>–1</c>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Settings.Types.MruFileItem">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents a File-item of a most recent used List (MRU).
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim mruItems As New List(Of MruFileItem)
 
 ' Add some items into the collection.
 With mruItems
     .Add(New MruFileItem("C:\File1.ext"))
     .Add(New MruFileItem("C:\File2.ext") With {.Date = Date.Now,
                                                .Icon = Bitmap.FromFile("C:\Icon.ico"),
                                                .Tag = New Object()})
 End With
 
 ' Serialize the MRU collection to file.
 MruUtil.Save(mruItems, ".\MRU.tmp")
 
 ' Deserialize the MRU Item collection from file.
 For Each mruItem As MruFileItem In MruUtil.Load(Of IEnumerable(Of MruFileItem))(".\MRU.tmp")
     MessageBox.Show(mruItem.FilePath)
 Next mruItem
 
 ' Just another way to deserialize the collection:
 MruUtil.Load(mruItems.ToList, ".\MRU.tmp")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.MruFileItem.FilePath">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the item filepath.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The filepath.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Settings.Types.MruFileItem.filePathB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The item filepath.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.MruFileItem.Icon">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the file icon.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The file icon.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.MruFileItem.#ctor(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Settings.Types.MruFileItem"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The filepath.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 item
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Settings.Types.MruItem`1">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents a item of a most recent used List (MRU).
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim mruItems As New List(Of MruItem(Of String))
 
 ' Add some items into the collection.
 With mruItems
     .Add(New MruItem(Of String)("Something1"))
     .Add(New MruItem(Of String)("Something1") With {.Date = Date.Now, .Tag = New Object()})
 End With
 
 ' Serialize the MRU collection to file.
 MruUtil.Save(mruItems, ".\MRU.tmp")
 
 ' Deserialize the MRU Item collection from file.
 For Each mruItem As MruItem(Of String) In MruUtil.Load(Of IEnumerable(Of MruItem(Of String)))(".\MRU.tmp")
     MessageBox.Show(mruItem.FilePath)
 Next mruItem
 
 ' Just another way to deserialize the collection:
 MruUtil.Load(mruItems.ToList, ".\MRU.tmp")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.MruItem`1.Item">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the item.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The item.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Settings.Types.MruItem`1.itemB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The item filepath.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.MruItem`1.Date">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the date on which this item was added to the MRU list.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The date on which this item was added to the MRU list.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Types.MruItem`1.Tag">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a tag for this MRU item.
 <para></para>
 A tag could contain any kind of additional info.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The tag object.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.MruItem`1.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.Settings.Types.MruItem`1"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Types.MruItem`1.#ctor(`0)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Settings.Types.MruItem`1"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="item">
 The item.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 item
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Settings.Tools.AppConfig">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains AppConfig related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Tools.AppConfig.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.Settings.Tools.AppConfig"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Tools.AppConfig.GetAppConfigSetting``1(System.String,System.String,System.String,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the value of a setting declared in the application configuration file (app.config) 
 of the specified application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim isPerfCountersEnabled As Boolean = GetAppConfigSetting(Of Boolean)("system.net", "settings", "performanceCounters", "enabled")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sectionGroupName">
 The name of the section group.
 </param>
 
 <param name="sectionName">
 The name of the section.
 </param>
 
 <param name="elementName">
 The name of the element.
 </param>
 
 <param name="propertyName">
 The name of the property.
 </param>
 
 <param name="exePath">
 The executable path of the current or an external .Net application.
 If any path is specified, it assumes the current application.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the SectionGroup, the Section, the Element, or the Property doesn't exist, the return value is <see langword="Nothing"/>,
 otherwise, the value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Tools.AppConfig.GetAppConfigSetting``1(System.String,System.String,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the value of a setting declared in the application configuration file (app.config) 
 of the specified application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = GetAppConfigSetting(Of Boolean)("sectionName", "elementName", "propertyName")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sectionName">
 The name of the section.
 </param>
 
 <param name="elementName">
 The name of the element.
 </param>
 
 <param name="propertyName">
 The name of the property.
 </param>
 
 <param name="exePath">
 The executable path of the current or an external .Net application.
 If any path is specified, it assumes the current application.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the Section, the Element, or the Property doesn't exist, the return value is <see langword="Nothing"/>,
 otherwise, the value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Tools.AppConfig.FilePath">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the app-config filepath.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim filepath As String = FilePath
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The app-config filepath.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Tools.AppConfig.DirectoryPath">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the app-config directory path.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dirpath As String = DirectoryPath
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The app-config directory path.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Tools.AppConfig.PerformanceCountersEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the performance counters feature is enabled in the application configuration file (app.config) 
 of the current application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim enabled As Boolean = PerformanceCountersEnabled
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 Returns <see langword="False"/> if the performance counters feature is disabled 
 or if the "<c>system.net</c>" section is not defined; 
 otherwise, <see langword="True"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Tools.AppConfig.IsPerformanceCountersEnabled(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the performance counters feature is enabled in the application configuration file (app.config) 
 of the specified application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="exeFilePath">
 The executable path of the current or an external .Net application.
 <para></para>
 If any path is specified, it assumes the current application.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 Returns <see langword="False"/> if the performance counters feature is disabled 
 or if the "<c>system.net</c>" section is not defined; 
 otherwise, <see langword="True"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Settings.Tools.MruUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains most recent used (MRU) related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Tools.MruUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.Settings.Tools.MruUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Tools.MruUtil.Load``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Loads a serialized <see cref="T:System.Collections.Generic.IEnumerable`1"/> from the specified local file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim mruItems As List(Of MruFileItem) = Load(Of MruFileItem)(".\MRU.tmp").ToList
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="filepath">
 The source filepath.
 </param>
 
 <returns>
 The resulting <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Tools.MruUtil.Load``2(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Loads a serialized <see cref="T:System.Collections.Generic.IEnumerable`1"/> from the specified local file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim mruItems As List(Of MruItem(Of String)) = Load(Of String, MruItem(Of String))(".\MRU.tmp").ToList
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="A">
 The type.
 </typeparam>
 
 <typeparam name="B">
 The type.
 </typeparam>
 
 <param name="filepath">
 The source filepath.
 </param>
 
 <returns>
 The resulting <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Tools.MruUtil.Load``1(System.Collections.Generic.IEnumerable{Elektro.Application.Settings.Types.MruItem{``0}}@,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Loads a serialized <see cref="T:System.Collections.Generic.IEnumerable`1"/> from the specified local file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim mruItems As New List(Of MruItem(Of String))
 ' ...
 
 Load(mruItems, ".\MRU.tmp")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="mruCol">
 The target <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="filepath">
 The source filepath.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Tools.MruUtil.Save``1(System.Collections.Generic.IEnumerable{Elektro.Application.Settings.Types.MruItem{``0}},System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Saves the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> to local file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim mruItems As New List(Of MruItem(Of String))
 
 Save(mruItems, ".\MRU.tmp")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="mruCol">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="filepath">
 The target filepath.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Settings.Tools.UserConfig">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains UserConfig related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Settings.Tools.UserConfig.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.Settings.Tools.UserConfig"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Tools.UserConfig.FilePath">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the user-config filepath.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim filepath As String = FilePath
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The user-config filepath.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Settings.Tools.UserConfig.DirectoryPath">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the user-config directory path.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dirpath As String = DirectoryPath
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The user-config directory path.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Tools.AppUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains application related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.AppUtil.ProcessArchitecture">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the architecture of the current process is 32 or 64 Bits.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim arch As ProcessArchitecture = CurrentArchitecture
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 An <see cref="P:Elektro.Application.Tools.AppUtil.ProcessArchitecture"/> object that specifies the architecture of the current process.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.AppUtil.LoadedAssemblies">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the loaded assemblies of the current assembly.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 For Each ass As Assembly In LoadedAssemblies
 
     Console.WriteLine(ass.GetName.Name)
 
 Next ass
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The loaded assemblies.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.AppUtil.ReferencedAssemblies">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the referenced assemblies of the current assembly.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 For Each assn As AssemblyName In ReferencedAssemblies
 
     Console.WriteLine(ass.Name)
 
 Next assn
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The loaded assemblies.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.AppUtil.Filename">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the filename, without extension, of the current assembly.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim filename As String = Filename
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The filename, without extension, of the current assembly.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.AppUtil.FileExtension">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the file extension of the current assembly.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim fileExt As String = FileExtension
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The file extension of the current assembly.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.AppUtil.DirectoryPath">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the directory path where the current assembly is stored.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dirpath As String = DirectoryPath
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The directory path where the current assembly is stored.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.AppUtil.Fullpath">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the full path of the current assembly.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim fullpath As String = fullpath
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The full path of the current assembly.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.AppUtil.Threads">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the set of threads that are running in the current process.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim threads As ProcessThreadCollection = Threads
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The set of threads that are running in the current process.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.AppUtil.ProcessPriority">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the overall priority category for the associated process.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim priority As ProcessPriorityClass = ProcessPriority
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The overall priority category for the associated process.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.AppUtil.ProcessErrorMode">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value that controls whether the system will handle the specified types of serious errors 
 or whether the current process will handle them.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim errMode As ProcessErrorModes = ProcessErrorMode
 If Not errMode.HasFlag(ProcessErrorModes.FailCriticalErrors) Then
     ProcessErrorMode = (errMode Or ProcessErrorModes.FailCriticalErrors)
 End If
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The error mode of the current process.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.AppUtil.ThreadErrorMode">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value that controls whether the system will handle the specified types of serious errors 
 or whether the current process will handle them.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim errMode As ThreadErrorModes = ThreadErrorMode
 If Not errMode.HasFlag(ThreadErrorModes.FailCriticalErrors) Then
     ThreadErrorMode = (errMode Or ThreadErrorModes.FailCriticalErrors)
 End If
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The error mode of the current thread.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Tools.AppUtil.SetThreadPriority(System.Threading.ThreadPriority)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the priority for the current thread.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 SetThreadPriority(ThreadPriorityLevel.Normal)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="priority">
 The new thread priority.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Tools.AppUtil.SetThreadPriority(System.Int32,System.Diagnostics.ThreadPriorityLevel)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the priority for the target thread.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 SetThreadPriority(0, ThreadPriorityLevel.Normal)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="index">
 The thread index.
 </param>
 
 <param name="priority">
 The new thread priority.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Tools.AppUtil.rand">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A <see cref="T:System.Random"/> instance to generate random secuences of numbers.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Tools.AppUtil.Sleep(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Blocks the current thread for the specified amount of time, in milliseconds.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Sleep(1000)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="timeout">
 The amount of time to sleep, in milliseconds.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Tools.AppUtil.Sleep(System.TimeSpan)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Blocks the current thread for the specified amount of time.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Sleep(TimeSpan.FromSeconds(5))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="time">
 The amount of time to sleep.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Tools.AppUtil.SleepRandom(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Blocks the current thread for a random amount of time, in milliseconds, 
 between <c>1</c> and the specified maximum value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 SleepRandom(max:=5000)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="max">
 The maximum amount of time to sleep, in milliseconds.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Tools.AppUtil.SleepRandom(System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Blocks the current thread for a random amount of time, in milliseconds, 
 between the specified minimum and maximum values.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 SleepRandom(min:=1000, max:=5000)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="min">
 The minimum amount of time to sleep, in milliseconds.
 </param>
 
 <param name="max">
 The maximum amount of time to sleep, in milliseconds.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Tools.AppUtil.SleepRandom(System.TimeSpan)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Blocks the current thread for a random amount of time, 
 between <c>1</c> millisecond and the specified maximum values.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 SleepRandom(max:=TimeSpan.FromMilliseconds(5000))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="max">
 The maximum amount of time to sleep.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Tools.AppUtil.SleepRandom(System.TimeSpan,System.TimeSpan)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Blocks the current thread for a random amount of time between the specified minimum and maximum values.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 SleepRandom(min:=TimeSpan.FromMilliseconds(1000), max:=TimeSpan.FromMilliseconds(5000))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="min">
 The minimum amount of time to sleep.
 </param>
 
 <param name="max">
 The maximum amount of time to sleep.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Tools.AppUtil.SetFirstRunFlag(Elektro.System.Enums.RegistryScope,System.String,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes a registry value with name <c>IsFirstRun</c> under the <c>HKCU\SOFTWARE\{Application Name}\</c> registry key 
 to evaluate whether this is the first run of the current application in any next application runs.
 <para></para>
 The flag is 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim valueName As String = My.Application.Info.ProductName
 Dim isFirstRun As Boolean = GetFirstRunFlag(RegistryScope.CurrentUser, valueName)
 
 If (isFirstRun) Then
     SetFirstRunFlag(RegistryScope.CurrentUser, valueName, value:=False)
 End If
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="scope">
 The registry scope.
 </param>
 
 <param name="aplicationName">
 The name of the aplication.
 <para></para>
 ( or other identifier to assign the name of the registry value. )
 </param>
 
 <param name="value">
 Set this value to <see langword="False"/> if this is the first app-run.
 <para></para>
 Set this value to <see langword="True"/> for testing purposes to reset the flag, 
 so the next application run will be threathed as the first application run.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Tools.AppUtil.GetFirstRunFlag(Elektro.System.Enums.RegistryScope,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the first run flag registry.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim valueName As String = My.Application.Info.ProductName
 Dim isFirstRun As Boolean = GetFirstRunFlag(RegistryScope.CurrentUser, valueName)
 
 If (isFirstRun) Then
     SetFirstRunFlag(RegistryScope.CurrentUser, valueName, value:=False)
 End If
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="scope">
 The registry scope.
 </param>
 
 <param name="aplicationName">
 The name of the aplication.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if this is the first run of the current application, 
 <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Tools.AppUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.Tools.AppUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Tools.CultureUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains application related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Tools.CultureUtil.Cultures">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Exposes common UI cultures.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Tools.CultureUtil.Cultures.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.Tools.CultureUtil.Cultures"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.English">
 ----------------------------------------------------------------------------------------------------
 <summary>
 English culture ("en-US").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The English culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.Spanish">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Spanish culture ("es-ES").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Spanish culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.Arabic">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Arabic culture ("ar-SA").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Arabic culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.Catalonian">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Catalonian culture ("ca-ES").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Catalonian culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.Danish">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Danish culture ("da-DK").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Danish culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.German">
 ----------------------------------------------------------------------------------------------------
 <summary>
 German culture ("de-DE").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The German culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.Greek">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Greek culture ("el-GR").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Greek culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.Mexican">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Mexican culture ("es-MX").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Mexican culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.Basque">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Basque culture ("eu-ES").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Basque culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.French">
 ----------------------------------------------------------------------------------------------------
 <summary>
 French culture ("fr-FR").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The French culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.Galician">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Galician culture ("gl-ES").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Galician culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.Hungarian">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Hungarian culture ("hu-HU").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Hungarian culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.Italian">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Italian culture ("it-IT").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Italian culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.Japanese">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Japanese culture ("ja-JP").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Japanese culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.Korean">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Korean culture ("ko-KR").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Korean culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.Dutch">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Dutch culture ("nl-NL").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Dutch culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.Polish">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Polish culture ("pl-PL").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Polish culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.Portuguese">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Portuguese culture ("pt-BR").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Portuguese culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.Romanian">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Romanian culture ("ro-RO").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Romanian culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.Russian">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Russian culture ("ru-RU").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Russian culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.Swedish">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Swedish culture ("sv-SE").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Swedish culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.Turkish">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Turkish culture ("tr-TR").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Turkish culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.ChineseSimplified">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Simplified Chinese culture ("zh-Hans").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Simplified Chinese culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.Cultures.ChineseTraditional">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Traditional Chinese culture ("zh-Hant").
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Traditional Chinese culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Tools.CultureUtil.SetCurrentCulture(System.Globalization.CultureInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the culture of the current thread.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 SetCurrentCulture(Cultures.English)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="ci">
 The <see cref="T:System.Globalization.CultureInfo"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Tools.CultureUtil.SetCurrentCulture(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the culture of the current thread.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 SetCurrentCulture("en-US")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="name">
 The culture name (eg. "en-US").
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Tools.CultureUtil.CurrentCulture">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the UI culture of the current thread.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim ci As CultureInfo = CurrentCulture
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The UI culture of the current thread.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Tools.CultureUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.Tools.CultureUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Types.CommandlineParameterCollection">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents a strongly typed list of <see cref="T:Elektro.Application.Types.CommandlineParameter"/> that can be accessed by an index.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public ReadOnly Param1 As New CommandlineParameter(Of String) With {
     .Name = "/Name1",
     .ShortName = "/n1",
     .Separator = "="c,
     .DefaultValue = "",
     .IsOptional = False
 }

 Public ReadOnly Param2 As New CommandlineParameter(Of Boolean) With {
     .Name = "/Name2",
     .ShortName = "/n2",
     .Separator = "="c,
     .DefaultValue = True,
     .IsOptional = False
 }

 Sub Main()

     Dim args As New CommandlineParameterCollection
     With args
         .Add(Param1)
         .Add(Param2)
     End With

     ParseArguments(args, AddressOf OnSyntaxError, AddressOf OnMissingParameterRequired)
     
     MsgBox(CStr(args("/Name1").Value))
     MsgBox(CBool(args("/Name2").Value))
     ' ...

 End Sub

 ''' ----------------------------------------------------------------------------------------------------
 ''' &lt;summary&gt;
 ''' Loop through all the command-line arguments of this application.
 ''' &lt;/summary&gt;
 ''' ----------------------------------------------------------------------------------------------------
 ''' &lt;param name="cmds"&gt;
 ''' The commandline parameters.
 ''' &lt;/param>
 ''' 
 ''' &lt;param name="callbackSyntaxError"&gt;
 ''' An encapsulated method that is invoked if a syntax error is found in one of the arguments.
 ''' &lt;/param&gt;
 ''' 
 ''' &lt;param name="callbackMissingRequired"&gt;
 ''' An encapsulated method that is invoked if a required parameter is missing in the arguments.
 ''' &lt;/param&gt;
 ''' ----------------------------------------------------------------------------------------------------
 Friend Sub ParseArguments(ByVal cmds As CommandlineParameterCollection,
                           ByVal callbackSyntaxError As Action(Of CommandlineParameter),
                           ByVal callbackMissingRequired As Action(Of CommandlineParameter))

     ParseArguments(cmds, Environment.GetCommandLineArgs.Skip(1), callbackSyntaxError, callbackMissingRequired)

 End Sub

 ''' ----------------------------------------------------------------------------------------------------
 ''' &lt;summary&gt;
 ''' Loop through all the command-line arguments of this application.
 ''' &lt;/summary&gt;
 ''' ----------------------------------------------------------------------------------------------------
 ''' &lt;param name="cmds"&gt;
 ''' The commandline parameters.
 ''' &lt;/param&gt;
 ''' 
 ''' &lt;param name="args"&gt;
 ''' The collection of commandline arguments to examine.
 ''' &lt;/param&gt;
 ''' 
 ''' &lt;param name="callbackSyntaxError"&gt;
 ''' An encapsulated method that is invoked if a syntax error is found in one of the arguments.
 ''' &lt;/param&gt;
 ''' 
 ''' &lt;param name="callbackMissingRequired"&gt;
 ''' An encapsulated method that is invoked if a required parameter is missing in the arguments.
 ''' &lt;/param&gt;
 ''' ----------------------------------------------------------------------------------------------------
 Friend Sub ParseArguments(ByVal cmds As CommandlineParameterCollection,
                           ByVal args As IEnumerable(Of String),
                           ByVal callbackSyntaxError As Action(Of CommandlineParameter),
                           ByVal callbackMissingRequired As Action(Of CommandlineParameter))

     If Not (args.Any) Then
         PrintHelp()
     End If

     Dim cmdRequired As List(Of CommandlineParameter) =
         (From cmd As CommandlineParameter In cmds
          Where Not cmd.IsOptional).ToList

     For Each arg As String In args

         For Each cmd As CommandlineParameter In cmds

             If (arg.StartsWith(cmd.Name &amp; cmd.Separator, StringComparison.OrdinalIgnoreCase)) OrElse
                (arg.StartsWith(cmd.ShortName &amp; cmd.Separator, StringComparison.OrdinalIgnoreCase)) Then

                 Dim value As String = arg.Substring(arg.IndexOf(cmd.Separator) + 1)

                 If (cmdRequired.Contains(cmd)) Then
                     cmdRequired.Remove(cmd)
                 End If

                 If String.IsNullOrEmpty(value) Then
                     cmd.Value = cmd.DefaultValue
                     Continue For

                 Else
                     Try
                         cmd.Value = Convert.ChangeType(value, cmd.DefaultValue.GetType())
                         Continue For

                     Catch ex As Exception
                         callbackSyntaxError.Invoke(cmd)
                         Exit Sub

                     End Try

                 End If

             ElseIf arg.Equals("/?") Then
                 PrintHelp()

             End If

         Next cmd

     Next arg

     If (cmdRequired.Any) Then
         callbackMissingRequired.Invoke(cmdRequired.First)
     End If

 End Sub

 Friend Sub OnSyntaxError(ByVal cmd As CommandlineParameter)

     Console.WriteLine(String.Format("[X] Syntax error in parameter: {0} (or {1})", cmd.Name, cmd.ShortName))
     Environment.Exit(exitCode:=1)

 End Sub

 Friend Sub OnMissingParameterRequired(ByVal cmd As CommandlineParameter)

     Console.WriteLine(String.Format("[X] Parameter {0} (or {1}) is required. ", cmd.Name, cmd.ShortName))
     Environment.Exit(exitCode:=1)

 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.CommandlineParameterCollection.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Types.CommandlineParameterCollection"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Types.CommandlineParameterCollection.Item(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the <see cref="T:Elektro.Application.Types.CommandlineParameter"/> that matches the specified key name.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="paramName">
 The parameter name.
 </param>
 ----------------------------------------------------------------------------------------------------
 <value>
 The <see cref="T:Elektro.Application.Types.CommandlineParameter"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.CommandlineParameterCollection.Add(Elektro.Application.Types.CommandlineParameter@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds a <see cref="T:Elektro.Application.Types.CommandlineParameter"/> to the end of the <see cref="T:Elektro.Application.Types.CommandlineParameterCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="param">
 The parameter to add.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Parameter already exists.;param
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.CommandlineParameterCollection.Add``1(Elektro.Application.Types.CommandlineParameter{``0}@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds a <see cref="T:Elektro.Application.Types.CommandlineParameter`1"/> to the end of the <see cref="T:Elektro.Application.Types.CommandlineParameterCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="param">
 The parameter to add.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Parameter already exists.;param
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.CommandlineParameterCollection.AddRange(Elektro.Application.Types.CommandlineParameter[]@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds the specified parameters to the end of the <see cref="T:Elektro.Application.Types.CommandlineParameterCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="params">
 The parameters to add.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Parameter already exists.;param
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.CommandlineParameterCollection.AddRange``1(Elektro.Application.Types.CommandlineParameter{``0}[]@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds the specified parameters to the end of the <see cref="T:Elektro.Application.Types.CommandlineParameterCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="params">
 The parameters to add.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Parameter already exists.;param
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.CommandlineParameterCollection.Remove(Elektro.Application.Types.CommandlineParameter)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes a <see cref="T:Elektro.Application.Types.CommandlineParameter"/> from the <see cref="T:Elektro.Application.Types.CommandlineParameterCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="param">
 The parameter.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Parameter doesn't exists.;name
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.CommandlineParameterCollection.Remove``1(Elektro.Application.Types.CommandlineParameter{``0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes a <see cref="T:Elektro.Application.Types.CommandlineParameter`1"/> from the <see cref="T:Elektro.Application.Types.CommandlineParameterCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="param">
 The parameter.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Parameter doesn't exists.;name
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.CommandlineParameterCollection.Remove(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes a <see cref="T:Elektro.Application.Types.CommandlineParameter"/> from the <see cref="T:Elektro.Application.Types.CommandlineParameterCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="name">
 The name of the parameter.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Parameter doesn't exists.;name
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.CommandlineParameterCollection.Contains(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the <see cref="T:Elektro.Application.Types.CommandlineParameterCollection"/> contains a <see cref="T:Elektro.Application.Types.CommandlineParameter"/> that 
 matches the specified key name.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="name">
 The name of the parameter.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the <see cref="T:Elektro.Application.Types.CommandlineParameterCollection"/> contains the <see cref="T:Elektro.Application.Types.CommandlineParameter"/>, 
 <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.CommandlineParameterCollection.Find(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Searches for an <see cref="T:Elektro.Application.Types.CommandlineParameter"/> that matches the specified parameter name, 
 and returns the first occurrence within the entire <see cref="T:Elektro.Application.Types.CommandlineParameterCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="name">
 The name of the parameter.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see cref="T:Elektro.Application.Types.CommandlineParameter"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.CommandlineParameterCollection.IndexOf(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Searches for an <see cref="T:Elektro.Application.Types.CommandlineParameter"/> that matches the specified key name and 
 returns the zero-based index of the first occurrence within the entire <see cref="T:Elektro.Application.Types.CommandlineParameterCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="name">
 The name of the parameter.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index of the first occurrence of <see cref="T:Elektro.Application.Types.CommandlineParameter"/> within the entire <see cref="T:Elektro.Application.Types.CommandlineParameterCollection"/>, if found; 
 otherwise, <c>–1</c>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Types.CommandlineParameter">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents a Commandline Parameter.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public ReadOnly Param1 As New CommandlineParameter(Of String) With {
     .Name = "/Name1",
     .ShortName = "/n1",
     .Separator = "="c,
     .DefaultValue = "",
     .IsOptional = False
 }

 Public ReadOnly Param2 As New CommandlineParameter(Of Boolean) With {
     .Name = "/Name2",
     .ShortName = "/n2",
     .Separator = "="c,
     .DefaultValue = True,
     .IsOptional = False
 }

 Sub Main()

     Dim args As New CommandlineParameterCollection
     With args
         .Add(Param1)
         .Add(Param2)
     End With

     ParseArguments(args, AddressOf OnSyntaxError, AddressOf OnMissingParameterRequired)
     
     MsgBox(CStr(args("/Name1").Value))
     MsgBox(CBool(args("/Name2").Value))
     ' ...

 End Sub

 ''' ----------------------------------------------------------------------------------------------------
 ''' &lt;summary&gt;
 ''' Loop through all the command-line arguments of this application.
 ''' &lt;/summary&gt;
 ''' ----------------------------------------------------------------------------------------------------
 ''' &lt;param name="cmds"&gt;
 ''' The commandline parameters.
 ''' &lt;/param>
 ''' 
 ''' &lt;param name="callbackSyntaxError"&gt;
 ''' An encapsulated method that is invoked if a syntax error is found in one of the arguments.
 ''' &lt;/param&gt;
 ''' 
 ''' &lt;param name="callbackMissingRequired"&gt;
 ''' An encapsulated method that is invoked if a required parameter is missing in the arguments.
 ''' &lt;/param&gt;
 ''' ----------------------------------------------------------------------------------------------------
 Friend Sub ParseArguments(ByVal cmds As CommandlineParameterCollection,
                           ByVal callbackSyntaxError As Action(Of CommandlineParameter),
                           ByVal callbackMissingRequired As Action(Of CommandlineParameter))

     ParseArguments(cmds, Environment.GetCommandLineArgs.Skip(1), callbackSyntaxError, callbackMissingRequired)

 End Sub

 ''' ----------------------------------------------------------------------------------------------------
 ''' &lt;summary&gt;
 ''' Loop through all the command-line arguments of this application.
 ''' &lt;/summary&gt;
 ''' ----------------------------------------------------------------------------------------------------
 ''' &lt;param name="cmds"&gt;
 ''' The commandline parameters.
 ''' &lt;/param&gt;
 ''' 
 ''' &lt;param name="args"&gt;
 ''' The collection of commandline arguments to examine.
 ''' &lt;/param&gt;
 ''' 
 ''' &lt;param name="callbackSyntaxError"&gt;
 ''' An encapsulated method that is invoked if a syntax error is found in one of the arguments.
 ''' &lt;/param&gt;
 ''' 
 ''' &lt;param name="callbackMissingRequired"&gt;
 ''' An encapsulated method that is invoked if a required parameter is missing in the arguments.
 ''' &lt;/param&gt;
 ''' ----------------------------------------------------------------------------------------------------
 Friend Sub ParseArguments(ByVal cmds As CommandlineParameterCollection,
                           ByVal args As IEnumerable(Of String),
                           ByVal callbackSyntaxError As Action(Of CommandlineParameter),
                           ByVal callbackMissingRequired As Action(Of CommandlineParameter))

     If Not (args.Any) Then
         PrintHelp()
     End If

     Dim cmdRequired As List(Of CommandlineParameter) =
         (From cmd As CommandlineParameter In cmds
          Where Not cmd.IsOptional).ToList

     For Each arg As String In args

         For Each cmd As CommandlineParameter In cmds

             If (arg.StartsWith(cmd.Name &amp; cmd.Separator, StringComparison.OrdinalIgnoreCase)) OrElse
                (arg.StartsWith(cmd.ShortName &amp; cmd.Separator, StringComparison.OrdinalIgnoreCase)) Then

                 Dim value As String = arg.Substring(arg.IndexOf(cmd.Separator) + 1)

                 If (cmdRequired.Contains(cmd)) Then
                     cmdRequired.Remove(cmd)
                 End If

                 If String.IsNullOrEmpty(value) Then
                     cmd.Value = cmd.DefaultValue
                     Continue For

                 Else
                     Try
                         cmd.Value = Convert.ChangeType(value, cmd.DefaultValue.GetType())
                         Continue For

                     Catch ex As Exception
                         callbackSyntaxError.Invoke(cmd)
                         Exit Sub

                     End Try

                 End If

             ElseIf arg.Equals("/?") Then
                 PrintHelp()

             End If

         Next cmd

     Next arg

     If (cmdRequired.Any) Then
         callbackMissingRequired.Invoke(cmdRequired.First)
     End If

 End Sub

 Friend Sub OnSyntaxError(ByVal cmd As CommandlineParameter)

     Console.WriteLine(String.Format("[X] Syntax error in parameter: {0} (or {1})", cmd.Name, cmd.ShortName))
     Environment.Exit(exitCode:=1)

 End Sub

 Friend Sub OnMissingParameterRequired(ByVal cmd As CommandlineParameter)

     Console.WriteLine(String.Format("[X] Parameter {0} (or {1}) is required. ", cmd.Name, cmd.ShortName))
     Environment.Exit(exitCode:=1)

 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.CommandlineParameter.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Types.CommandlineParameter"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Types.CommandlineParameter`1">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents a Commandline Parameter.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public ReadOnly Param1 As New CommandlineParameter(Of String) With {
     .Name = "/Name1",
     .ShortName = "/n1",
     .Separator = "="c,
     .DefaultValue = "",
     .IsOptional = False
 }

 Public ReadOnly Param2 As New CommandlineParameter(Of Boolean) With {
     .Name = "/Name2",
     .ShortName = "/n2",
     .Separator = "="c,
     .DefaultValue = True,
     .IsOptional = False
 }

 Sub Main()

     Dim args As New CommandlineParameterCollection
     With args
         .Add(Param1)
         .Add(Param2)
     End With

     ParseArguments(args, AddressOf OnSyntaxError, AddressOf OnMissingParameterRequired)
     
     MsgBox(CStr(args("/Name1").Value))
     MsgBox(CBool(args("/Name2").Value))
     ' ...

 End Sub

 ''' ----------------------------------------------------------------------------------------------------
 ''' &lt;summary&gt;
 ''' Loop through all the command-line arguments of this application.
 ''' &lt;/summary&gt;
 ''' ----------------------------------------------------------------------------------------------------
 ''' &lt;param name="cmds"&gt;
 ''' The commandline parameters.
 ''' &lt;/param>
 ''' 
 ''' &lt;param name="callbackSyntaxError"&gt;
 ''' An encapsulated method that is invoked if a syntax error is found in one of the arguments.
 ''' &lt;/param&gt;
 ''' 
 ''' &lt;param name="callbackMissingRequired"&gt;
 ''' An encapsulated method that is invoked if a required parameter is missing in the arguments.
 ''' &lt;/param&gt;
 ''' ----------------------------------------------------------------------------------------------------
 Friend Sub ParseArguments(ByVal cmds As CommandlineParameterCollection,
                           ByVal callbackSyntaxError As Action(Of CommandlineParameter),
                           ByVal callbackMissingRequired As Action(Of CommandlineParameter))

     ParseArguments(cmds, Environment.GetCommandLineArgs.Skip(1), callbackSyntaxError, callbackMissingRequired)

 End Sub

 ''' ----------------------------------------------------------------------------------------------------
 ''' &lt;summary&gt;
 ''' Loop through all the command-line arguments of this application.
 ''' &lt;/summary&gt;
 ''' ----------------------------------------------------------------------------------------------------
 ''' &lt;param name="cmds"&gt;
 ''' The commandline parameters.
 ''' &lt;/param&gt;
 ''' 
 ''' &lt;param name="args"&gt;
 ''' The collection of commandline arguments to examine.
 ''' &lt;/param&gt;
 ''' 
 ''' &lt;param name="callbackSyntaxError"&gt;
 ''' An encapsulated method that is invoked if a syntax error is found in one of the arguments.
 ''' &lt;/param&gt;
 ''' 
 ''' &lt;param name="callbackMissingRequired"&gt;
 ''' An encapsulated method that is invoked if a required parameter is missing in the arguments.
 ''' &lt;/param&gt;
 ''' ----------------------------------------------------------------------------------------------------
 Friend Sub ParseArguments(ByVal cmds As CommandlineParameterCollection,
                           ByVal args As IEnumerable(Of String),
                           ByVal callbackSyntaxError As Action(Of CommandlineParameter),
                           ByVal callbackMissingRequired As Action(Of CommandlineParameter))

     If Not (args.Any) Then
         PrintHelp()
     End If

     Dim cmdRequired As List(Of CommandlineParameter) =
         (From cmd As CommandlineParameter In cmds
          Where Not cmd.IsOptional).ToList

     For Each arg As String In args

         For Each cmd As CommandlineParameter In cmds

             If (arg.StartsWith(cmd.Name &amp; cmd.Separator, StringComparison.OrdinalIgnoreCase)) OrElse
                (arg.StartsWith(cmd.ShortName &amp; cmd.Separator, StringComparison.OrdinalIgnoreCase)) Then

                 Dim value As String = arg.Substring(arg.IndexOf(cmd.Separator) + 1)

                 If (cmdRequired.Contains(cmd)) Then
                     cmdRequired.Remove(cmd)
                 End If

                 If String.IsNullOrEmpty(value) Then
                     cmd.Value = cmd.DefaultValue
                     Continue For

                 Else
                     Try
                         cmd.Value = Convert.ChangeType(value, cmd.DefaultValue.GetType())
                         Continue For

                     Catch ex As Exception
                         callbackSyntaxError.Invoke(cmd)
                         Exit Sub

                     End Try

                 End If

             ElseIf arg.Equals("/?") Then
                 PrintHelp()

             End If

         Next cmd

     Next arg

     If (cmdRequired.Any) Then
         callbackMissingRequired.Invoke(cmdRequired.First)
     End If

 End Sub

 Friend Sub OnSyntaxError(ByVal cmd As CommandlineParameter)

     Console.WriteLine(String.Format("[X] Syntax error in parameter: {0} (or {1})", cmd.Name, cmd.ShortName))
     Environment.Exit(exitCode:=1)

 End Sub

 Friend Sub OnMissingParameterRequired(ByVal cmd As CommandlineParameter)

     Console.WriteLine(String.Format("[X] Parameter {0} (or {1}) is required. ", cmd.Name, cmd.ShortName))
     Environment.Exit(exitCode:=1)

 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of value that the parameter takes.
 </typeparam>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Types.CommandlineParameter`1.IsOptional">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether this parameter is required for the application.
 <para></para>
 A value of <see langword="False"/> means the user needs to assign a value for this parameter.
 <para></para>
 A value of <see langword="True"/> means this is an optional parameter so no matter if the user sets a custom value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="False"/> if this parameter is required for the application; otherwise, <see langword="True"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Types.CommandlineParameter`1.Name">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the parameter name.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The parameter name.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Types.CommandlineParameter`1.nameB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The parameter name.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Types.CommandlineParameter`1.ShortName">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the parameter shortname.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The parameter shortname.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Types.CommandlineParameter`1.shortNameB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The parameter shortname.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Types.CommandlineParameter`1.Separator">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the parameter separator.
 <para></para>
 This character separates the parameter from the value in the argument.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The parameter separator.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Types.CommandlineParameter`1.separatorB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The parameter separator.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Types.CommandlineParameter`1.Value">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the parameter value.
 <para></para>
 This value should be initially <see langword="Nothing"/> before parsing the commandline arguments of the application;
 <para></para>
 the value of the parameter should be assigned by the end-user when passing an argument to the application.
 <para></para>
 To set a default value for this parameter, use <see cref="P:Elektro.Application.Types.CommandlineParameter`1.DefaultValue"/> property instead.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The parameter value.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Types.CommandlineParameter`1.DefaultValue">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the default parameter value.
 <para></para>
 This value should be take into account if, after parsing the commandline arguments of the application,
 <see cref="P:Elektro.Application.Types.CommandlineParameter`1.Value"/> is <see langword="Nothing"/>,
 meaning that the end-user didn't assigned any custom value to this parameter.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The default parameter value.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.CommandlineParameter`1.op_Implicit(Elektro.Application.Types.CommandlineParameter{`0})~Elektro.Application.Types.CommandlineParameter">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs an implicit conversion from <see cref="T:Elektro.Application.Types.CommandlineParameter`1"/> to <see cref="T:Elektro.Application.Types.CommandlineParameter"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="cmd">
 The <see cref="T:Elektro.Application.Types.CommandlineParameter`1"/> to convert.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The result of the conversion.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.CommandlineParameter`1.EvaluateName(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Evaluates an attempt to assign the parameter name.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="name">
 The parameter name.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 The parameter name cannot contain the separator character.;name
 </exception>
 
 <exception cref="T:System.ArgumentException">
 The parameter name cannot be equals than the parameter shortname.;name
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.CommandlineParameter`1.EvaluateShortName(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Evaluates an attempt to assign the parameter shortname.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="shortName">
 The parameter shortname.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 The parameter name cannot contain the separator character.;shortname
 </exception>
 
 <exception cref="T:System.ArgumentException">
 The parameter shortname cannot be equals than the parameter name.;shortname
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.CommandlineParameter`1.EvaluateSeparator(System.Char)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Evaluates an attempt to assign the parameter separator.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="separator">
 The parameter separator.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 The parameter separator cannot be any character contained in the parameter name.;separator
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.CommandlineParameter`1.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Types.CommandlineParameter`1"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Types.EventArgs.HotkeyPressEventArgs">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains the event-data of a <see cref="E:Elektro.Application.Types.Hotkey.Press"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Types.EventArgs.HotkeyPressEventArgs.Key">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the key assigned to the hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The key assigned to the hotkey.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Types.EventArgs.HotkeyPressEventArgs.keyB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The key assigned to the hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Types.EventArgs.HotkeyPressEventArgs.Modifiers">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the key-modifiers assigned to the hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The key-modifiers assigned to the hotkey.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Types.EventArgs.HotkeyPressEventArgs.modifiersB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The key-modifiers assigned to the hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Types.EventArgs.HotkeyPressEventArgs.Id">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the unique identifier assigned to the hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The unique identifier assigned to the hotkey.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Types.EventArgs.HotkeyPressEventArgs.idB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The unique identifier assigned to the hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.EventArgs.HotkeyPressEventArgs.#ctor(System.Windows.Forms.Keys,Elektro.Core.IO.Enums.HotkeyModifiers,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Types.EventArgs.HotkeyPressEventArgs"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="key">
 The key assigned to the hotkey.
 </param>
 
 <param name="modifiers">
 The key-modifiers assigned to the hotkey.
 </param>
 
 <param name="id">
 The unique identifier assigned to the hotkey.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.EventArgs.HotkeyPressEventArgs.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.Types.EventArgs.HotkeyPressEventArgs"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Types.Exceptions.HotkeyIsNotRegisteredException">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Exception that is thrown when try to unregister a system-wide hotkey that is not registered.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.Exceptions.HotkeyIsNotRegisteredException.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Types.Exceptions.HotkeyIsNotRegisteredException"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.Exceptions.HotkeyIsNotRegisteredException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="info">
 The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.
 </param>
 
 <param name="context">
 The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 info
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.Exceptions.HotkeyIsNotRegisteredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Types.Exceptions.HotkeyIsNotRegisteredException"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 This constructor is used to deserialize values.
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="info">
 The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.
 </param>
 
 <param name="context">
 The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this deserialization.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 info
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Types.Exceptions.HotkeyIsRegisteredException">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Exception that is thrown when try to register a system-wide hotkey that is already registered.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.Exceptions.HotkeyIsRegisteredException.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Types.Exceptions.HotkeyIsRegisteredException"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.Exceptions.HotkeyIsRegisteredException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="info">
 The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.
 </param>
 
 <param name="context">
 The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 info
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.Exceptions.HotkeyIsRegisteredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Types.Exceptions.HotkeyIsRegisteredException"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 This constructor is used to deserialize values.
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="info">
 The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.
 </param>
 
 <param name="context">
 The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this deserialization.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 info
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Types.Hotkey">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates a system-wide hotkey for the current application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public Class Form1 : Inherits Form
 
     Private WithEvents hotkey As Hotkey
 
     Public Sub Test() Handles MyBase.Shown
 
         MyClass.InitializeComponent()
 
         ' Registers a new global hotkey on the system. (Alt + Ctrl + A) 
         hotkey = New Hotkey(HotkeyModifiers.Alt Or HotkeyModifiers.Control, Keys.A)
 
         ' Replaces the current registered hotkey with a new one. (Alt + Escape)
         hotkey = New Hotkey(DirectCast([Enum].Parse(GetType(HotkeyModifiers), "Alt", True), HotkeyModifiers),
                             DirectCast([Enum].Parse(GetType(Keys), "Escape", True), Keys))
 
         ' Set the tag property.
         hotkey.Tag = "I'm a String tag"
 
     End Sub
 
     ''' ----------------------------------------------------------------------------------------------------
     ''' &lt;summary&gt;
     ''' Handles the &lt;see cref="HotKey.Press"/&gt; event of the HotKey control.
     ''' &lt;/summary&gt;
     ''' ----------------------------------------------------------------------------------------------------
     ''' &lt;param name="sender"&gt;
     ''' The source of the event.
     ''' &lt;/param&gt;
     ''' 
     ''' &lt;param name="e"&gt;
     ''' The &lt;see cref="HotkeyPressEventArgs"/&gt; instance containing the event data.
     ''' &lt;/param&gt;
     ''' ----------------------------------------------------------------------------------------------------
     Private Sub HotKey_Press(ByVal sender As Object, ByVal e As HotkeyPressEventArgs) _
     Handles hotkey.Press
 
         Dim sb As New StringBuilder
         With sb
             .AppendLine(String.Format("Key.......: {0}", e.Key.ToString))
             .AppendLine(String.Format("Modifiers.: {0}", e.Modifiers.ToString))
             .AppendLine(String.Format("Identifier: {0}", e.Id))
             .AppendLine(String.Format("Press-count: {0}", DirectCast(sender, Hotkey).Count))
             .AppendLine(String.Format("Tag: {0}", DirectCast(sender, Hotkey).Tag.ToString))
         End With
 
         MessageBox.Show(sb.ToString, String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
 
         ' Unregister the hotkey.
         Me.hotkey.Unregister()
 
         ' Is Registered?
         Debug.WriteLine(Me.hotkey.IsRegistered)
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Types.Hotkey.Handle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the handle for the window that owns this <see cref="T:Elektro.Application.Types.Hotkey"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The handle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Types.Hotkey.Key">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the key assigned to the hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The key assigned to the hotkey.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Types.Hotkey.keyB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The key assigned to the hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Types.Hotkey.Modifier">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the key-modifiers assigned to the hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The key-modifiers assigned to the hotkey.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Types.Hotkey.modifierB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The key-modifier assigned to the hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Types.Hotkey.Id">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the unique identifier assigned to the hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The unique identifier assigned to the hotkey.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Types.Hotkey.idB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The unique identifier assigned to the hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Types.Hotkey.Tag">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets an user-defined data associated with this object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The user-defined data associated with this object.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.Types.Hotkey.Count">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that specifies how many times was pressed the registered hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 A value that specifies how many times was pressed the registered hotkey.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Types.Hotkey.countB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value that specifies how many times was pressed the registered hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Types.Hotkey.events">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A list of event delegates.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Application.Types.Hotkey.Press">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when the hotkey is pressed.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.Hotkey.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.Types.Hotkey"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.Hotkey.#ctor(Elektro.Core.IO.Enums.HotkeyModifiers,System.Windows.Forms.Keys)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Types.Hotkey"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="modifier">
 One or more key-modifiers to assign to the hotkey.
 </param>
 
 <param name="key">
 The key to assign to the hotkey.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:Elektro.Application.Types.Exceptions.HotkeyIsRegisteredException">
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.Hotkey.IsRegistered">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether this hotkey is registered on the system.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if this hotkey is registered; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.Hotkey.Register">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Registers this hotkey on the system.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:Elektro.Application.Types.Exceptions.HotkeyIsRegisteredException">
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.Hotkey.Unregister(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Unregisters this hotkey from the system. So after calling this method the hotkey turns unavailable.
 <para></para>
 Note that the hotkey can be re-registered at any time calling the <see cref="M:Elektro.Application.Types.Hotkey.Register"/> method.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="resetCounter">
 If set to <see langword="True"/>, resets the <see cref="P:Elektro.Application.Types.Hotkey.Count"/> property 
 that keeps track of the amount of times that the hotkey was pressed.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:Elektro.Application.Types.Exceptions.HotkeyIsNotRegisteredException">
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.Hotkey.OnHotkeyPress(Elektro.Application.Types.EventArgs.HotkeyPressEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Raises <see cref="E:Elektro.Application.Types.Hotkey.Press"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:Elektro.Application.Types.EventArgs.HotkeyPressEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.Hotkey.WndProc(System.Windows.Forms.Message@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Invokes the default window procedure associated with this window to process windows messages.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="m">
 A <see cref="T:System.Windows.Forms.Message"/> that is associated with the current Windows message.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.Types.Hotkey.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.Hotkey.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.Hotkey.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Types.DateComparer">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs a comparison between two <see cref="T:System.DateTime"/> instances.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.DateComparer.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Types.DateComparer"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.DateComparer.Compare(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="a">
 The first object to compare.
 </param>
 
 <param name="b">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A signed integer that indicates the relative values of <paramref name="a"/> and <paramref name="b"/>.
 <para></para>
 0: <paramref name="a"/> equals <paramref name="b"/>. 
 <para></para>
 Less than 0: <paramref name="a"/> is less than <paramref name="b"/>. 
 <para></para>
 Greater than 0: <paramref name="a"/> is greater than <paramref name="b"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Types.NumericComparer">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs a comparison between two numeric values.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.NumericComparer.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Types.NumericComparer"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.NumericComparer.Compare(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="a">
 The first object to compare.
 </param>
 
 <param name="b">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A signed integer that indicates the relative values of <paramref name="a"/> and <paramref name="b"/>.
 <para></para>
 0: <paramref name="a"/> equals <paramref name="b"/>. 
 <para></para>
 Less than 0: <paramref name="a" /> is less than <paramref name="b"/>. 
 <para></para>
 Greater than 0: <paramref name="a"/> is greater than <paramref name="b"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.Types.TextComparer">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs a comparison between two string values.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.TextComparer.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.Types.TextComparer"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.TextComparer.Compare(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="a">
 The first object to compare.
 </param>
 
 <param name="b">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A signed integer that indicates the relative values of <paramref name="a"/> and <paramref name="b"/>.
 <para></para>
 0: <paramref name="a"/> equals <paramref name="b"/>. 
 <para></para>
 Less than 0: <paramref name="a"/> is less than <paramref name="b"/>. 
 <para></para>
 Greater than 0: <paramref name="a"/> is greater than <paramref name="b"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.TextComparer.GetHashCode">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Serves as a hash function for a particular type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.TextComparer.GetType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the <see cref="T:System.Type"/> of the current instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The exact runtime type of the current instance.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.TextComparer.Equals(System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="obj">
 Another object to compare to.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified <see cref="T:System.Object"/> is equal to this instance; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.TextComparer.Equals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are considered equal.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the objects are considered equal; otherwise, <see langword="False"/>.
 <para></para>
 If both <paramref name="objA"/> and <paramref name="objB"/> are <see langword="Nothing"/>, 
 the method returns <see langword="True"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.TextComparer.ReferenceEquals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are the same instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if <paramref name="objA"/> is the same instance as <paramref name="objB"/> 
 or if both are <see langword="Nothing"/>; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.Types.TextComparer.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a String that represents the current object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A string that represents the current object.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Enums.ControlHintType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a type of control-hint.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Enums.ControlHintType.Normal">
 <summary>
 The hint is removed when the Control gets focus.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.ControlHintType.Persistent">
 <summary>
 The hint isn't removed when the Control gets focus.
 </summary>
</member>
<member name="T:Elektro.Application.UI.Enums.FadingEffect">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a fading effect of a window.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Enums.FadingEffect.FadeIN">
 <summary>
 Fade the window from outside to inside.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.FadingEffect.FadeOut">
 <summary>
 Fade the window from inside to outside.
 </summary>
</member>
<member name="T:Elektro.Application.UI.Enums.ListBoxItemSelectionState">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies whether a <see cref="T:System.Windows.Forms.ListBox"/> item is selected or unselected.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Enums.ListBoxItemSelectionState.Select">
 <summary>
 Item is selected.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.ListBoxItemSelectionState.Unselect">
 <summary>
 Item is unselected.
 </summary>
</member>
<member name="T:Elektro.Application.UI.Enums.RowMoveDirection">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a direction for a row move operation of a collection of rows or items,
 <para></para>
 like <see cref="T:System.Windows.Forms.DataGridViewRowCollection"/> or 
 <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection"/>. 
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Enums.RowMoveDirection.Up">
 <summary>
 Move row up.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.RowMoveDirection.Down">
 <summary>
 Move row down.
 </summary>
</member>
<member name="T:Elektro.Application.UI.Enums.ScreenDockingPosition">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a screen-docking position.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Enums.ScreenDockingPosition.CenterScreen">
 <summary>
 The center of the screen.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.ScreenDockingPosition.BoundsBottomLeft">
 <summary>
 The bottom-left corner of the bounds of the screen.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.ScreenDockingPosition.BoundsBottomRight">
 <summary>
 The bottom-right corner of the bounds of the screen.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.ScreenDockingPosition.BoundsTopLeft">
 <summary>
 The top-left corner of the bounds of the screen.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.ScreenDockingPosition.BoundsTopRight">
 <summary>
 The top-right corner of the bounds of the screen.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.ScreenDockingPosition.WorkingAreaBottomLeft">
 <summary>
 The bottom-left corner of the working area of the screen.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.ScreenDockingPosition.WorkingAreaBottomRight">
 <summary>
 The bottom-right corner of the working area of the screen.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.ScreenDockingPosition.WorkingAreaTopLeft">
 <summary>
 The top-left corner of the working area of the screen.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.ScreenDockingPosition.WorkingAreaTopRight">
 <summary>
 The top-right corner of the working area of the screen.
 </summary>
</member>
<member name="T:Elektro.Application.UI.Enums.SortModifiers">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a Sorting Modifier.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Enums.SortModifiers.SortByText">
 <summary>
 Treats the values ​​as text.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.SortModifiers.SortByNumber">
 <summary>
 Treats the values ​​as numbers.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.SortModifiers.SortByDate">
 <summary>
 Treats valuesthe values ​​as dates.
 </summary>
</member>
<member name="T:Elektro.Application.UI.Enums.UndoRedoCheckBoxEvents">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a Undo/Redo event for a <see cref="T:System.Windows.Forms.CheckBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoCheckBoxEvents.None">
 <summary>
 Any event.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoCheckBoxEvents.CheckedChanged">
 <summary>
 <see cref="E:System.Windows.Forms.CheckBox.CheckedChanged"/> event.
 </summary>
</member>
<member name="T:Elektro.Application.UI.Enums.UndoRedoComboBoxEvents">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a Undo/Redo event for a <see cref="T:System.Windows.Forms.ComboBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoComboBoxEvents.None">
 <summary>
 Any event.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoComboBoxEvents.SelectedIndexChanged">
 <summary>
 <see cref="E:System.Windows.Forms.ComboBox.SelectedIndexChanged"/> event.
 </summary>
</member>
<member name="T:Elektro.Application.UI.Enums.UndoRedoCommand">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a Undo/Redo command type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoCommand.Undo">
 <summary>
 Undo command.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoCommand.Redo">
 <summary>
 Redo command.
 </summary>
</member>
<member name="T:Elektro.Application.UI.Enums.UndoRedoDateTimePickerEvents">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a Undo/Redo event for a <see cref="T:System.Windows.Forms.DateTimePicker"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoDateTimePickerEvents.None">
 <summary>
 Any event.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoDateTimePickerEvents.ValueChanged">
 <summary>
 <see cref="E:System.Windows.Forms.DateTimePicker.ValueChanged"/> event.
 </summary>
</member>
<member name="T:Elektro.Application.UI.Enums.UndoRedoListBoxEvents">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a Undo/Redo event for a <see cref="T:System.Windows.Forms.ListBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoListBoxEvents.None">
 <summary>
 Any event.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoListBoxEvents.SelectedIndexChanged">
 <summary>
 <see cref="E:System.Windows.Forms.ListBox.SelectedIndexChanged"/> event.
 </summary>
</member>
<member name="T:Elektro.Application.UI.Enums.UndoRedoListViewEvents">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a Undo/Redo event for a <see cref="T:System.Windows.Forms.ListView"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoListViewEvents.None">
 <summary>
 Any event.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoListViewEvents.ItemChecked">
 <summary>
 <see cref="E:System.Windows.Forms.ListView.ItemChecked"/> event.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoListViewEvents.SelectedIndexChanged">
 <summary>
 <see cref="E:System.Windows.Forms.ListView.SelectedIndexChanged"/> event.
 </summary>
</member>
<member name="T:Elektro.Application.UI.Enums.UndoRedoMaskedTextBoxEvents">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a Undo/Redo event for a <see cref="T:System.Windows.Forms.MaskedTextBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoMaskedTextBoxEvents.None">
 <summary>
 Any event.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoMaskedTextBoxEvents.TextChanged">
 <summary>
 <see cref="E:System.Windows.Forms.Control.TextChanged"/> event.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoMaskedTextBoxEvents.FontChanged">
 <summary>
 <see cref="E:System.Windows.Forms.Control.FontChanged"/> event.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoMaskedTextBoxEvents.BackColorChanged">
 <summary>
 <see cref="E:System.Windows.Forms.Control.BackColorChanged"/> event.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoMaskedTextBoxEvents.ForeColorChanged">
 <summary>
 <see cref="E:System.Windows.Forms.Control.ForeColorChanged"/> event.
 </summary>
</member>
<member name="T:Elektro.Application.UI.Enums.UndoRedoMonthCalendarEvents">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a Undo/Redo event for a <see cref="T:System.Windows.Forms.MonthCalendar"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoMonthCalendarEvents.None">
 <summary>
 Any event.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoMonthCalendarEvents.DateSelected">
 <summary>
 <see cref="E:System.Windows.Forms.MonthCalendar.DateSelected"/> event.
 </summary>
</member>
<member name="T:Elektro.Application.UI.Enums.UndoRedoNumericUpDownEvents">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a Undo/Redo event for a <see cref="T:System.Windows.Forms.NumericUpDown"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoNumericUpDownEvents.None">
 <summary>
 Any event.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoNumericUpDownEvents.ValueChanged">
 <summary>
 <see cref="E:System.Windows.Forms.NumericUpDown.ValueChanged"/> event.
 </summary>
</member>
<member name="T:Elektro.Application.UI.Enums.UndoRedoRichTextBoxEvents">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a Undo/Redo event for a <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoRichTextBoxEvents.None">
 <summary>
 Any event.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoRichTextBoxEvents.TextChanged">
 <summary>
 <see cref="E:System.Windows.Forms.Control.TextChanged"/> event.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoRichTextBoxEvents.FontChanged">
 <summary>
 <see cref="E:System.Windows.Forms.Control.FontChanged"/> event.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoRichTextBoxEvents.BackColorChanged">
 <summary>
 <see cref="E:System.Windows.Forms.Control.BackColorChanged"/> event.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoRichTextBoxEvents.ForeColorChanged">
 <summary>
 <see cref="E:System.Windows.Forms.Control.ForeColorChanged"/> event.
 </summary>
</member>
<member name="T:Elektro.Application.UI.Enums.UndoRedoTextBoxEvents">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a Undo/Redo event for a <see cref="T:System.Windows.Forms.TextBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoTextBoxEvents.None">
 <summary>
 Any event.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoTextBoxEvents.TextChanged">
 <summary>
 <see cref="E:System.Windows.Forms.Control.TextChanged"/> event.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoTextBoxEvents.FontChanged">
 <summary>
 <see cref="E:System.Windows.Forms.Control.FontChanged"/> event.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoTextBoxEvents.BackColorChanged">
 <summary>
 <see cref="E:System.Windows.Forms.Control.BackColorChanged"/> event.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoTextBoxEvents.ForeColorChanged">
 <summary>
 <see cref="E:System.Windows.Forms.Control.ForeColorChanged"/> event.
 </summary>
</member>
<member name="T:Elektro.Application.UI.Enums.UndoRedoTextUpdateBehavior">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a Undo/Redo text-update behavior for an edit-control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoTextUpdateBehavior.OnTextChanged">
 <summary>
 Updates the text for undo/redo every time that the text changes,
 for example, when a single character is added or removed.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.UndoRedoTextUpdateBehavior.OnLeave">
 <summary>
 Updates the text for undo/redo only when leaving the control focus.
 </summary>
</member>
<member name="T:Elektro.Application.UI.Enums.WindowAnimation">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a window animation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms632669%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Enums.WindowAnimation.ShowLeftToRight">
 <summary>
 Show and animates the window from left to right.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowAnimation.ShowRightToLeft">
 <summary>
 Show and animates the window from right to left.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowAnimation.ShowTopToBottom">
 <summary>
 Show and animates the window from top to bottom.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowAnimation.ShowBottomToTop">
 <summary>
 Show and animates the window from bottom to top.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowAnimation.ShowCornerLeftUp">
 <summary>
 Show and animates the window from upper left corner to bottom right corner.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowAnimation.ShowCornerLeftDown">
 <summary>
 Show and animates the window from bottom left corner to upper right corner.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowAnimation.ShowCornerRightUp">
 <summary>
 Show and animates the window from upper right corner bottom left corner.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowAnimation.ShowCornerRightDown">
 <summary>
 Show and animates the window from bottom right corner to upper left corner.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowAnimation.ShowCenter">
 <summary>
 Makes the window appear to expand outward. 
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowAnimation.ShowFade">
 <summary>
 Show the window using a fade effect. 
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowAnimation.HideLeftToRight">
 <summary>
 Hide and animates the window from left to right.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowAnimation.HideRightToLeft">
 <summary>
 Hide and animates the window from right to left.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowAnimation.HideTopToBottom">
 <summary>
 Hide and animates the window from top to bottom.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowAnimation.HideBottomToTop">
 <summary>
 Hide and animates the window from bottom to top.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowAnimation.HideCornerLeftUp">
 <summary>
 Hide and animates the window from upper left corner to bottom right corner.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowAnimation.HideCornerLeftDown">
 <summary>
 Hide and animates the window from bottom left corner to upper right corner.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowAnimation.HideCornerRightUp">
 <summary>
 Hide and animates the window from upper right corner bottom left corner.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowAnimation.HideCornerRightDown">
 <summary>
 Hide and animates the window from bottom right corner to upper left corner.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowAnimation.HideCenter">
 <summary>
 Makes the window disappear collapsing inward.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowAnimation.HideFade">
 <summary>
 Hides the window using a fade effect. 
 </summary>
</member>
<member name="T:Elektro.Application.UI.Enums.WindowDockingPosition">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a window-docking position.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Enums.WindowDockingPosition.Top">
 <summary>
 The source window's bottom edge is docked to the target window's top edge.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowDockingPosition.Bottom">
 <summary>
 The source window's top edge is docked to the target window's bottom edge.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowDockingPosition.Left">
 <summary>
 The source window's right edge is docked to the target window's left edge.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowDockingPosition.Right">
 <summary>
 The source window's left edge is docked to the target window's right edge.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowDockingPosition.TopLeft">
 <summary>
 The source window's bottom edge is docked to the target window's top-left edge.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowDockingPosition.TopRight">
 <summary>
 The source window's bottom edge is docked to the target window's top-right edge.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowDockingPosition.BottomLeft">
 <summary>
 The source window's top edge is docked to the target window's bottom-left edge.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowDockingPosition.BottomRight">
 <summary>
 The source window's top edge is docked to the target window's bottom-right edge.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowDockingPosition.LeftUp">
 <summary>
 The source window's right edge is docked to the target window's left-up edge.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowDockingPosition.LeftDown">
 <summary>
 The source window's right edge is docked to the target window's left-down edge.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowDockingPosition.RightUp">
 <summary>
 The source window's left edge is docked to the target window's right-up edge.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowDockingPosition.RightDown">
 <summary>
 The source window's left edge is docked to the target window's right-down edge.
 </summary>
</member>
<member name="T:Elektro.Application.UI.Enums.WindowEdges">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specified a window edge.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Enums.WindowEdges.None">
 <summary>
 Any edge.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowEdges.Left">
 <summary>
 Left edge.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowEdges.Right">
 <summary>
 Right edge.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowEdges.Top">
 <summary>
 Top edge.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowEdges.Bottom">
 <summary>
 Bottom edge.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowEdges.TopLeft">
 <summary>
 Top-Left edge.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowEdges.TopRight">
 <summary>
 Top-Right edge.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowEdges.BottomLeft">
 <summary>
 Bottom-Left edge.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Enums.WindowEdges.BottomRight">
 <summary>
 Bottom-Right edge.
 </summary>
</member>
<member name="T:Elektro.Application.UI.Extensions.Control.Is">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.Control.Is.IsInDesignMode(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source <see cref="T:System.Windows.Forms.Control"/> is in design mode.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the source <see cref="T:System.Windows.Forms.Control"/> is in design mode;
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.Control.Is.IsInRuntimeMode(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source <see cref="T:System.Windows.Forms.Control"/> is in runtime mode.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the source <see cref="T:System.Windows.Forms.Control"/> is in runtime mode;
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.DataGridView.ColumnVisibility">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.DataGridView"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.DataGridView.ColumnVisibility.HideAllColumns(System.Windows.Forms.DataGridView)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Hides all the columns of the <see cref="T:System.Windows.Forms.DataGridView"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.DataGridView"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.DataGridView.ColumnVisibility.HideAllColumns(System.Windows.Forms.DataGridView,System.String[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Hides all the columns of the <see cref="T:System.Windows.Forms.DataGridView"/>, except the specified columns.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.DataGridView"/>.
 </param>
 
 <param name="excludeColumnNames">
 The names of the columns to exclude.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.DataGridView.ColumnVisibility.HideAllColumns(System.Windows.Forms.DataGridView,System.Int32[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Hides all the columns of the <see cref="T:System.Windows.Forms.DataGridView"/>, except the specified columns.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.DataGridView"/>.
 </param>
 
 <param name="excludeColumnIndices">
 The indices of the columns to exclude.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.DataGridView.ColumnVisibility.HideColumns(System.Windows.Forms.DataGridView,System.String[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Hides the specified columns of the <see cref="T:System.Windows.Forms.DataGridView"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.DataGridView"/>.
 </param>
 
 <param name="columnNames">
 The names of the columns to hide.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.DataGridView.ColumnVisibility.HideColumns(System.Windows.Forms.DataGridView,System.Int32[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Hides the specified columns of the <see cref="T:System.Windows.Forms.DataGridView"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.DataGridView"/>.
 </param>
 
 <param name="columnIndices">
 The indices of the columns to hide.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.DataGridView.ColumnVisibility.ShowAllColumns(System.Windows.Forms.DataGridView)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Shows all the columns of the <see cref="T:System.Windows.Forms.DataGridView"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.DataGridView"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.DataGridView.ColumnVisibility.ShowAllColumns(System.Windows.Forms.DataGridView,System.String[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Shows all the columns of the <see cref="T:System.Windows.Forms.DataGridView"/>, except the specified columns.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.DataGridView"/>.
 </param>
 
 <param name="excludeColumnNames">
 The names of the columns to exclude.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.DataGridView.ColumnVisibility.ShowAllColumns(System.Windows.Forms.DataGridView,System.Int32[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Shows all the columns of the <see cref="T:System.Windows.Forms.DataGridView"/>, except the specified columns.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.DataGridView"/>.
 </param>
 
 <param name="excludeColumnIndices">
 The indices of the columns to exclude.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.DataGridView.ColumnVisibility.ShowColumns(System.Windows.Forms.DataGridView,System.String[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Shows the specified columns of the <see cref="T:System.Windows.Forms.DataGridView"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.DataGridView"/>.
 </param>
 
 <param name="columnNames">
 The names of the columns to show.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.DataGridView.ColumnVisibility.ShowColumns(System.Windows.Forms.DataGridView,System.Int32[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Shows the specified columns of the <see cref="T:System.Windows.Forms.DataGridView"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.DataGridView"/>.
 </param>
 
 <param name="columnIndices">
 The indices of the columns to show.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.DataGridView.Move">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.DataGridView"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.DataGridView.Move.MoveSelectedRows(System.Windows.Forms.DataGridView,Elektro.Application.UI.Enums.RowMoveDirection)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Moves up or down the selected rows of the <see cref="T:System.Windows.Forms.DataGridView"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.DataGridView"/>.
 </param>
 
 <param name="direction">
 The row-move direction.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.DataGridView.Move.MoveSelectedRows(System.Windows.Forms.DataGridView,Elektro.Application.UI.Enums.RowMoveDirection,System.Collections.Generic.IEnumerable{System.Int32})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Moves up or down the selected rows of the <see cref="T:System.Windows.Forms.DataGridView"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.DataGridView"/>.
 </param>
 
 <param name="direction">
 The row-move direction.
 </param>
 
 <param name="preserveCellIndices">
 A sequence of cell indices to preserve their values when moving the rows.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.DataGridView.Move.DoRowsMove(System.Windows.Forms.DataGridView,Elektro.Application.UI.Enums.RowMoveDirection,System.Collections.Generic.IEnumerable{System.Int32})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Moves up or down the selected rows of the specified <see cref="T:System.Windows.Forms.DataGridView"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="dgv">
 The source <see cref="T:System.Windows.Forms.DataGridView"/>.
 </param>
 
 <param name="direction">
 The row-move direction.
 </param>
 
 <param name="preserveCellIndices">
 Optionally, a sequence of cell indices to preserve their values when moving the rows.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.DataGridView.Export">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.DataGridView"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.DataGridView.Export.ExportToCSV(System.Windows.Forms.DataGridView,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Exports the source <see cref="T:System.Windows.Forms.DataGridView"/> to <c>CSV</c> table format.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dt As New DataTable()
 With dt
     dt.Columns.Add("Name", GetType(String))
     dt.Columns.Add("Date", GetType(Date))
     dt.Rows.Add("Elektro", Date.Parse("01-01-2016"))
 End With
 
 DataGridView1.DataSource = dt
 
 Dim csv As String = DataGridView1.ExportToCSV("N/A")
 Console.WriteLine(csv)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.DataGridView"/>.
 </param>
 
 <param name="defaultValueIfEmpty">
 A default value to write in a <c>CSV</c> field 
 if the corresponding <see cref="T:System.Windows.Forms.DataGridViewCell"/> value is <see langword="Nothing"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <c>CSV</c> table string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.DataGridView.Export.ExportToXml(System.Windows.Forms.DataGridView)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Exports the source <see cref="T:System.Windows.Forms.DataGridView"/> to <c>Xml</c> format.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dgv As New DataGridView
 With dgv
     .Columns.Add(columnName:="Column1", headerText:="Column1")
     .Columns.Add(columnName:="Column2", headerText:="Column2")
     .Columns.Add(columnName:="Column3", headerText:="Column3")
 
     .Rows.Add({"Cell A1", "Cell A2"})
     .Rows.Add({"Cell B1", "Cell B2", "Cell B3"})
     .Rows.Add({"Cell C1", "Cell C2", "Cell C3"})
 End With
 
 Dim xml As String = dgv.ExportToXml()
 Console.WriteLine(xml)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.DataGridView"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <c>Xml</c> string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.DataGridView.Remove">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.DataGridView"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.DataGridView.Remove.RemoveSelectedItems(System.Windows.Forms.DataGridView)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes the selected items from <see cref="T:System.Windows.Forms.DataGridView"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.DataGridView"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.DataGridView.TypeConversion">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.DataGridView"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.DataGridView.TypeConversion.ToDataTable(System.Windows.Forms.DataGridView)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts the source <see cref="T:System.Windows.Forms.DataGridView"/> to a <see cref="T:System.Data.DataTable"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dgv As New DataGridView
 With dgv
     .Columns.Add(columnName:="Column1", headerText:="Column1")
     .Columns.Add(columnName:="Column2", headerText:="Column2")
     .Columns.Add(columnName:="Column3", headerText:="Column3")
 
     .Rows.Add({"Cell A1", "Cell A2", "Cell A3"})
     .Rows.Add({"Cell B1", "Cell B2", "Cell B3"})
     .Rows.Add({"Cell C1", "Cell C2", "Cell C3"})
 End With
 
 Dim dt As DataTable = dgv.ToDataTable()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.DataGridView"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Data.DataTable"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.DataGridView.TypeConversion.ToListView(System.Windows.Forms.DataGridView)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts the source <see cref="T:System.Windows.Forms.DataGridView"/> to a <see cref="T:System.Windows.Forms.ListView"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dgv As New DataGridView
 With dgv
     .Columns.Add(columnName:="Column1", headerText:="Column1")
     .Columns.Add(columnName:="Column2", headerText:="Column2")
     .Columns.Add(columnName:="Column3", headerText:="Column3")
 
     .Rows.Add({"Cell A1", "Cell A2", "Cell A3"})
     .Rows.Add({"Cell B1", "Cell B2", "Cell B3"})
     .Rows.Add({"Cell C1", "Cell C2", "Cell C3"})
 End With
 
 Dim lv As ListView = dgv.ToListView()
 lv.View = View.Details
 lv.Dock = DockStyle.Fill
 
 Me.Controls.Add(lv)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.DataGridView"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Windows.Forms.ListView"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.IComponent.Is">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.ComponentModel.IComponent"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.IComponent.Is.IsInDesignMode(System.ComponentModel.IComponent)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source <see cref="T:System.ComponentModel.IComponent"/> is in design mode.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.ComponentModel.IComponent"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the source <see cref="T:System.ComponentModel.IComponent"/> is in design mode;
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.IComponent.Is.IsInRuntimeMode(System.ComponentModel.IComponent)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source <see cref="T:System.ComponentModel.IComponent"/> is in runtime mode.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.ComponentModel.IComponent"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the source <see cref="T:System.ComponentModel.IComponent"/> is in runtime mode;
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.ListBox.Sorting">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.ListBox"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListBox.Sorting.Sort``1(System.Windows.Forms.ListBox)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sorts the items in the <see cref="T:System.Windows.Forms.ListBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListBox.Sorting.Sort``1(System.Windows.Forms.ListBox,System.Collections.Generic.IComparer{``0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sorts the items in the <see cref="T:System.Windows.Forms.ListBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListBox"/>.
 </param>
 
 <param name="comparer">
 A custom <see cref="T:System.Collections.Generic.IComparer`1"/> that evaluates each item to perform the sort.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.ListBox.Copying">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.ListBox"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListBox.Copying.CopyItem(System.Windows.Forms.ListBox,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies the text of the specified item in the <see cref="T:System.Windows.Forms.ListBox"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListBox"/>.
 </param>
 
 <param name="itemIndex">
 The index of the item to copy.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListBox.Copying.CopyItems(System.Windows.Forms.ListBox,System.Int32[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies the text of the specified items in the <see cref="T:System.Windows.Forms.ListBox"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListBox"/>.
 </param>
 
 <param name="indices">
 The indices of the items to copy.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListBox.Copying.CopySelectedItems(System.Windows.Forms.ListBox)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies the text of the current selected items in the <see cref="T:System.Windows.Forms.ListBox"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.ListBox.Remove">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.ListBox"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListBox.Remove.RemoveSelectedItems(System.Windows.Forms.ListBox)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes the selected items from <see cref="T:System.Windows.Forms.ListBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListBox.Remove.RemoveDuplicatedItems(System.Windows.Forms.ListBox)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes duplicated items in the <see cref="T:System.Windows.Forms.ListBox"/>.
 <para></para>
 Comparison is done by comparing the text of each item.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.ListBox.Select">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.ListBox"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListBox.Select.SetSelectedNoJump(System.Windows.Forms.ListBox,System.Int32,Elektro.Application.UI.Enums.ListBoxItemSelectionState)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Selects or unselects the specified item in <see cref="T:System.Windows.Forms.ListBox"/> without scrolling to its item position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 ListBox1.SetSelectedNoJump(10, ListBoxItemSelectionState.Select)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListBox"/>.
 </param>
 
 <param name="itemIndex">
 The index of the item.
 </param>
 
 <param name="selection">
 A value indicating whether items should be selected, or unselected.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListBox.Select.SetSelectedNoJump(System.Windows.Forms.ListBox,System.Int32[],Elektro.Application.UI.Enums.ListBoxItemSelectionState)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Selects or unselects the specified items in <see cref="T:System.Windows.Forms.ListBox"/> without scrolling to their item positions.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 ListBox1.SetSelectedNoJump({1, 3}, ListBoxItemSelectionState.Select)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListBox"/>.
 </param>
 
 <param name="indices">
 The indices of the items.
 </param>
 
 <param name="selection">
 A value indicating whether items should be selected, or unselected.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListBox.Select.SetSelectedNoJump(System.Windows.Forms.ListBox,System.String,Elektro.Application.UI.Enums.ListBoxItemSelectionState)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Selects or unselects the specified item in <see cref="T:System.Windows.Forms.ListBox"/> without scrolling to its item position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 ListBox1.SetSelectedNoJump("Item1", ListBoxItemSelectionState.Select)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListBox"/>.
 </param>
 
 <param name="itemText">
 The text of the item to select.
 </param>
 
 <param name="selection">
 A value indicating whether items should be selected, or unselected.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListBox.Select.SetSelectedNoJump(System.Windows.Forms.ListBox,System.String[],Elektro.Application.UI.Enums.ListBoxItemSelectionState)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Selects or unselects the specified items in <see cref="T:System.Windows.Forms.ListBox"/> without scrolling to their item positions.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 ListBox1.SetSelectedNoJump({"Item1", "Item3"}, ListBoxItemSelectionState.Select)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListBox"/>.
 </param>
 
 <param name="itemsText">
 The text of the items to select.
 </param>
 
 <param name="selection">
 A value indicating whether items should be selected, or unselected.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListBox.Select.SelectAllItems(System.Windows.Forms.ListBox)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Selects all the items in <see cref="T:System.Windows.Forms.ListBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 ListBox1.SelectAllItems()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListBox.Select.SelectAllItemsNoJump(System.Windows.Forms.ListBox)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Selects all the items in <see cref="T:System.Windows.Forms.ListBox"/> without scrolling to its item position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 ListBox1.SelectAllItemsNoJump()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListBox.Select.DeselectAllItems(System.Windows.Forms.ListBox)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Deselects all the items in <see cref="T:System.Windows.Forms.ListBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 ListBox1.DeselectAllItems()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListBox.Select.DeselectAllItemsNoJump(System.Windows.Forms.ListBox)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Selects all the items in <see cref="T:System.Windows.Forms.ListBox"/> without scrolling to its item position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 ListBox1.DeselectAllItemsNoJump()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.ListBox.Serialization">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.ListBox"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListBox.Serialization.Serialize(System.Windows.Forms.ListBox,System.String,Elektro.Application.Data.Enums.SerializationType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Serializes the items of the <see cref="T:System.Windows.Forms.ListBox"/> to a binary local file.
 <para></para>
 You can use this method to backup the items of a <see cref="T:System.Windows.Forms.ListBox"/>,
 then restore them with the <see cref="M:Elektro.Application.UI.Extensions.ListBox.Serialization.Deserialize(System.Windows.Forms.ListBox,System.String,Elektro.Application.Data.Enums.SerializationType)"/> method.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListBox"/>.
 </param>
 
 <param name="filepath">
 The target file.
 </param>
 
 <param name="serializationType">
 The serialization type to use. By default: <see cref="F:Elektro.Application.Data.Enums.SerializationType.Binary"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListBox.Serialization.Deserialize(System.Windows.Forms.ListBox,System.String,Elektro.Application.Data.Enums.SerializationType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Deserializes the items of the <see cref="T:System.Windows.Forms.ListBox"/> from a binary local file.
 <para></para>
 You can use this method to restore the items of a <see cref="T:System.Windows.Forms.ListBox"/> that were saved using 
 the <see cref="M:Elektro.Application.UI.Extensions.ListBox.Serialization.Serialize(System.Windows.Forms.ListBox,System.String,Elektro.Application.Data.Enums.SerializationType)"/> method.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListBox"/>.
 </param>
 
 <param name="filepath">
 The source file that contains the serialized items.
 </param>
 
 <param name="serializationType">
 The serialization type to use. By default: <see cref="F:Elektro.Application.Data.Enums.SerializationType.Binary"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.ListView.Copying">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.ListView"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Copying.CopySelectedItems(System.Windows.Forms.ListView)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies all the text contained in the current selected items of <see cref="T:System.Windows.Forms.ListView"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Copying.CopySelectedItems(System.Windows.Forms.ListView,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies all the text contained in the current selected items of <see cref="T:System.Windows.Forms.ListView"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="separator">
 The string used to separate the text of the subitems.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Copying.CopySelectedItems(System.Windows.Forms.ListView,System.String,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies all the text contained in the current selected items of <see cref="T:System.Windows.Forms.ListView"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="separator">
 The string used to separate the text of the subitems.
 </param>
 
 <param name="subItemIndex">
 The index of the <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem"/> to copy.
 <para></para>
 If <paramref name="subItemIndex"/> is <c>-1</c>, all subitems are copied.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Copying.CopyItem(System.Windows.Forms.ListView,System.Windows.Forms.ListViewItem)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies all the text contained in the specified <see cref="T:System.Windows.Forms.ListViewItem"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="item">
 The item to copy.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Copying.CopyItem(System.Windows.Forms.ListView,System.Windows.Forms.ListViewItem,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies all the text contained in the specified <see cref="T:System.Windows.Forms.ListViewItem"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="item">
 The item to copy.
 </param>
 
 <param name="separator">
 The string used to separate the text of the subitems.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Copying.CopyItem(System.Windows.Forms.ListView,System.Windows.Forms.ListViewItem,System.String,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies all the text contained in the specified <see cref="T:System.Windows.Forms.ListViewItem"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="item">
 The item to copy.
 </param>
 
 <param name="separator">
 The string used to separate the text of the subitems.
 </param>
 
 <param name="subItemIndex">
 The index of the <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem"/> to copy.
 <para></para>
 If <paramref name="subItemIndex"/> is <c>-1</c>, all subitems are copied.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Copying.CopyItem(System.Windows.Forms.ListView,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies all the text contained in the specified <see cref="T:System.Windows.Forms.ListViewItem"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="itemIndex">
 The index of the item to copy.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Copying.CopyItem(System.Windows.Forms.ListView,System.Int32,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies all the text contained in the specified <see cref="T:System.Windows.Forms.ListViewItem"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="itemIndex">
 The index of the item to copy.
 </param>
 
 <param name="separator">
 The string used to separate the text of the subitems.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Copying.CopyItem(System.Windows.Forms.ListView,System.Int32,System.String,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies all the text contained in the specified <see cref="T:System.Windows.Forms.ListViewItem"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="itemIndex">
 The index of the item to copy.
 </param>
 
 <param name="separator">
 The string used to separate the text of the subitems.
 </param>
 
 <param name="subItemIndex">
 The index of the <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem"/> to copy.
 <para></para>
 If <paramref name="subItemIndex"/> is <c>-1</c>, all subitems are copied.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Copying.CopyItems(System.Windows.Forms.ListView,System.Windows.Forms.ListViewItem[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies all the text contained in the specified items of <see cref="T:System.Windows.Forms.ListView"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="items">
 The items to copy.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Copying.CopyItems(System.Windows.Forms.ListView,System.Windows.Forms.ListViewItem[],System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies all the text contained in the specified items of <see cref="T:System.Windows.Forms.ListView"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="items">
 The items to copy.
 </param>
 
 <param name="separator">
 The string used to separate the text of the subitems.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Copying.CopyItems(System.Windows.Forms.ListView,System.Windows.Forms.ListViewItem[],System.String,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies all the text contained in the specified items of <see cref="T:System.Windows.Forms.ListView"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="items">
 The items to copy.
 </param>
 
 <param name="separator">
 The string used to separate the text of the subitems.
 </param>
 
 <param name="subItemIndex">
 The index of the <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem"/> to copy.
 <para></para>
 If <paramref name="subItemIndex"/> is <c>-1</c>, all subitems are copied.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Copying.CopyItems(System.Windows.Forms.ListView,System.Int32[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies all the text contained in the specified items of <see cref="T:System.Windows.Forms.ListView"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="indices">
 The indices of the items to copy.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Copying.CopyItems(System.Windows.Forms.ListView,System.Int32[],System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies all the text contained in the specified items of <see cref="T:System.Windows.Forms.ListView"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="indices">
 The indices of the items to copy.
 </param>
 
 <param name="separator">
 The string used to separate the text of the subitems.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Copying.CopyItems(System.Windows.Forms.ListView,System.Int32[],System.String,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies all the text contained in the specified items of <see cref="T:System.Windows.Forms.ListView"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="indices">
 The indices of the items to copy.
 </param>
 
 <param name="separator">
 The string used to separate the text of the subitems.
 </param>
 
 <param name="subItemIndex">
 The index of the <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem"/> to copy.
 <para></para>
 If <paramref name="subItemIndex"/> is <c>-1</c>, all subitems are copied.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Copying.Copy(System.Windows.Forms.ListView)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies all the text contained in the items of <see cref="T:System.Windows.Forms.ListView"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Copying.Copy(System.Windows.Forms.ListView,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies all the text contained in the items of <see cref="T:System.Windows.Forms.ListView"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="subItemIndex">
 The index of the <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem"/> to copy.
 <para></para>
 If <paramref name="subItemIndex"/> is <c>-1</c>, all subitems are copied.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Copying.Copy(System.Windows.Forms.ListView,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies all the text contained in the items of <see cref="T:System.Windows.Forms.ListView"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="separator">
 The string used to separate the text of the subitems.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Copying.Copy(System.Windows.Forms.ListView,System.String,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies all the text contained in the items of <see cref="T:System.Windows.Forms.ListView"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="separator">
 The string used to separate the text of the subitems.
 </param>
 
 <param name="subItemIndex">
 The index of the <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem"/> to copy.
 <para></para>
 If <paramref name="subItemIndex"/> is <c>-1</c>, all subitems are copied.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.ListView.Export">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.ListView"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Export.ExportToCSV(System.Windows.Forms.ListView,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Exports the source <see cref="T:System.Windows.Forms.ListView"/> to <c>CSV</c> table format.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim lv As New ListView
 lv.Columns.Add("column1")
 lv.Columns.Add("column2")
 lv.Columns.Add("column3")
 
 lv.Items.Add("Item1").SubItems.AddRange({"SubItem1", "SubItem2"})
 lv.Items.Add("Item2").SubItems.Add("SubItem1")
 lv.Items.Add("Item3").SubItems.Add("SubItem1")
 
 Dim csv As String = lv.ExportToCSV(defaultValueIfEmpty:="N/A")
 Console.WriteLine(csv)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="defaultValueIfEmpty">
 A default value to write in a <c>CSV</c> field 
 if the corresponding <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem"/> value is <see langword="Nothing"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <c>CSV</c> table string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Export.ExportToXml(System.Windows.Forms.ListView)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Exports the source <see cref="T:System.Windows.Forms.ListView"/> to <c>Xml</c> format.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim lv As New ListView
 lv.Columns.Add("column1")
 lv.Columns.Add("column2")
 lv.Columns.Add("column3")
 
 lv.Items.Add("Item1").SubItems.AddRange({"SubItem1", "SubItem2"})
 lv.Items.Add("Item2").SubItems.Add("SubItem1")
 lv.Items.Add("Item3").SubItems.Add("SubItem1")
 
 Dim xml As String = lv.ExportToXml()
 Console.WriteLine(xml)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <c>Xml</c> string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.ListView.Indices">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.ListView"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Indices.SetColumnIndices(System.Windows.Forms.ListView,System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Indexes the rows of a column of the <see cref="T:System.Windows.Forms.ListView"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="columnIndex">
 The column index.
 </param>
 
 <param name="startingIndex">
 The starting index number.
 <para></para>
 Default value is <c>1</c>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.ListView.Move">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.ListView"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Move.MoveSelectedItems(System.Windows.Forms.ListView,Elektro.Application.UI.Enums.RowMoveDirection)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Moves up or down the selected items of the <see cref="T:System.Windows.Forms.ListView"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="direction">
 The row-move direction.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Move.MoveSelectedItems(System.Windows.Forms.ListView,Elektro.Application.UI.Enums.RowMoveDirection,System.Collections.Generic.IEnumerable{System.Int32})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Moves up or down the selected items of the <see cref="T:System.Windows.Forms.ListView"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="direction">
 The row-move direction.
 </param>
 
 <param name="preserveSubitemIndices">
 A sequence of subitem indices to preserve their values when moving the items.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Move.DoItemsMove(System.Windows.Forms.ListView,Elektro.Application.UI.Enums.RowMoveDirection,System.Collections.Generic.IEnumerable{System.Int32})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Moves up or down the selected items of the <see cref="T:System.Windows.Forms.ListView"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="lv">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="direction">
 The row-move direction.
 </param>
 
 <param name="preserveSubitemIndices">
 Optionally, a sequence of subitem indices to preserve their values when moving the items.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.ListView.Remove">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.ListView"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Remove.RemoveSelectedItems(System.Windows.Forms.ListView)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes the selected items from <see cref="T:System.Windows.Forms.ListView"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Remove.RemoveDuplicatedItems(System.Windows.Forms.ListView,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes duplicated items in the <see cref="T:System.Windows.Forms.ListView"/>.
 <para></para>
 Comparison is done by comparing the text of the index of the specified subitems.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="subItemIndex">
 The subitem index to compare duplicates.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.ListView.Serialization">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.ListView"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Serialization.Serialize(System.Windows.Forms.ListView,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Serializes the items of the <see cref="T:System.Windows.Forms.ListView"/> to a binary local file.
 <para></para>
 You can use this method to backup the contents of a <see cref="T:System.Windows.Forms.ListView"/>,
 then restore them with the <see cref="M:Elektro.Application.UI.Extensions.ListView.Serialization.Deserialize(System.Windows.Forms.ListView,System.String)"/> method.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="filepath">
 The target file.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.Serialization.Deserialize(System.Windows.Forms.ListView,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Deserializes the items of the <see cref="T:System.Windows.Forms.ListView"/> from a binary local file.
 <para></para>
 You can use this method to restore the contents of a <see cref="T:System.Windows.Forms.ListView"/> that were saved using 
 the <see cref="M:Elektro.Application.UI.Extensions.ListView.Serialization.Serialize(System.Windows.Forms.ListView,System.String)"/> method.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 
 <param name="filepath">
 The source file that contains the serialized items.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.ListView.TypeConversion">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.ListView"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.TypeConversion.ToDataTable(System.Windows.Forms.ListView)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts the source <see cref="T:System.Windows.Forms.ListView"/> to a <see cref="T:System.Data.DataTable"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim lv As New ListView
 lv.Columns.Add("column1")
 lv.Columns.Add("column2")
 lv.Columns.Add("column3")
 
 lv.Items.Add("Item1").SubItems.AddRange({"SubItem1", "SubItem2"})
 lv.Items.Add("Item2").SubItems.Add("SubItem1")
 lv.Items.Add("Item3").SubItems.Add("SubItem1")
 
 Dim dt As DataTable = lv.ToDataTable()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Data.DataTable"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.ListView.TypeConversion.ToDataGridView(System.Windows.Forms.ListView)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts the source <see cref="T:System.Windows.Forms.ListView"/> to a <see cref="T:System.Windows.Forms.DataGridView"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim lv As New ListView
 lv.Columns.Add("column1")
 lv.Columns.Add("column2")
 lv.Columns.Add("column3")
 
 lv.Items.Add("Item1").SubItems.AddRange({"SubItem1", "SubItem2"})
 lv.Items.Add("Item2").SubItems.Add("SubItem1")
 lv.Items.Add("Item3").SubItems.Add("SubItem1")
 
 Dim dgv As DataGridView = lv.ToDataGridView()
 
 Me.Controls.Add(dgv)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Windows.Forms.DataGridView"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.RichTextBox.Append">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.RichTextBox"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.RichTextBox.Append.AppendTextAndSelect(System.Windows.Forms.RichTextBox,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Appends the specified text to the current text of the <see cref="T:System.Windows.Forms.RichTextBox"/> and selects it.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </param>
 
 <param name="text">
 The text to append.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.RichTextBox.Append.AppendColoredText(System.Windows.Forms.RichTextBox,System.String,System.Drawing.Color)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Appends colored text to the current text of the <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </param>
 
 <param name="text">
 The text to append.
 </param>
 
 <param name="foreColor">
 The text color.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.RichTextBox.Append.AppendColoredText(System.Windows.Forms.RichTextBox,System.String,System.Drawing.Color,System.Drawing.Color)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Appends colored text to the current text of the <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </param>
 
 <param name="text">
 The text to append.
 </param>
 
 <param name="foreColor">
 The text color.
 </param>
 
 <param name="backColor">
 The foregorund color of the text.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.RichTextBox.Append.AppendColoredText(System.Windows.Forms.RichTextBox,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Appends colored text to the current text of the <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </param>
 
 <param name="text">
 The text to append.
 </param>
 
 <param name="foreColor">
 The text color.
 </param>
 
 <param name="backColor">
 The foregorund color of the text.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.RichTextBox.Caret">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.RichTextBox"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.RichTextBox.Caret.SetCaretPosToBegin(System.Windows.Forms.RichTextBox)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Moves the text-cursor to the first character position in the <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.RichTextBox.Caret.SetCaretPosToEnd(System.Windows.Forms.RichTextBox)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Moves the text-cursor to the last character position in the <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.RichTextBox.Caret.SetCaretPos(System.Windows.Forms.RichTextBox,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the text-cursor position in the <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 position
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.RichTextBox.Clear">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.RichTextBox"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.RichTextBox.Clear.ClearSelectedText(System.Windows.Forms.RichTextBox)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Clears the selected text in the <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.RichTextBox.Colorize">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.RichTextBox"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.RichTextBox.Colorize.ColorizeMatches(System.Windows.Forms.RichTextBox,System.String,System.Text.RegularExpressions.RegexOptions,System.Drawing.Color)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Finds all the occurrences of the specified string pattern in the <see cref="T:System.Windows.Forms.RichTextBox"/> 
 and colorizes each occurrences.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 RichTextBox1.ColorizeMatches("Hello", RegexOptions.IgnoreCase, Color.Red)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </param>
 
 <param name="find">
 The regular expression pattern to find.
 </param>
 
 <param name="rgxOptions">
 The regular expression options.
 </param>
 
 <param name="foreColor">
 The target foreground color for the matched strings.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if matched at least one word, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.RichTextBox.Colorize.ColorizeMatches(System.Windows.Forms.RichTextBox,System.String,System.Text.RegularExpressions.RegexOptions,System.Drawing.Color,System.Drawing.Color)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Finds all the occurrences of the specified string pattern in the <see cref="T:System.Windows.Forms.RichTextBox"/> 
 and colorizes each occurrences.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 RichTextBox1.ColorizeMatches("Hello", RegexOptions.IgnoreCase, Color.Red, Color.Black)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </param>
 
 <param name="find">
 The regular expression pattern to find.
 </param>
 
 <param name="rgxOptions">
 The regular expression options.
 </param>
 
 <param name="foreColor">
 The target foreground color for the matched strings.
 </param>
 
 <param name="backColor">
 The target background color for the matched strings.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if matched at least one word, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.RichTextBox.Colorize.ColorizeMatches(System.Windows.Forms.RichTextBox,System.String,System.Text.RegularExpressions.RegexOptions,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Finds all the occurrences of the specified string pattern in the <see cref="T:System.Windows.Forms.RichTextBox"/> 
 and colorizes each occurrences.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 RichTextBox1.ColorizeMatches("Hello", RegexOptions.IgnoreCase, Color.Red, Color.Black,
                              New Font(RichTextBox1.Font.FontFamily, RichTextBox1.Font.Size, FontStyle.Italic))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </param>
 
 <param name="find">
 The regular expression pattern to find.
 </param>
 
 <param name="rgxOptions">
 The regular expression options.
 </param>
 
 <param name="foreColor">
 The target foreground color for the matched strings.
 </param>
 
 <param name="backColor">
 The target background color for the matched strings.
 </param>
 
 <param name="font">
 The target font for the matched strings.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if matched at least one word, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.RichTextBox.Colorize.ColorizeMatches(System.Windows.Forms.RichTextBox,System.String[],System.Text.RegularExpressions.RegexOptions,System.Drawing.Color)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Finds all the occurrences of any of the specified string patterns in the <see cref="T:System.Windows.Forms.RichTextBox"/> 
 and colorizes each occurrences.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 RichTextBox1.ColorizeMatches({"Hello", "[0-9]"}, RegexOptions.IgnoreCase, Color.Red)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </param>
 
 <param name="findCol">
 A collecton of regular expression patterns to find.
 </param>
 
 <param name="rgxOptions">
 The regular expression options.
 </param>
 
 <param name="foreColor">
 The target foreground color for the matched strings.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if matched at least one word, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.RichTextBox.Colorize.ColorizeMatches(System.Windows.Forms.RichTextBox,System.String[],System.Text.RegularExpressions.RegexOptions,System.Drawing.Color,System.Drawing.Color)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Finds all the occurrences of any of the specified string patterns in the <see cref="T:System.Windows.Forms.RichTextBox"/> 
 and colorizes each occurrences.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 RichTextBox1.ColorizeMatches({"Hello", "[0-9]"}, RegexOptions.IgnoreCase, Color.Red, Color.Black)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </param>
 
 <param name="findCol">
 A collecton of regular expression patterns to find.
 </param>
 
 <param name="rgxOptions">
 The regular expression options.
 </param>
 
 <param name="foreColor">
 The target foreground color for the matched strings.
 </param>
 
 <param name="backColor">
 The target background color for the matched strings.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if matched at least one word, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.RichTextBox.Colorize.ColorizeMatches(System.Windows.Forms.RichTextBox,System.String[],System.Text.RegularExpressions.RegexOptions,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Finds all the occurrences of any of the specified string patterns in the <see cref="T:System.Windows.Forms.RichTextBox"/> 
 and colorizes each occurrences.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 RichTextBox1.ColorizeMatches({"Hello", "[0-9]"}, RegexOptions.IgnoreCase, Color.Red, Color.Black,
                              New Font(RichTextBox1.Font.FontFamily, RichTextBox1.Font.Size, FontStyle.Italic))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </param>
 
 <param name="findCol">
 A collecton of regular expression patterns to find.
 </param>
 
 <param name="rgxOptions">
 The regular expression options.
 </param>
 
 <param name="foreColor">
 The target foreground color for the matched strings.
 </param>
 
 <param name="backColor">
 The target background color for the matched strings.
 </param>
 
 <param name="font">
 The target font for the matched strings.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if matched at least one word, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.RichTextBox.Colorize.InternalColorizeMatches(System.Windows.Forms.RichTextBox,System.String,System.Text.RegularExpressions.RegexOptions,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Finds all the occurrences of the specified string pattern in the <see cref="T:System.Windows.Forms.RichTextBox"/> 
 and colorizes each occurrences.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </param>
 
 <param name="find">
 The regular expression pattern to find.
 </param>
 
 <param name="rgxOptions">
 The regular expression options.
 </param>
 
 <param name="foreColor">
 The target foreground color for the matched strings.
 </param>
 
 <param name="backColor">
 The target background color for the matched strings.
 </param>
 
 <param name="font">
 The target font for the matched strings.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if matched at least one word, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.RichTextBox.Copying">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.RichTextBox"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.RichTextBox.Copying.CopyAll(System.Windows.Forms.RichTextBox)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies all the text contained in the <see cref="T:System.Windows.Forms.RichTextBox"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.RichTextBox.Find">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.RichTextBox"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.RichTextBox.Find.FindNext(System.Windows.Forms.RichTextBox,System.String,System.Windows.Forms.RichTextBoxFinds)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Finds the next occurrence of the specified string in the <see cref="T:System.Windows.Forms.RichTextBox"/> and selects it.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Private Sub Form1_Load() Handles Form1.Load
 
     RichTextBox1.Text = "Hello World!, Hello World!, Hello World!"
 
 End Sub
 
 Private Sub Button1_Click() Handles Button1.Click
 
    Dim result As Boolean = RichTextBox1.FindNext("Hello", RichTextBoxFinds.MatchCase)
 
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </param>
 
 <param name="find">
 The string to find.
 </param>
 
 <param name="options">
 Specifies how a text search is carried out.
 <para></para>
 To pervorm an inverse search from the end of the text to the beginning, use <see cref="F:System.Windows.Forms.RichTextBoxFinds.Reverse"/>
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the string is matched, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.RichTextBox.Find.FindNext(System.Windows.Forms.RichTextBox,System.String,System.Windows.Forms.RichTextBoxFinds,System.Drawing.Color,System.Drawing.Color)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Finds the next occurrence of the specified string in the <see cref="T:System.Windows.Forms.RichTextBox"/> and selects it.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Private Sub Form1_Load() Handles Form1.Load
 
     RichTextBox1.Text = "Hello World!, Hello World!, Hello World!"
 
 End Sub
 
 Private Sub Button1_Click() Handles Button1.Click
 
     RichTextBox1.FindNext("Hello", RichTextBoxFinds.MatchCase, Color.LightBlue, Color.Black)
 
 End Sub
 
 Private Sub RichTextBox1_Enter(ByVal sender As Object, ByVal e As EventArgs) Handles RichTextBox1.Enter
 
     Dim rtb As Global.System.Windows.Forms.RichTextBox = DirectCast(sender, RichTextBox)
 
     ' Restore selection colors before search next match.
     rtb.SelectionBackColor = rtb.BackColor
     rtb.SelectionColor = rtb.ForeColor
 
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </param>
 
 <param name="find">
 The string to find.
 </param>
 
 <param name="options">
 Specifies how a text search is carried out.
 <para></para>
 To pervorm an inverse search from the end of the text to the beginning, use <see cref="F:System.Windows.Forms.RichTextBoxFinds.Reverse"/>
 </param>
 
 <param name="highlightBackColor">
 The background color to highlight the found string.
 </param>
 
 <param name="highlightForeColor">
 The foreground color to highlight the found string.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the string is matched, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.RichTextBox.Serilization">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.RichTextBox"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.RichTextBox.Serilization.Serialize(System.Windows.Forms.RichTextBox,System.String,Elektro.Application.Data.Enums.SerializationType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Serializes the text of the <see cref="T:System.Windows.Forms.RichTextBox"/> to a binary local file.
 <para></para>
 You can use this method to backup the text of a <see cref="T:System.Windows.Forms.RichTextBox"/>,
 then restore it with the <see cref="M:Elektro.Application.UI.Extensions.RichTextBox.Serilization.Deserialize(System.Windows.Forms.RichTextBox,System.String,Elektro.Application.Data.Enums.SerializationType)"/> method.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </param>
 
 <param name="filepath">
 The target file.
 </param>
 
 <param name="serializationType">
 The serialization type to use. By default: <see cref="F:Elektro.Application.Data.Enums.SerializationType.Binary"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.RichTextBox.Serilization.Deserialize(System.Windows.Forms.RichTextBox,System.String,Elektro.Application.Data.Enums.SerializationType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Deserializes the text of the <see cref="T:System.Windows.Forms.RichTextBox"/> from a binary local file.
 <para></para>
 You can use this method to restore the text of a <see cref="T:System.Windows.Forms.RichTextBox"/> that was saved using 
 the <see cref="M:Elektro.Application.UI.Extensions.RichTextBox.Serilization.Serialize(System.Windows.Forms.RichTextBox,System.String,Elektro.Application.Data.Enums.SerializationType)"/> method.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </param>
 
 <param name="filepath">
 The source file that contains the serialized items.
 </param>
 
 <param name="serializationType">
 The serialization type to use. By default: <see cref="F:Elektro.Application.Data.Enums.SerializationType.Binary"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.TextBox.Caret">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.TextBox"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.TextBox.Caret.SetCaretPosToBegin(System.Windows.Forms.TextBox)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Moves the text-cursor to the first character position in the <see cref="T:System.Windows.Forms.TextBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.TextBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.TextBox.Caret.SetCaretPosToEnd(System.Windows.Forms.TextBox)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Moves the text-cursor to the last character position in the <see cref="T:System.Windows.Forms.TextBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.TextBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.TextBox.Caret.SetCaretPos(System.Windows.Forms.TextBox,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the text-cursor position in the <see cref="T:System.Windows.Forms.TextBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.TextBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 position
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.TextBox.Clear">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.TextBox"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.TextBox.Clear.ClearSelectedText(System.Windows.Forms.TextBox)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Clears the selected text in the <see cref="T:System.Windows.Forms.TextBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.TextBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.TextBox.Copying">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.TextBox"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.TextBox.Copying.CopyAll(System.Windows.Forms.TextBox)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies all the text contained in the <see cref="T:System.Windows.Forms.TextBox"/> to the clipboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.TextBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.TextBox.Serialization">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.TextBox"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.TextBox.Serialization.Serialize(System.Windows.Forms.TextBox,System.String,Elektro.Application.Data.Enums.SerializationType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Serializes the text of the <see cref="T:System.Windows.Forms.TextBox"/> to a binary local file.
 <para></para>
 You can use this method to backup the text of a <see cref="T:System.Windows.Forms.TextBox"/>,
 then restore it with the <see cref="M:Elektro.Application.UI.Extensions.TextBox.Serialization.Deserialize(System.Windows.Forms.TextBox,System.String,Elektro.Application.Data.Enums.SerializationType)"/> method.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.TextBox"/>.
 </param>
 
 <param name="filepath">
 The target file.
 </param>
 
 <param name="serializationType">
 The serialization type to use. By default: <see cref="F:Elektro.Application.Data.Enums.SerializationType.Binary"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.TextBox.Serialization.Deserialize(System.Windows.Forms.TextBox,System.String,Elektro.Application.Data.Enums.SerializationType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Deserializes the text of the <see cref="T:System.Windows.Forms.TextBox"/> from a binary local file.
 <para></para>
 You can use this method to restore the text of a <see cref="T:System.Windows.Forms.TextBox"/> that was saved using 
 the <see cref="M:Elektro.Application.UI.Extensions.TextBox.Serialization.Serialize(System.Windows.Forms.TextBox,System.String,Elektro.Application.Data.Enums.SerializationType)"/> method.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.TextBox"/>.
 </param>
 
 <param name="filepath">
 The source file that contains the serialized items.
 </param>
 
 <param name="serializationType">
 The serialization type to use. By default: <see cref="F:Elektro.Application.Data.Enums.SerializationType.Binary"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Extensions.WebBrowser.Navigate">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Windows.Forms.WebBrowser"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.WebBrowser.Navigate.NavigateAndWait(System.Windows.Forms.WebBrowser,System.String,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Navigates to the specifed url and waits the page to be loaded.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Windows.Forms.WebBrowser"/>.
 </param>
 
 <param name="url">
 The url to navigate.
 </param>
 
 <param name="newWindow">
 Indicates whether the url should be open into a new browser window.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Extensions.WebBrowser.Navigate.WebBrowser_DocumentCompleted(System.Object,System.Windows.Forms.WebBrowserDocumentCompletedEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.WebBrowser.DocumentCompleted"/> event of the <see cref="T:System.Windows.Forms.WebBrowser"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.Windows.Forms.WebBrowserDocumentCompletedEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Tools.CLI.CLIUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains Command-line Interface related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.CLIUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Tools.CLI.CLIUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Tools.CLI.CLIUtil.Handle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the window handle of the console associated with the calling process.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The window handle of the console associated with the calling process.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.CLIUtil.WriteColorText(System.String,System.Char[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes colored text on the Console.
 <para></para>
 Use <c>*F##*</c> as the start delimiter of the ForeColor, use <c>*-F*</c> as the end delimiter of the ForeColor.
 <para></para>
 Use <c>*B##*</c> as the start delimiter of the BackColor, use <c>*-B*</c> as the end delimiter of the BackColor.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 WriteColorText("*F10*Hello *F14*World!*-F*", {"*"c})
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The color-delimited text to write.
 </param>
 
 <param name="delimiters">
 A set of 1 or 2 delimiters to parse the color-delimited string.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.CLIUtil.WriteColorText(System.String,System.ConsoleColor,System.ConsoleColor)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes colored text on the Console.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 WriteColorText(" Hello World! ", ConsoleColor.Blue, ConsoleColor.Blue)
 WriteColorText(" Hello World! ", ConsoleColor.Blue, Nothing)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to write.
 </param>
 
 <param name="foreColor">
 The text color.
 </param>
 
 <param name="backColor">
 The background color.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.CLIUtil.WriteColorTextLine(System.String,System.Char[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes colored text on the Console and adds an empty line at the end.
 <para></para>
 Use <c>*F##*</c> as the start delimiter of the ForeColor, use <c>*-F*</c> as the end delimiter of the ForeColor.
 <para></para>
 Use <c>*B##*</c> as the start delimiter of the BackColor, use <c>*-B*</c> as the end delimiter of the BackColor.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 WriteColorTextLine("{B15}{F12} Hello World! {-F}{-B}", {"{"c, "}"c})
 WriteColorTextLine(String.Format("*B15**F12* {0} *F0*{1} *-F**-B*", "Hello", "World!"), {"*"c})
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The color-delimited text to write.
 </param>
 
 <param name="delimiters">
 A set of 1 or 2 delimiters to parse the color-delimited string.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.CLIUtil.WriteColorTextLine(System.String,System.ConsoleColor,System.ConsoleColor)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes colored text on the Console and adds an empty line at the end.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 WriteColorTextLine(" Hello World! ", ConsoleColor.Magenta, ConsoleColor.Gray)
 WriteColorTextLine(" Hello World! ", ConsoleColor.Magenta, Nothing)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to write.
 </param>
 
 <param name="foreColor">
 The text color.
 </param>
 
 <param name="backColor">
 The background color.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.CLIUtil.HideConsole">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Hides the console window associated with the calling process.
 </summary>        
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the window was previously visible, the return value is <see langword="True"/>.
 If the window was previously hidden, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.CLIUtil.ShowConsole">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Shows the console window associated with the calling process.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the window was previously visible, the return value is <see langword="True"/>.
 If the window was previously hidden, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.CLIUtil.ArgumentsAreEmpty(System.Collections.Generic.IEnumerable{System.String})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the command-line arguments for the current process are empty.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="args">
 A custom collection of arguments to examine.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the arguments are empty, otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.CLIUtil.JoinArguments(System.Collections.Generic.IEnumerable{System.String},System.Char)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a single string representation of the command-line arguments for the current process.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim args As String = JoinArguments(, ";"c)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="args">
 A custom collection of arguments to examine.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.CLIUtil.ClearCurrentLine">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Clears the current console line.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Console.WriteLine("Hello World!")
 Threading.Thread.Sleep(500)
 Console.SetCursorPosition(0, Console.CursorTop - 1)
 ClearCurrentLine()
 </code>
 </example>
 ------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.CLIUtil.SpinCursor(System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Animates the console cursor producing a spin effect.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Console.Write("Loading...")
 SpinCursor(repeat:=10)
 Console.Write(" Finished.")
 Console.ReadKey()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="repeat">
 The amount of times to repeat the spin animation.
 </param>
 
 <param name="speed">
 The timeout, in milliseconds, between each movement of the animation. The spin animation has 4 movements.
 <para></para>
 Default value is <c>100</c>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.CLIUtil.SpinCursorTask(System.Threading.CancellationToken,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronously animates the console cursor producing a spin effect.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Console.Write("Loading...")
 Dim spinCancelation As New CancellationTokenSource
 Dim spinTask As Task = SpinCursorTask(spinCancelation.Token)
 spinTask.Start()
 
 ' Do some work while the cursor is spinning...
 For x As Integer = 0 To 50
     Thread.Sleep(100)
     Debug.WriteLine(x)
 Next
 
 ' Work is done, so terminate the spin task.
 spinCancelation.Cancel()
 spinTask.Wait()
 
 Console.Write(" Finished.")
 Console.ReadKey()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="cancellationToken">
 A <see cref="T:System.Threading.CancellationToken"/> that you must use to cancel this <see cref="T:System.Threading.Tasks.Task"/>.
 </param>
 
 <param name="speed">
 The timeout, in milliseconds, between each movement of the animation. The spin animation has 4 movements.
 <para></para>
 Default value is <c>100</c>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.Threading.Tasks.Task"/> object to asynchronously animate the console cursor producing a spin effect.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.CLIUtil.InternalSpinCursor(System.Threading.CancellationToken,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Animates the console cursor producing a spin effect.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="cancellationToken">
 A <see cref="T:System.Threading.CancellationToken"/> that you must use to cancel this <see cref="T:System.Threading.Tasks.Task"/>.
 </param>
 
 <param name="speed">
 The timeout, in milliseconds, between each movement of the animation. The spin animation has 4 movements.
 <para></para>
 Default value is <c>100</c>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Tools.CLI.TypeWritter">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Simulates text-typying effect like a typewritter.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Console.WriteLine()
 TypeWritter.WriteColorLine("*F10*Hello *F14*W*F15*o*F13*r*F03*l*F08*d*F11*!*-F*", {"*"c})
 TypeWritter.WriteEmptyLine()
 TypeWritter.WriteColorLine("This is my typewritter.", ConsoleColor.White, Nothing)
 Console.ReadKey()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.TypeWritter.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Tools.CLI.TypeWritter"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.TypeWritter.InternalWrite(System.Threading.CancellationToken,System.String,System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes text simulating a Typewritter effect.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="cancellationToken">
 The cancellation token of the Task.
 </param>
 
 <param name="text">
 The text to type.
 </param>
 
 <param name="typeSpeed">
 The typying speed, in ms.
 </param>
 
 <param name="pauseDuration">
 The pause duration of the punctuation characters, in ms.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.TypeWritter.Write(System.String,System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes text simulating a typewritter effect.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to type.
 </param>
 
 <param name="typeSpeed">
 The typying speed, in ms.
 </param>
 
 <param name="pauseDuration">
 The pause duration of the punctuation characters, in ms.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.TypeWritter.WriteTask(System.Threading.CancellationToken,System.String,System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronously writes text simulating a typewritter effect.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim typeCancellation As New CancellationTokenSource
 Dim typeTask As Task = TypeWritter.WriteTask(typeCancellation.Token, "Hello World!", typeSpeed:=150)
 typeTask.Start()
 
 ' Do some work while typewritting...
 For x As Integer = 0 To 10
     Thread.Sleep(100)
     Debug.WriteLine(x)
 Next
 
 '' Work is done, and here you can cancel the task as you like...
 ' typeCancellation.Cancel()
 ' typeTask.Wait()
 ' Console.Write(" Finished.")
 Console.ReadKey()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="cancellationToken">
 A <see cref="T:System.Threading.CancellationToken"/> that you must use to cancel this <see cref="T:System.Threading.Tasks.Task"/>.
 </param>
 
 <param name="text">
 The text to type.</param>
 
 <param name="typeSpeed">
 The typying speed, in ms.
 </param>
 
 <param name="pauseDuration">
 The pause duration of the punctuation characters, in ms.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.Threading.Tasks.Task"/> object to asynchronously write text simulating a typewritter effect.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.TypeWritter.WriteLine(System.String,System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes text simulating a typewritter effect, and adds a break-line at the end.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to type.
 </param>
 
 <param name="typeSpeed">
 The typying speed, in ms.
 </param>
 
 <param name="pauseDuration">
 The pause duration of the punctuation characters, in ms.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.TypeWritter.WriteLineTask(System.Threading.CancellationToken,System.String,System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronously writes text simulating a typewritter effect, and adds a break-line at the end.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim typeCancellation As New CancellationTokenSource
 Dim typeTask As Task = TypeWritter.WriteLineTask(typeCancellation.Token, "Hello World!", typeSpeed:=150)
 typeTask.Start()
 
 ' Do some work while typewritting...
 For x As Integer = 0 To 10
     Thread.Sleep(100)
     Debug.WriteLine(x)
 Next
 
 '' Work is done, and here you can cancel the task as you like...
 ' typeCancellation.Cancel()
 ' typeTask.Wait()
 ' Console.Write(" Finished.")
 Console.ReadKey()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="cancellationToken">
 A <see cref="T:System.Threading.CancellationToken"/> that you must use to cancel this <see cref="T:System.Threading.Tasks.Task"/>.
 </param>
 
 <param name="text">
 The text to type.</param>
 
 <param name="typeSpeed">
 The typying speed, in ms.
 </param>
 
 <param name="pauseDuration">
 The pause duration of the punctuation characters, in ms.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.Threading.Tasks.Task"/> object to asynchronously write text simulating a typewritter effect.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.TypeWritter.WriteEmptyLine(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes an empty line.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="pauseDuration">
 The pause duration of the empty line, in ms.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.TypeWritter.WriteColor(System.String,System.ConsoleColor,System.ConsoleColor,System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes colored text simulating a typewritter effect.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 WriteColor(" Hello World! ", ConsoleColor.Blue, ConsoleColor.White)
 WriteColor(" Hello World! ", ConsoleColor.Blue, Nothing)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to write.
 </param>
 
 <param name="foreColor">
 The text color.
 </param>
 
 <param name="backColor">
 The background color.
 </param>
 
 <param name="typeSpeed">
 The typying speed, in ms.
 </param>
 
 <param name="pauseDuration">
 The pause duration of the punctuation characters, in ms.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.TypeWritter.WriteColorTask(System.Threading.CancellationToken,System.String,System.ConsoleColor,System.ConsoleColor,System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronously writes colored text simulating a typewritter effect.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim typeCancellation As New CancellationTokenSource
 Dim typeTask As Task = TypeWritter.WriteColorTask(typeCancellation.Token, " Hello World! ", ConsoleColor.Blue, ConsoleColor.White, typeSpeed:=150)
 typeTask.Start()
 
 ' Do some work while typewritting...
 For x As Integer = 0 To 10
     Thread.Sleep(100)
     Debug.WriteLine(x)
 Next
 
 '' Work is done, and here you can cancel the task as you like...
 ' typeCancellation.Cancel()
 ' typeTask.Wait()
 ' Console.Write(" Finished.")
 Console.ReadKey()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="cancellationToken">
 A <see cref="T:System.Threading.CancellationToken"/> that you must use to cancel this <see cref="T:System.Threading.Tasks.Task"/>.
 </param>
 
 <param name="text">
 The text to write.
 </param>
 
 <param name="foreColor">
 The text color.
 </param>
 
 <param name="backColor">
 The background color.
 </param>
 
 <param name="typeSpeed">
 The typying speed, in ms.
 </param>
 
 <param name="pauseDuration">
 The pause duration of the punctuation characters, in ms.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.Threading.Tasks.Task"/> object to asynchronously write colored text simulating a typewritter effect.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.TypeWritter.WriteColor(System.String,System.Char[],System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes colored text simulating a typewritter effect.
 <para></para>
 Use <c>*F##*</c> as the start delimiter of the ForeColor, use <c>*-F*</c> as the end delimiter of the ForeColor.
 <para></para>
 Use <c>*B##*</c> as the start delimiter of the BackColor, use <c>*-B*</c> as the end delimiter of the BackColor.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 WriteColor("*F10*Hello *F14*World!*-F*", {"*"c})
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The color-delimited text to write.
 </param>
 
 <param name="delimiters">
 A set of 1 or 2 delimiters to parse the color-delimited string.
 </param>
 
 <param name="typeSpeed">
 The typying speed, in ms.
 </param>
 
 <param name="pauseDuration">
 The pause duration of the punctuation characters, in ms.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.TypeWritter.WriteColorTask(System.Threading.CancellationToken,System.String,System.Char[],System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronously writes colored text simulating a typewritter effect.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim typeCancellation As New CancellationTokenSource
 Dim typeTask As Task = TypeWritter.WriteColorTask(typeCancellation.Token, "*F10*Hello *F14*World!*-F*", {"*"c}, typeSpeed:=150)
 typeTask.Start()
 
 ' Do some work while typewritting...
 For x As Integer = 0 To 10
     Thread.Sleep(100)
     Debug.WriteLine(x)
 Next
 
 '' Work is done, and here you can cancel the task as you like...
 ' typeCancellation.Cancel()
 ' typeTask.Wait()
 ' Console.Write(" Finished.")
 Console.ReadKey()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="cancellationToken">
 A <see cref="T:System.Threading.CancellationToken"/> that you must use to cancel this <see cref="T:System.Threading.Tasks.Task"/>.
 </param>
 
 <param name="text">
 The color-delimited text to write.
 </param>
 
 <param name="delimiters">
 A set of 1 or 2 delimiters to parse the color-delimited string.
 </param>
 
 <param name="typeSpeed">
 The typying speed, in ms.
 </param>
 
 <param name="pauseDuration">
 The pause duration of the punctuation characters, in ms.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.Threading.Tasks.Task"/> object to asynchronously write colored text simulating a typewritter effect.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.TypeWritter.WriteColorLine(System.String,System.ConsoleColor,System.ConsoleColor,System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes colored-text simulating a typewritter effect, and adds an empty line at the end.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 WriteColorLine(" Hello World! ", ConsoleColor.Magenta, ConsoleColor.Gray)
 WriteColorLine(" Hello World! ", ConsoleColor.Magenta, Nothing)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to write.
 </param>
 
 <param name="foreColor">
 The text color.
 </param>
 
 <param name="backColor">
 The background color.
 </param>
 
 <param name="typeSpeed">
 The typying speed, in ms.
 </param>
 
 <param name="pauseDuration">
 The pause duration of the punctuation characters, in ms.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.TypeWritter.WriteColorLineTask(System.Threading.CancellationToken,System.String,System.ConsoleColor,System.ConsoleColor,System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronously writes colored text simulating a typewritter effect, and adds an empty line at the end.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim typeCancellation As New CancellationTokenSource
 Dim typeTask As Task = TypeWritter.WriteColorLineTask(typeCancellation.Token, "*F10*Hello *F14*World!*-F*", {"*"c}, typeSpeed:=150)
 typeTask.Start()
 
 ' Do some work while typewritting...
 For x As Integer = 0 To 10
     Thread.Sleep(100)
     Debug.WriteLine(x)
 Next
 
 '' Work is done, and here you can cancel the task as you like...
 ' typeCancellation.Cancel()
 ' typeTask.Wait()
 ' Console.Write(" Finished.")
 Console.ReadKey()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="cancellationToken">
 A <see cref="T:System.Threading.CancellationToken"/> that you must use to cancel this <see cref="T:System.Threading.Tasks.Task"/>.
 </param>
 
 <param name="text">
 The text to write.
 </param>
 
 <param name="foreColor">
 The text color.
 </param>
 
 <param name="backColor">
 The background color.
 </param>
 
 <param name="typeSpeed">
 The typying speed, in ms.
 </param>
 
 <param name="pauseDuration">
 The pause duration of the punctuation characters, in ms.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.Threading.Tasks.Task"/> object to asynchronously write colored text simulating a typewritter effect.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.TypeWritter.WriteColorLine(System.String,System.Char[],System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes colored text simulating a typewritter effect, and adds an empty line at the end.
 <para></para>
 Use <c>*F##*</c> as the start delimiter of the ForeColor, use <c>*-F*</c> as the end delimiter of the ForeColor.
 <para></para>
 Use <c>*B##*</c> as the start delimiter of the BackColor, use <c>*-B*</c> as the end delimiter of the BackColor.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 WriteColorLine("{B15}{F12} Hello World! {-F}{-B}", {"{"c, "}"c})
 WriteColorLine(String.Format("*B15**F12* {0} *F0*{1} *-F**-B*", "Hello", "World!"), {"*"c})
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The color-delimited text to write.
 </param>
 
 <param name="delimiters">
 A set of 1 or 2 delimiters to parse the color-delimited string.
 </param>
 
 <param name="typeSpeed">
 The typying speed, in ms.
 </param>
 
 <param name="pauseDuration">
 The pause duration of the punctuation characters, in ms.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.CLI.TypeWritter.WriteColorLineTask(System.Threading.CancellationToken,System.String,System.Char[],System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronously writes colored text simulating a typewritter effect, and adds an empty line at the end.
 <para></para>
 Use <c>*F##*</c> as the start delimiter of the ForeColor, use <c>*-F*</c> as the end delimiter of the ForeColor.
 <para></para>
 Use <c>*B##*</c> as the start delimiter of the BackColor, use <c>*-B*</c> as the end delimiter of the BackColor.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim typeCancellation As New CancellationTokenSource
 Dim typeTask As Task = TypeWritter.WriteColorLineTask(typeCancellation.Token, "{B15}{F12} Hello World! {-F}{-B}", {"{"c, "}"c}, typeSpeed:=150)
 typeTask.Start()
 
 ' Do some work while typewritting...
 For x As Integer = 0 To 10
     Thread.Sleep(100)
     Debug.WriteLine(x)
 Next
 
 '' Work is done, and here you can cancel the task as you like...
 ' typeCancellation.Cancel()
 ' typeTask.Wait()
 ' Console.Write(" Finished.")
 Console.ReadKey()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="cancellationToken">
 A <see cref="T:System.Threading.CancellationToken"/> that you must use to cancel this <see cref="T:System.Threading.Tasks.Task"/>.
 </param>
 
 <param name="text">
 The color-delimited text to write.
 </param>
 
 <param name="delimiters">
 A set of 1 or 2 delimiters to parse the color-delimited string.
 </param>
 
 <param name="typeSpeed">
 The typying speed, in ms.
 </param>
 
 <param name="pauseDuration">
 The pause duration of the punctuation characters, in ms.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.Threading.Tasks.Task"/> object to asynchronously write colored text simulating a typewritter effect.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Tools.GUI.ControlHintManager">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Manages the control-hints of the edit-controls of a <see cref="T:System.Windows.Forms.Form"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim hintInfo1 As New ControlHintInfo("I'm a persistent hint.", Nothing,
                                      Color.Gray, ControlHintType.Normal)
 
 Dim hintInfo2 As New ControlHintInfo("I've set this hint on multiple controls at once!", Nothing,
                                      Color.Gray, ControlHintType.Normal)
 
 Dim hintInfo3 As New ControlHintInfo("Write something here...", New Font("lucida console", 15),
                                      Color.YellowGreen, ControlHintType.Normal)
 
 SetHint(TextBox1, hintInfo1)
 SetHint({TextBox2, TextBox3}, hintInfo2)
 SetHint(RichTextBox1, hintInfo3)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Tools.GUI.ControlHintManager.ControlHints">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the control-hints that has been created.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The control-hints that has been created.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Tools.GUI.ControlHintManager.controlHintsB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The control-hints that has been created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Tools.GUI.ControlHintManager.controlHintsDefaults">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 Remembers the handled controls and they default property values.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlHintManager.#ctor">
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Tools.GUI.ControlHintManager"/> class from being created.
 </summary>
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlHintManager.SetHint(System.Windows.Forms.Control,Elektro.Application.UI.Types.ControlHintInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets a new control-hint for an specific control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control.
 </param>
 
 <param name="hintInfo">
 The text-hint properties.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.Exception">
 control-hint text can't be null or empty.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlHintManager.SetHint(System.Windows.Forms.Control[],Elektro.Application.UI.Types.ControlHintInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets a new control-hint for multiple controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="controls">
 The controls.
 </param>
 
 <param name="hintInfo">
 The control-hint properties.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlHintManager.RemoveHint(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes a control-hint from a control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlHintManager.RemoveHint(System.Windows.Forms.Control[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes a control-hint from a control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlHintManager.InstanceControlHintFields">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Instances the <see cref="F:Elektro.Application.UI.Tools.GUI.ControlHintManager.controlHintsB"/> 
 and/or <see cref="F:Elektro.Application.UI.Tools.GUI.ControlHintManager.controlHintsDefaults"/> members.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlHintManager.GetPropertyValue``1(System.Windows.Forms.Control,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the property value of an specific control through reflection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The Control.
 </param>
 
 <param name="propName">
 The name of the property to get it's value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the property is not found on the Control, the return value is <see langword="Nothing"/>,
 Otherwise, the return value is the control's property value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlHintManager.SetProperties(System.Object,Elektro.Application.UI.Types.ControlHintInfo,System.String[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the properties of an specific control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The Control.
 </param>
 
 <param name="hintInfo">
 The properties to set it's values.
 </param>
 
 <param name="skipProperties">
 The properties to skip.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlHintManager.RestoreProperties(System.Object,Elektro.Application.UI.Types.ControlHintInfo,System.String[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Restores the properties of the specified control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The Control.
 </param>
 
 <param name="defaultProperties">
 The properties to reset it's values.
 </param>
 
 <param name="skipProperties">
 The properties to skip.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlHintManager.Control_HandleCreated(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.HandleCreated"/> event of the Control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlHintManager.Control_Enter(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.Enter"/> event of the Control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlHintManager.Control_Leave(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.Leave"/> event of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlHintManager.Control_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlHintManager.Control_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.KeyDown"/> event of the Control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.Windows.Forms.KeyEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlHintManager.Control_Disposed(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.ComponentModel.Component.Disposed"/> event of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.</param>
 
 <param name="e">
 The <see cref="T:System.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Tools.GUI.ControlIterator">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Iterates a collection of controls to perform a specific task.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 ControlIterator.Disable(CheckBox1)
 
 ControlIterator.Enable({CheckBox1, CheckBox2})
 
 ControlIterator.Dispose({CheckBox1, CheckBox2})
 
 ControlIterator.Check(Of CheckBox)(Me)
 
 ControlIterator.Uncheck(Of CheckBox)(Me.GroupBox1)
 
 ControlIterator.Hide(Of CheckBox)("1")
 
 ControlIterator.Show(Of CheckBox)("1")
 
 ControlIterator.PerformAction(Of CheckBox)(Sub(ctrl As CheckBox) ctrl.Visible = True)
 
 ControlIterator.PerformAction(Me.Controls, Sub(c As Control)
                                                c.BackColor = Color.Green
                                            End Sub)
 
 ControlIterator.PerformAction(Of TextBox)(Me.Controls,
                                           Sub(tb As TextBox)
                                               tb.Tag = 2I
                                           End Sub,
                                           containsName:="TextBox_Pattern")
 
 ControlIterator.AsyncPerformAction(RichTextBox1,
                                    Sub(rb As RichTextBox)
                                         For n As Integer = 0 To 9
                                             rb.AppendText(CStr(n))
                                         Next
                                     End Sub)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Tools.GUI.ControlIterator"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Enable(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Enable an specific ctrl.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control to enable.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Enable(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Enable multiple Controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls to enable.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Enable``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Enable all the Controls of the specified Type on the active Formulary.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Enable``1(System.Windows.Forms.Control,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Enable all the Controls of the specified Type on the specified Control Container.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlContainer">
 The control container where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Enable``1(System.Windows.Forms.Control.ControlCollection,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Enable all the Controls of the specified Type on the specified Control Collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlCollection">
 The control collection where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncEnable(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Enable an specific ctrl.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control to enable.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncEnable(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Enable multiple Controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls to enable.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncEnable``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Enable all the Controls of the specified Type on the active Formulary.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncEnable``1(System.Windows.Forms.Control,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Enable all the Controls of the specified Type on the specified Control Container.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlContainer">
 The control container where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncEnable``1(System.Windows.Forms.Control.ControlCollection,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Enable all the Controls of the specified Type on the specified Control Collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlCollection">
 The control collection where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Disable(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Disable an specific ctrl.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control to disable.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Disable(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Disable multiple Controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls to disable.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Disable``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Disable all the Controls of the specified Type on the active Formulary.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Disable``1(System.Windows.Forms.Control,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Disable all the Controls of the specified Type on the specified Control Container.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlContainer">
 The control container where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Disable``1(System.Windows.Forms.Control.ControlCollection,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Disable all the Controls of the specified Type on the specified Control Collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlCollection">
 The control collection where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncDisable(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Disable an specific ctrl.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control to disable.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncDisable(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Disable multiple Controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls to disable.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncDisable``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Disable all the Controls of the specified Type on the active Formulary.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncDisable``1(System.Windows.Forms.Control,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Disable all the Controls of the specified Type on the specified Control Container.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlContainer">
 The control container where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncDisable``1(System.Windows.Forms.Control.ControlCollection,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Disable all the Controls of the specified Type on the specified Control Collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlCollection">
 The control collection where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Show(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Show an specific ctrl.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control to show.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Show(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Show multiple Controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls to show.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Show``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Show all the Controls of the specified Type on the active Formulary.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Show``1(System.Windows.Forms.Control,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Show all the Controls of the specified Type on the specified Container.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlContainer">
 The control container where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Show``1(System.Windows.Forms.Control.ControlCollection,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Show all the Controls of the specified Type on the specified Control Collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlCollection">
 The control collection where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncShow(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Show an specific ctrl.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control to show.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncShow(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Show multiple Controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls to show.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncShow``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Show all the Controls of the specified Type on the active Formulary.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncShow``1(System.Windows.Forms.Control,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Show all the Controls of the specified Type on the specified Container.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlContainer">
 The control container where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncShow``1(System.Windows.Forms.Control.ControlCollection,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Show all the Controls of the specified Type on the specified Control Collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlCollection">
 The control collection where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Hide(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Hide an specific ctrl.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control to hide.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Hide(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Hide multiple Controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls to hide.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Hide``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Hide all the Controls of the specified Type on the active Formulary.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Hide``1(System.Windows.Forms.Control,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Hide all the Controls of the specified Type on the specified Container.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlContainer">
 The control container where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Hide``1(System.Windows.Forms.Control.ControlCollection,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Hide all the Controls of the specified Type on the specified Control Collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlCollection">
 The control collection where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncHide(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Hide an specific ctrl.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control to hide.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncHide(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Hide multiple Controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls to hide.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncHide``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Hide all the Controls of the specified Type on the active Formulary.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncHide``1(System.Windows.Forms.Control,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Hide all the Controls of the specified Type on the specified Container.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlContainer">
 The control container where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncHide``1(System.Windows.Forms.Control.ControlCollection,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Hide all the Controls of the specified Type on the specified Control Collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlCollection">
 The control collection where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Check(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Check an specific ctrl.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control to check.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Check(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Check multiple Controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls to check.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Check``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Check all the Controls of the specified Type on the active Formulary.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Check``1(System.Windows.Forms.Control,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Check all the Controls of the specified Type on the specified Control Container.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlContainer">
 The control container where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Check``1(System.Windows.Forms.Control.ControlCollection,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Check all the Controls of the specified Type on the specified Control Collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlCollection">
 The control collection where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncCheck(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Check an specific ctrl.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control to check.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncCheck(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Check multiple Controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls to check.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncCheck``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Check all the Controls of the specified Type on the active Formulary.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncCheck``1(System.Windows.Forms.Control,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Check all the Controls of the specified Type on the specified Control Container.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlContainer">
 The control container where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncCheck``1(System.Windows.Forms.Control.ControlCollection,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Check all the Controls of the specified Type on the specified Control Collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlCollection">
 The control collection where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Uncheck(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Uncheck an specific ctrl.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control to uncheck.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Uncheck(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Uncheck multiple Controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls to uncheck.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Uncheck``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Uncheck all the Controls of the specified Type on the active Formulary.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Uncheck``1(System.Windows.Forms.Control,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Uncheck all the Controls of the specified Type on the specified Control Container.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlContainer">
 The control container where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Uncheck``1(System.Windows.Forms.Control.ControlCollection,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Uncheck all the Controls of the specified Type on the specified Control Collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlCollection">
 The control collection where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncUncheck(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Uncheck an specific ctrl.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control to uncheck.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncUncheck(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Uncheck multiple Controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls to uncheck.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncUncheck``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Uncheck all the Controls of the specified Type on the active Formulary.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncUncheck``1(System.Windows.Forms.Control,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Uncheck all the Controls of the specified Type on the specified Control Container.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlContainer">
 The control container where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncUncheck``1(System.Windows.Forms.Control.ControlCollection,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Uncheck all the Controls of the specified Type on the specified Control Collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlCollection">
 The control collection where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Dispose(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Dispose an specific ctrl.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control to dispose.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Dispose(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Dispose multiple Controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls to dispose.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Dispose``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Dispose all the Controls of the specified Type on the active Formulary.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Dispose``1(System.Windows.Forms.Control,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Dispose all the Controls of the specified Type on the specified Control Container.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlContainer">
 The control container where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.Dispose``1(System.Windows.Forms.Control.ControlCollection,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Dispose all the Controls of the specified Type on the specified Control Collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlCollection">
 The control collection where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncDispose(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Dispose an specific ctrl.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control to dispose.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncDispose(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Dispose multiple Controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls to dispose.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncDispose``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Dispose all the Controls of the specified Type on the active Formulary.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncDispose``1(System.Windows.Forms.Control,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Dispose all the Controls of the specified Type on the specified Control Container.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlContainer">
 The control container where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncDispose``1(System.Windows.Forms.Control.ControlCollection,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Dispose all the Controls of the specified Type on the specified Control Collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlCollection">
 The control collection where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.ToggleEnabled(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Toggle the enabled state of an specific ctrl.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control to toggle their enabled state.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.ToggleEnabled(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Toggle the enabled state of multiple Controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls to toggle their enabled state.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.ToggleEnabled``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Toggle the enabled state of all the Controls of the specified Type on the active Formulary.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.ToggleEnabled``1(System.Windows.Forms.Control,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Toggle the enabled state of all the Controls of the specified Type on the specified Control Container.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlContainer">
 The control container where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.ToggleEnabled``1(System.Windows.Forms.Control.ControlCollection,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Toggle the enabled state of all the Controls of the specified Type on the specified Control Collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlCollection">
 The control collection where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncToggleEnabled(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Toggle the enabled state of an specific ctrl.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control to toggle their enabled state.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncToggleEnabled(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Toggle the enabled state of multiple Controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls to toggle their enabled state.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncToggleEnabled``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Toggle the enabled state of all the Controls of the specified Type on the active Formulary.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncToggleEnabled``1(System.Windows.Forms.Control,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Toggle the enabled state of all the Controls of the specified Type on the specified Control Container.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlContainer">
 The control container where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncToggleEnabled``1(System.Windows.Forms.Control.ControlCollection,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Toggle the enabled state of all the Controls of the specified Type on the specified Control Collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlCollection">
 The control collection where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.ToggleVisible(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Toggle the visible state of an specific ctrl.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control to toggle their visible state.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.ToggleVisible(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Toggle the visible state of multiple Controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls to toggle their visible state.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.ToggleVisible``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Toggle the visible state of all the Controls of the specified Type on the active Formulary.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.ToggleVisible``1(System.Windows.Forms.Control,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Toggle the visible state of all the Controls of the specified Type on the specified Control Container.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlContainer">
 The control container where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.ToggleVisible``1(System.Windows.Forms.Control.ControlCollection,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Toggle the visible state of all the Controls of the specified Type on the specified Control Collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlCollection">
 The control collection where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncToggleVisible(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Toggle the visible state of an specific ctrl.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control to toggle their visible state.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncToggleVisible(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Toggle the visible state of multiple Controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls to toggle their visible state.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncToggleVisible``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Toggle the visible state of all the Controls of the specified Type on the active Formulary.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncToggleVisible``1(System.Windows.Forms.Control,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Toggle the visible state of all the Controls of the specified Type on the specified Control Container.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlContainer">
 The control container where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncToggleVisible``1(System.Windows.Forms.Control.ControlCollection,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Toggle the visible state of all the Controls of the specified Type on the specified Control Collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlCollection">
 The control collection where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.ToggleChecked(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Toggle the checked state of an specific ctrl.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control to toggle their checked state.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.ToggleChecked(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Toggle the checked state of multiple Controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls to toggle their checked state.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.ToggleChecked``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Toggle the checked state of all the Controls of the specified Type on the active Formulary.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.ToggleChecked``1(System.Windows.Forms.Control,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Toggle the checked state of all the Controls of the specified Type on the specified Control Container.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlContainer">
 The control container where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.ToggleChecked``1(System.Windows.Forms.Control.ControlCollection,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Toggle the checked state of all the Controls of the specified Type on the specified Control Collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlCollection">
 The control collection where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncToggleChecked(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Toggle the checked state of an specific ctrl.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control to toggle their checked state.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncToggleChecked(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Toggle the checked state of multiple Controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls to toggle their checked state.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncToggleChecked``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Toggle the checked state of all the Controls of the specified Type on the active Formulary.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncToggleChecked``1(System.Windows.Forms.Control,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Toggle the checked state of all the Controls of the specified Type on the specified Control Container.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlContainer">
 The control container where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncToggleChecked``1(System.Windows.Forms.Control.ControlCollection,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Toggle the checked state of all the Controls of the specified Type on the specified Control Collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlCollection">
 The control collection where to find the ctrls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.PerformAction(System.Windows.Forms.Control,System.Delegate)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Perform an operation on a specific ctrl.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control to perform the Action.
 </param>
 
 <param name="operation">
 The action to perform on the ctrl.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.PerformAction(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control},System.Delegate)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Perform an operation on multiple Controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls to perform the Action.
 </param>
 
 <param name="operation">
 The action to perform on the ctrl.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.PerformAction``1(System.Delegate,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Perform an operation on all the Controls of the specified Type on the active Formulary.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.PerformAction``1(System.Windows.Forms.Control,System.Delegate,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Perform an operation on all the Controls of the specified Type on the specified Control Container.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlContainer">
 The control container where to find the ctrls.
 </param>
 
 <param name="operation">
 The action to perform on the ctrl.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.PerformAction``1(System.Windows.Forms.Control.ControlCollection,System.Delegate,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Perform an operation on all the Controls of the specified Type on the specified Control Collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlCollection">
 The control collection where to find the ctrls.
 </param>
 
 <param name="operation">
 The action to perform on the ctrl.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.PerformAction(System.Windows.Forms.Control.ControlCollection,System.Delegate,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Perform an operation on all the Controls on the specified Control Collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="controlCollection">
 The control collection where to find the ctrls.
 </param>
 
 <param name="operation">
 The action to perform on the ctrl.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncPerformAction(System.Windows.Forms.Control,System.Delegate)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Perform an asynchronous operation on a specific ctrl.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control to perform the Action.
 </param>
 
 <param name="operation">
 The action to perform on the ctrl.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncPerformAction(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control},System.Delegate)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Perform an asynchronous operation on multiple Controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls to perform the Action.
 </param>
 
 <param name="operation">
 The action to perform on the ctrl.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncPerformAction``1(System.Delegate,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Perform an asynchronous operation on all the Controls of the specified Type on the active Formulary.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncPerformAction``1(System.Windows.Forms.Control,System.Delegate,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Perform an asynchronous operation on all the Controls of the specified Type on the specified Control Container.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlContainer">
 The control container where to find the ctrls.
 </param>
 
 <param name="operation">
 The action to perform on the ctrl.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncPerformAction``1(System.Windows.Forms.Control.ControlCollection,System.Delegate,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Perform an asynchronous operation on all the Controls of the specified Type on the specified Control Collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 
 <param name="controlCollection">
 The control collection where to find the ctrls.
 </param>
 
 <param name="operation">
 The action to perform on the ctrl.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.EnableOrDisable(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control},System.Boolean,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Enable or disable ctrls.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.ShowOrHide(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control},System.Boolean,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Show or hide ctrls.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.CheckOrUncheck(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control},System.Boolean,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Check or uncheck ctrls.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.InternalToggleEnabled(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control},System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Toggle the Enabled state of ctrls.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.InternalToggleVisible(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control},System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Toggle the Visible state of ctrls.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.InternalToggleChecked(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control},System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Toggle the Checked state of ctrls.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.DisposeControls(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control},System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Dispose ctrls.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.PerformActionOnControls(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control},System.Delegate,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Perform an operation on ctrls.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncEnableOrDisable(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control},System.Boolean,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Enable or disable controls asynchronouslly.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls.
 </param>
 
 <param name="enabled">
 Indicates whether to enable or disable the controls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncShowOrHide(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control},System.Boolean,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Show or hide controls asynchronouslly.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls.
 </param>
 
 <param name="visible">
 Indicates whether to hide or show the controls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncCheckOrUncheck(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control},System.Boolean,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Check or uncheck controls asynchronouslly.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls.
 </param>
 
 <param name="checked">
 Indicates whether to check or uncheck the controls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.InternalAsyncToggleEnabled(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control},System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Toggle the Enabled state of controls asynchronouslly.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.InternalAsyncToggleVisible(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control},System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Toggle the Visible state of controls asynchronouslly.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.InternalAsyncToggleChecked(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control},System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Toggle the Checked state of controls asynchronouslly.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncDisposeControls(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control},System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Dispose controls asynchronouslly.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls.
 </param>
 
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.ControlIterator.AsyncPerformActionOnControls(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control},System.Delegate,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Perform an asynchronous operation on ctrls.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls.
 </param>
 
 <param name="operation">
 The action to perform on the ctrl.
 </param>    
    
 <param name="containsName">
 Indicates that only controls containing name should be collected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the operation succeeds; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Tools.GUI.GUIUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains Graphical User-Interface related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Tools.GUI.GUIUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Tools.GUI.GUIUtil.fullscreenForms">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Object that is used to remember Form settings when calling <see cref="M:Elektro.Application.UI.Tools.GUI.GUIUtil.ActivateFullscreen(System.Windows.Forms.Form,System.Boolean)"/> method 
 then restore the Form settings when calling <see cref="M:Elektro.Application.UI.Tools.GUI.GUIUtil.DeactivateFullscreen(System.Windows.Forms.Form)"/> method.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Tools.GUI.GUIUtil.Forms">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a collection that contains all the declared Forms of the current assembly.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 For Each f As Form In Forms
     Console.WriteLine(f.Name)
 Next
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 A collection that contains all the declared Forms of the current assembly.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Tools.GUI.GUIUtil.IsAppExecutionFromConsole">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value indicating whether the user has executed the current application from the Windows console (CMD).
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the user has executed the current application from the Windows console (CMD), 
 <see langword="False"/> otherwise.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Tools.GUI.GUIUtil.TaskbarStatus">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the Taskbar status of the current application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Taskbar status of the current application.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Tools.GUI.GUIUtil.statusB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The Taskbar status of the current application.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Tools.GUI.GUIUtil.TaskbarValue">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the Taskbar value of the current application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Taskbar value of the current application.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Tools.GUI.GUIUtil.taskbarValueB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The Taskbar value of the current application.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Tools.GUI.GUIUtil.TaskbarMaxValue">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the Taskbar maximum value of the current application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Taskbar maximum value of the current application.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Tools.GUI.GUIUtil.taskbarMaxValueB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The Taskbar maximum value of the current application.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.MouseIsOverControl(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determinates whether the mouse pointer is inside the boundaries of a specified control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim isOverControl As Boolean = MouseIsOverControl(PictureBox1)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the mouse pointer is inside the pixel range, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.EnableDoubleBufferedOnControl``1(``0)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Enables double buffering on the specified control.
 <para></para>
 Double buffering indicates whether a control should redraw its surface using 
 a secondary buffer to reduce or prevent flicker.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of the control.
 </typeparam>
 
 <param name="ctrl">
 The control.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.Fade(System.Windows.Forms.Form,Elektro.Application.UI.Enums.FadingEffect,System.Double,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Fades in or fades out a <see cref="T:System.Windows.Forms.Form"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="form">
 The <see cref="T:System.Windows.Forms.Form"/>.
 </param>
 
 <param name="effect">
 The fading effect.
 </param>
 
 <param name="ms">
 The time it takes to complete the fadiing effect, in milliseconds
 </param>
 
 <param name="opacity">
 The target form opacity.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.MoveToScreen(System.Windows.Forms.Control,System.Windows.Forms.Screen)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Moves the specified <see cref="T:System.Windows.Forms.Control"/> (normally a <see cref="T:System.Windows.Forms.Form"/>) to the target screen.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The source <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 
 <param name="display">
 The target screen.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The new coordinates of the source <see cref="T:System.Windows.Forms.Control"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.CenterToScreen(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Centers the bounds of the specified <see cref="T:System.Windows.Forms.Control"/> (normally a <see cref="T:System.Windows.Forms.Form"/>) to the current screen.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 CenterFormToScreen(Me)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The source <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The new coordinates of the source <see cref="T:System.Windows.Forms.Control"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.CenterToScreen(System.Windows.Forms.Control,System.Windows.Forms.Screen)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Centers the bounds of the specified <see cref="T:System.Windows.Forms.Control"/> (normally a <see cref="T:System.Windows.Forms.Form"/>) to the target screen.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 CenterFormToScreen(Me, Screen.PrimaryScreen)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The source <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 
 <param name="display">
 The target <see cref="T:System.Windows.Forms.Screen"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The new coordinates of the source <see cref="T:System.Windows.Forms.Control"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.CenterToControl(System.Windows.Forms.Control,System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Centers the bounds of a source <see cref="T:System.Windows.Forms.Control"/> to a target <see cref="T:System.Windows.Forms.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="source">
 The source <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 
 <param name="target">
 The target <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The new coordinates of the <see cref="T:System.Windows.Forms.Control"/> of the <paramref name="source"/> parameter.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.AnimateWindow(System.Windows.Forms.IWin32Window,System.Int32,Elektro.Application.UI.Enums.WindowAnimation)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Produces special effects when showing or hiding a window.
 <para></para>
 This doesn't show the window so make sure you call <see cref="M:System.Windows.Forms.Control.Show"/>
 or set <see cref="P:System.Windows.Forms.Control.Visible"/> property to <see langword="True"/> after calling <see cref="M:Elektro.Application.UI.Tools.GUI.GUIUtil.AnimateWindow(System.Windows.Forms.IWin32Window,System.Int32,Elektro.Application.UI.Enums.WindowAnimation)"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="window">
 The window to animate.
 <para></para>
 The calling thread must own this window.
 </param>
 
 <param name="time">
 The time it takes to play the animation, in milliseconds.
 <para></para>
 Typically, an animation takes 200 milliseconds to play.
 </param>
 
 <param name="animation">
 The type of animation.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 <para></para>
 The function will fail in the following situations:
 <para></para> If the window is already visible and you are trying to show the window.
 <para></para> If the window is already hidden and you are trying to hide the window.
 <para></para> When trying to animate a child window with <see cref="F:Elektro.Application.UI.Enums.WindowAnimation.ShowFade"/> or <see cref="F:Elektro.Application.UI.Enums.WindowAnimation.HideFade"/>.
 <para></para> If the thread does not own the window.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.ControlInvoke``1(``0,System.Action{``0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Synchronouslly Executes an encapsulated method on the thread that owns the specified control.
 <para></para>
 This method avoids cross-threading exceptions.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 ControlInvoke(TextBox1, Sub(tb) tb.Text = "Hello World!")
 
 ControlInvoke(TextBox1, Sub(tb As TextBox)
                             For x As Integer = 0 To 50
                                 tb.AppendText(CStr(x))
                             Next x
                         End Sub)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of the control
 </typeparam>
 
 <param name="ctrl">
 The <see cref="T:System.Windows.Forms.Control"/> to invoke.
 </param>
 
 <param name="method">
 The encapsulated method to be called.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.ControlInvokeAsync``1(``0,System.Action{``0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly Executes an encapsulated method on the thread that owns the specified control.
 <para></para>
 This method avoids cross-threading exceptions.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 ControlInvokeAsync(TextBox1, Sub(tb) tb.Text = "Hello World!")
 
 ControlInvokeAsync(TextBox1, Sub(tb As TextBox)
                                  For x As Integer = 0 To 50
                                      tb.AppendText(CStr(x))
                                  Next x
                              End Sub)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of the control
 </typeparam>
 
 <param name="ctrl">
 The <see cref="T:System.Windows.Forms.Control"/> to invoke.
 </param>
 
 <param name="method">
 The encapsulated method to be called.
 </param>
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.ActivateFullscreen(System.Windows.Forms.Form,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Cause the specified <see cref="T:System.Windows.Forms.Form"/> to enter in Fullscreen mode.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 ActivateFullScreen(Me, topMost:=True)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="form">
 The target <see cref="T:System.Windows.Forms.Form"/>.
 </param>
 
 <param name="topMost">
 If set to <see langword="True"/>, causes the target <see cref="T:System.Windows.Forms.Form"/> to be the top-most window.
 <para></para>
 Default value is <see langword="True"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.DeactivateFullscreen(System.Windows.Forms.Form)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Cause the specified <see cref="T:System.Windows.Forms.Form"/> to exit from Fullscreen mode.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 DeactivateFullScreen(Me)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="form">
 The target <see cref="T:System.Windows.Forms.Form"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.ToogleFullscreen(System.Windows.Forms.Form,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Toogles the Fullscreen mode of the specified <see cref="T:System.Windows.Forms.Form"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 ToogleFullscreen(Me, topMost:=True)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="form">
 The target <see cref="T:System.Windows.Forms.Form"/>.
 </param>
 
 <param name="topMost">
 If set to <see langword="True"/>, 
 causes the target <see cref="T:System.Windows.Forms.Form"/> to be the top-most window if enters to Fullscreen mode.
 <para></para>
 Default value is <see langword="True"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.MinimizeToSystray(System.Windows.Forms.Form,System.Windows.Forms.NotifyIcon)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Minimizes the specified <see cref="T:System.Windows.Forms.Form"/> to system-ray.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="form">
 The target <see cref="T:System.Windows.Forms.Form"/> to minimize.
 </param>
 
 <param name="ntfy">
 The <see cref="T:System.Windows.Forms.NotifyIcon"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 ntfy
 </exception>
 
 <exception cref="T:System.ArgumentException">
 The NotifyIcon doesn't have an icon.;ntfy
 or
 The Form is not visible.;form
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.RestoreFromSystray(System.Windows.Forms.Form,System.Windows.Forms.NotifyIcon)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Restores the visibility of the specified <see cref="T:System.Windows.Forms.Form"/> from system-ray.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="form">
 The target <see cref="T:System.Windows.Forms.Form"/> to restore.
 </param>
 
 <param name="ntfy">
 The <see cref="T:System.Windows.Forms.NotifyIcon"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 ntfy
 </exception>
 
 <exception cref="T:System.ArgumentException">
 The NotifyIcon doesn't have an icon.;ntfy
 or
 The Form is already visible.;form
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.ToogleFormSystray(System.Windows.Forms.Form,System.Windows.Forms.NotifyIcon)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Toogles the visibility of the specified <see cref="T:System.Windows.Forms.Form"/> 
 to minimize it to system-tray or restore it from system-tray.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="form">
 The target <see cref="T:System.Windows.Forms.Form"/> to toofle its visibility.
 </param>
 
 <param name="ntfy">
 The <see cref="T:System.Windows.Forms.NotifyIcon"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 ntfy
 </exception>
 
 <exception cref="T:System.ArgumentException">
 The NotifyIcon doesn't have an icon.;ntfy
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.ShowSaveFileDialog(System.String,System.String,System.String,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Opens a <see cref="T:System.Windows.Forms.SaveFileDialog"/> dialog and returns the selected filepath.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim filePath As String =
    ShowSaveFileDialog(defaultFilename:="My TextFile",
                       fileExtension:="*.txt",
                       filter:="Text File|*.txt",
                       dialogTitle:="Save Text File As...",
                       initialDirectory:=My.Application.Info.DirectoryPath)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="fileExtension">
 The file extension.
 </param>
 
 <param name="defaultFilename">
 The default filename.
 </param>
 
 <param name="filter">
 The file filter.
 </param>
 
 <param name="dialogTitle">
 The dialog title.
 </param>
 
 <param name="initialDirectory">
 The dialog's initial directory.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the dialog succeed, the return value is the selected filepath of the <see cref="T:System.Windows.Forms.SaveFileDialog"/>,
 if the dialog is canceled, the return value is <see cref="T:System.String"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.AllocateConsole">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Allocates a new console for the calling process.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 AllocateConsole()
 Console.WriteLine("This is my console!")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.GetNonClientAreaMargins(System.Windows.Forms.Form)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the non-client area margins of a <see cref="T:System.Windows.Forms.Form"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim margins As NonClientAreaMargins = GetNonClientAreaMargins(Me)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="form">
 The <see cref="T:System.Windows.Forms.Form"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:Elektro.Application.UI.Types.NonClientAreaMargins"/> structure that contains the margins size.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.RoundBorders(System.Windows.Forms.Control,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Rounds the borders of a <see cref="T:System.Windows.Forms.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 
 <param name="radius">
 The rounding radius.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.RoundBorders(System.Windows.Forms.Form,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Rounds the borders of a <see cref="T:System.Windows.Forms.Form"/>.
 <para></para>
 Note that the <see cref="T:System.Windows.Forms.FormBorderStyle"/> form's property should be set to <see cref="F:System.Windows.Forms.FormBorderStyle.None"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim f As Form = Me
 f.FormBorderStyle = Windows.Forms.FormBorderStyle.None
 RoundBorders(f, 20)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="form">
 The <see cref="T:System.Windows.Forms.Form"/>.
 </param>
 
 <param name="radius">
 The rounding radius.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.LoadCursorFromResource(System.Byte[],System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates a <see cref="T:System.Windows.Forms.Cursor"/> based on the data contained in a managed .Net resource.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="resource">
 The resource data (a cursor file).
 </param>
 
 <param name="deleteTempFile">
 If set to <see langword="True"/>, delete the temp cursor file extracted from the .Net managed resource.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Windows.Forms.Cursor"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.Exception">
 </exception>
 
 <exception cref="T:System.ComponentModel.Win32Exception">
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.LoadCursorFromFile(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates a <see cref="T:System.Windows.Forms.Cursor"/> based on a cursor file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The cursor filepath.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Windows.Forms.Cursor"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.Exception">
 </exception>
 
 <exception cref="T:System.ComponentModel.Win32Exception">
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.GetNotifyIconRect(System.Windows.Forms.NotifyIcon)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the screen coordinates of the bounding <see cref="T:System.Drawing.Rectangle"/> of the specified <see cref="T:System.Windows.Forms.NotifyIcon"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim ntfyRect As Rectangle = GetNotifyIconRect(Me.NotifyIcon1)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="ntfy">
 The source <see cref="T:System.Windows.Forms.NotifyIcon"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The <see cref="T:System.Drawing.Rectangle"/> of the source <see cref="T:System.Windows.Forms.NotifyIcon"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.GetNotifyIconHandle(System.Windows.Forms.NotifyIcon)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the handle of the specified <see cref="T:System.Windows.Forms.NotifyIcon"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim handle As IntPtr = GetNotifyIconHandle(Me.NotifyIcon1)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="ntfy">
 The source <see cref="T:System.Windows.Forms.NotifyIcon"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The handle of the source <see cref="T:System.Windows.Forms.NotifyIcon"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.GetControlFromPoint(System.Windows.Forms.Control,System.Drawing.Point)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the corresponding control (if any) that is over the specified mouse point.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim ctrl As Control = GetControlFromPoint(Me, Cursor.Position)
 If (ctrl IsNot Nothing) Then
     Console.WriteLine(ctrl.Name)
 End If
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="container">
 The source container of controls where to search for.
 <para></para>
 Normally a <see cref="T:System.Windows.Forms.Form"/>, but you can specify another <see cref="T:System.Windows.Forms.Control"/> that contains a <see cref="T:System.Windows.Forms.Control.ControlCollection"/>.
 </param>
 
 <param name="pt">
 The mouse point.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Windows.Forms.Control"/>, or <see langword="Nothing"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.GetControlFromPoint(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the corresponding control (if any) that is over the specified mouse point.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim ctrl As Control = GetControlFromPoint(Me)
 If (ctrl IsNot Nothing) Then
     Console.WriteLine(ctrl.Name)
 End If
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="container">
 The source container of controls where to search for.
 <para></para>
 Normally a <see cref="T:System.Windows.Forms.Form"/>, but you can specify another <see cref="T:System.Windows.Forms.Control"/> that contains a <see cref="T:System.Windows.Forms.Control.ControlCollection"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Windows.Forms.Control"/>, or <see langword="Nothing"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.GetControlFromPoint(System.Windows.Forms.Form,System.Drawing.Point)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the corresponding control (if any) that is over the specified point.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim ctrl As Control = GetControlFromPoint(Me, Cursor.Position)
 If (ctrl IsNot Nothing) Then
     Console.WriteLine(ctrl.Name)
 End If
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="form">
 The source <see cref="T:System.Windows.Forms.Form"/> where to search for.
 </param>
 
 <param name="pt">
 The mouse point, in non-relative screen coordinates.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Windows.Forms.Control"/>, or <see langword="Nothing"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.GUI.GUIUtil.GetControlFromPoint(System.Windows.Forms.Form)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the corresponding control (if any) that is over the current mouse point.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim ctrl As Control = GetControlFromPoint(Me)
 If (ctrl IsNot Nothing) Then
     Console.WriteLine(ctrl.Name)
 End If
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="form">
 The source <see cref="T:System.Windows.Forms.Form"/> where to search for.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Windows.Forms.Control"/>, or <see langword="Nothing"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Tools.TaskbarManager">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents an instance of the Windows taskbar
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Tools.TaskbarManager.lock">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Object to lock on instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Tools.TaskbarManager.Instance">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets an instance of the Windows Taskbar
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Tools.TaskbarManager.instanceB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 (Backing Field)
 A instance of the Windows Taskbar.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Tools.TaskbarManager.OwnerHandle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the handle of the window whose taskbar button will be used to display progress.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Tools.TaskbarManager.ownerHandleB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 (Backing Field)
 The handle of the window whose taskbar button will be used to display progress.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.TaskbarManager.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Tools.TaskbarManager"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.PlatformNotSupportedException">
 Taskbar features are only supported on Windows 7 or newer.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.TaskbarManager.SetProgressValue(System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays or updates a progress bar hosted in a taskbar button of the main application window 
 to show the specific percentage completed of the full operation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="currentValue">
 The proportion of the operation that has been completed at the time the method is called.
 </param>
 
 <param name="maximumValue">
 The value <paramref name="currentValue"/> will have when the operation is complete.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.TaskbarManager.SetProgressValue(System.Int32,System.Int32,System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays or updates a progress bar hosted in a taskbar button of the given window handle 
 to show the specific percentage completed of the full operation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="currentValue">
 The proportion of the operation that has been completed at the time the method is called.
 </param>
 
 <param name="maximumValue">
 The value <paramref name="currentValue"/> will have when the operation is complete.
 </param>
 
 <param name="windowHandle">
 The handle of the window whose associated taskbar button is being used as a progress indicator.
 <para></para>
 This window belong to a calling process associated with the button's application and must be already loaded.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.TaskbarManager.SetProgressState(Elektro.Interop.Win32.Enums.TaskbarProgressBarState)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the type and state of the progress indicator displayed on a taskbar button of the main application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="state">
 Progress state of the progress button
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Tools.TaskbarManager.SetProgressState(Elektro.Interop.Win32.Enums.TaskbarProgressBarState,System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the type and state of the progress indicator displayed on a taskbar button of the given window handle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="state">
 Progress state of the progress button
 </param>
 
 <param name="windowHandle">
 The handle of the window whose associated taskbar button is being used as a progress indicator.
 <para></para>
 This window belong to a calling process associated with the button's application and must be already loaded.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.Captcha">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents a Captcha for applications.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.Captcha.Image">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the captcha image.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The image.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.Captcha.imageB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The captcha image.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.Captcha.Text">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the captcha text.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The text.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.Captcha.textB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The captcha text.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.Captcha.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Types.Captcha"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.Captcha.#ctor(System.Drawing.Image,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.Captcha"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="img">
 The captcha image.
 </param>
 
 <param name="text">
 The captcha text.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.Captcha.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.Captcha.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.Captcha.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.CaptchaGenerator">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A Captcha generator for applications.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim rand As New Random
 
 Dim captchaGen As New CaptchaGenerator
 With captchaGen
 
     .Size = Me.PictureBox1.Size
 
     .TextLength = 5
     .TextColor = Color.White
     .TextAlignmentEnabled = True
 
     .Fonts = {SystemFonts.DefaultFont.FontFamily}
     .FontStyle = FontStyle.Bold
 
     .BackgroundColor1 = Color.FromKnownColor(DirectCast(rand.Next([Enum].GetValues(GetType(KnownColor)).Length), KnownColor))
     .BackgroundColor2 = Color.FromKnownColor(DirectCast(rand.Next([Enum].GetValues(GetType(KnownColor)).Length), KnownColor))
 
     .GridEnabled = True
     .GridColor = Color.DimGray
 
     .GridWidth = 1.0F
     .GridSpacing = 3
 
     .CurveEnabled = True
     .CurveColor = Color.Black
     .CurveWidth = 2.5F
     .CurveTension = 8.0F
 
 End With
 
 Dim captcha As Captcha = captchaGen.Generate
 Me.PictureBox1.BackgroundImage = captcha.Image
 ' captcha.Dispose()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.CaptchaGenerator.rand">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A <see cref="T:System.Random"/> instance to generate random secuences of numbers.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.CaptchaGenerator.Size">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the size of the captcha image.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The size of the captcha image.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.CaptchaGenerator.Characters">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the character set to build the captcha text.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The character set to build the captcha text.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.CaptchaGenerator.TextLength">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the length of the captcha text.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The length of the captcha text.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.CaptchaGenerator.TextAlignmentEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether text alignment is enabled in the captcha image.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if text alignment is enabled; <see langword="False"/> otherwise.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.CaptchaGenerator.Fonts">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the fonts to use in the captcha generation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The fonts to use in the captcha generation.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.CaptchaGenerator.FontStyle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the font style of the captcha text.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The font style of the captcha text.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.CaptchaGenerator.BackgroundColor1">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the first background color.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The first background color.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.CaptchaGenerator.BackgroundColor2">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the second background color.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The second background color.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.CaptchaGenerator.TextColor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the color of the captcha text.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The color of the captcha text.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.CaptchaGenerator.GridEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether grid drawing is enabled in the captcha image.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if grid drawing is enabled; <see langword="False"/> otherwise.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.CaptchaGenerator.GridColor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the color of the grid.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The color of the grid.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.CaptchaGenerator.GridWidth">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the width of the grid.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The width of the grid.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.CaptchaGenerator.GridSpacing">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the grid spacing.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The grid spacing.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.CaptchaGenerator.CurveEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether curve drawing is enabled in the captcha image.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if curve drawing is enabled; <see langword="False"/> otherwise.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.CaptchaGenerator.CurveColor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the color of the curve.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The color of the curve.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.CaptchaGenerator.CurveWidth">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the width of the curve.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The width of the curve.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.CaptchaGenerator.CurveTension">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the curve tension.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The curve tension.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.CaptchaGenerator.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.CaptchaGenerator"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.CaptchaGenerator.Generate">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates the <see cref="T:Elektro.Application.UI.Types.Captcha"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:Elektro.Application.UI.Types.Captcha"/> instance that contains the resulting captcha image and text.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.CaptchaGenerator.DrawBackground(System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Color)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Draws the captcha background.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="g">
 The graphics.
 </param>
 
 <param name="colorLeft">
 The left background color.
 </param>
 
 <param name="colorRight">
 The right background color.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.CaptchaGenerator.DrawChars(System.Drawing.Graphics,System.Collections.Generic.Dictionary{System.Collections.Generic.KeyValuePair{System.Char,System.String},System.Drawing.Point},System.Drawing.FontFamily[],System.Int32,System.Drawing.FontStyle,System.Drawing.Color)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Draws the characters on the captcha image.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="g">
 The graphics.
 </param>
 
 <param name="charKeys">
 The characters and their points.
 </param>
 
 <param name="fontCol">
 The font-family collection to draw the chars.
 </param>
 
 <param name="fontHeight">
 The text height.
 </param>
 
 <param name="fontStyle">
 The font style to draw the text.
 </param>
 
 <param name="color">
 The text color.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.CaptchaGenerator.DrawGrid(System.Drawing.Graphics,System.Collections.Generic.Dictionary{System.Drawing.Point,System.Drawing.Point},System.Collections.Generic.Dictionary{System.Drawing.Point,System.Drawing.Point},System.Drawing.Color,System.Single)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Draws a grid on the captcha image.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="g">
 The graphics.
 </param>
 
 <param name="vLines">
 The points of the vertical grid-lines.
 </param>
 
 <param name="hLines">
 The points of the horizontal grid-lines.
 </param>
 
 <param name="color">
 The grid-lines color.
 </param>
 
 <param name="width">
 The grid-lines width.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.CaptchaGenerator.DrawCurve(System.Drawing.Graphics,System.Drawing.Point[],System.Drawing.Color,System.Single,System.Single)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Draws the curve on the captcha image.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="g">
 The graphics.
 </param>
 
 <param name="curvePoints">
 The curve points.
 </param>
 
 <param name="color">
 The curve color.
 </param>
 
 <param name="width">
 The curve width.
 </param>
 
 <param name="tension">
 The curve tension.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.CaptchaGenerator.GetGridVerticalLines(System.Drawing.Size,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the vertical lines of the captcha grid.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="size">
 The captcha size.
 </param>
 
 <param name="spacing">
 The grid-lines spacing.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.Collections.Generic.Dictionary`2"/> that contains the top and bottom points of the vertical grid-lines to draw.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.CaptchaGenerator.GetGridHorizontalLines(System.Drawing.Size,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the horizontal lines of the captcha grid.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="size">
 The captcha size.
 </param>
 
 <param name="spacing">
 The grid-lines spacing.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.Collections.Generic.Dictionary`2"/> that contains the top and bottom points of the horizontal grid-lines to draw.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.CaptchaGenerator.GetCharPositions(System.Drawing.Image,System.String,System.Drawing.FontFamily[],System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the X and Y positions of the characters for drawing the captcha text.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="img">
 The captcha image.
 </param>
 
 <param name="str">
 The captcha string.
 </param>
 
 <param name="fontCol">
 The font-family collection to measure the characters and calculate their positions.
 </param>
 
 <param name="alignText">
 If set to <see langword="True"/>, aligns the text at the middle of the <paramref name="img"/> bounds.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.Collections.Generic.Dictionary`2"/> that contains the 
 characters, their font-family names, and their X-Y coordinates to draw them.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.CaptchaGenerator.GetCurve(System.Drawing.Image,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the captcha curve.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="img">
 The captcha image.
 </param>
 
 <param name="text">
 The captcha text.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.Drawing.Point"/> Array that contains the curve points to draw.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.CaptchaGenerator.GetRandomFontFamily(System.Drawing.FontFamily[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a random font-family from the specified font-family collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="fontCol">
 The font-family collection.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The random font-family.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.CaptchaGenerator.GetRandomString(System.Char[],System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a random string using the specified characters.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="charSet">
 The character set.
 </param>
 
 <param name="length">
 The string length.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The random string.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 charSet
 </exception>
 
 <exception cref="T:System.ArgumentOutOfRangeException">
 length;Specify a value equal or lower than the amount of characters.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.ControlBlinker">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Blinks a <see cref="P:Elektro.Application.UI.Types.ControlBlinker.Control"/> and/or their text.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Private labelBlinker As ControlBlinker
 
 Private Sub Test() Handles MyBase.Shown
 
     Me.labelBlinker = New ControlBlinker(Label1)
 
     ' Blink
     With Me.labelBlinker
         .Blink(interval:=500)
         .BlinkText(interval:=500, customText:="Custom Text!")
     End With
 
     ' Unblink
     With Me.labelBlinker
         .Unblink(visible:=True)
         .UnblinkText(restoreText:=True)
     End With
 
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlBlinker.textToRestore">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A custom text to restore it after blinking the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlBlinker._BlinkTimer">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A Timer to blink a control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlBlinker._BlinkTextTimer">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A Timer to blink the text of a control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlBlinker.isBlinking">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the control is blinking.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlBlinker.isBlinkingText">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the text of the control is blinking.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlBlinker.Control">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the control to blink.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The control to blink.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlBlinker.controlB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( backing field )
 The control to blink.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlBlinker.#ctor(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.ControlBlinker"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The <see cref="P:Elektro.Application.UI.Types.ControlBlinker.Control"/> to blink.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlBlinker.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Types.ControlBlinker"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlBlinker.Blink(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Blinks the Control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="interval">
 The blink interval, in ms.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlBlinker.Unblink(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Stop blinking the Control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="visible">
 The visibility of the control.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlBlinker.BlinkText(System.Int32,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Blinks the text content of the Control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="interval">
 The blink interval.
 </param>
 
 <param name="customText">
 A custom text to blink.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlBlinker.UnblinkText(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Stop blinking the text content of the Control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="restoreText">
 If set to <see langword="True"/>, the control text is resetted to the initial state before started blinking.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlBlinker.BlinkTimer_Tick(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Timer.Tick"/> event of the <see cref="P:Elektro.Application.UI.Types.ControlBlinker.BlinkTimer"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlBlinker.BlinkTextTimer_Tick(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Timer.Tick"/> event of the <see cref="P:Elektro.Application.UI.Types.ControlBlinker.BlinkTextTimer"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlBlinker.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlBlinker.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlBlinker.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.ControlClickNotifier">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Notifies a click, double-click, or triple-click event on the specified <see cref="P:Elektro.Application.UI.Types.ControlClickNotifier.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example that selects all the text on a TextBox when triple-click occurs.
 <code>
 Friend WithEvents ClickNotifier As ControlClickNotifier
 
 Public Sub Test() Handles MyBase.Shown
 
     Me.ClickNotifier = New ControlClickNotifier(Me.TextBox1)
 
 End Sub
 
 Private Sub ClickNotifier_MouseClick(ByVal sender As Object, ByVal e As MouseEventArgs) _
 Handles ClickNotifier.TripleClick
 
     If (e.Button = MouseButtons.Left) Then
 
         Dim tb As TextBox = DirectCast(sender, TextBox)
         tb.SelectAll()
 
     End If
 
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlClickNotifier.clkArea">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The bounds of the area where a click occurs.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlClickNotifier.clkSize">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The size of the area where a double-click occurs.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlClickNotifier.clkCount">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Keeps track of the amount of times that a click occurs.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlClickNotifier.dblClkDelay">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The double-click delay time, in ms.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlClickNotifier.mouseButton">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The mouse button clicked.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlClickNotifier._clkTimer">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A <see cref="T:System.Windows.Forms.Timer"/> to measure the intervals for a double and triple clicks.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlClickNotifier.Control">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the <see cref="P:Elektro.Application.UI.Types.ControlClickNotifier.Control"/> that owns this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The <see cref="P:Elektro.Application.UI.Types.ControlClickNotifier.Control"/> that owns this instance.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlClickNotifier._controlB">
 ----------------------------------------------------------------------------------------------------
 ( Backing field )
 <summary>
 Gets the <see cref="P:Elektro.Application.UI.Types.ControlClickNotifier.Control"/> that owns this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Application.UI.Types.ControlClickNotifier.Click">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when a single click occurs in the owner <see cref="P:Elektro.Application.UI.Types.ControlClickNotifier.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Application.UI.Types.ControlClickNotifier.DoubleClick">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when a double-click occurs in the owner <see cref="P:Elektro.Application.UI.Types.ControlClickNotifier.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Application.UI.Types.ControlClickNotifier.TripleClick">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when a triple-click occurs in the owner <see cref="P:Elektro.Application.UI.Types.ControlClickNotifier.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlClickNotifier.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="E:Elektro.Application.UI.Types.ControlClickNotifier.TripleClick"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlClickNotifier.#ctor(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="E:Elektro.Application.UI.Types.ControlClickNotifier.TripleClick"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The <see cref="P:Elektro.Application.UI.Types.ControlClickNotifier.Control"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlClickNotifier.OnClick(System.Windows.Forms.MouseEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Raises <see cref="E:Elektro.Application.UI.Types.ControlClickNotifier.Click"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlClickNotifier.OnDoubleClick(System.Windows.Forms.MouseEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Raises <see cref="E:Elektro.Application.UI.Types.ControlClickNotifier.DoubleClick"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlClickNotifier.OnTripleClick(System.Windows.Forms.MouseEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Raises <see cref="E:Elektro.Application.UI.Types.ControlClickNotifier.TripleClick"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlClickNotifier.SetFirstClick(System.Windows.Forms.MouseButtons,System.Drawing.Point)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Registers a first mouse click event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="mButton">
 The mouse button clicked.
 </param>
 
 <param name="clkPoint">
 Click point for definition of the valid click area.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlClickNotifier.SetClick(System.Windows.Forms.MouseButtons,System.Drawing.Point)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Registers a mouse click event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="mButton">
 The mouse button clicked.
 </param>
 
 <param name="clkPoint">
 Click point for definition of the valid click area.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlClickNotifier.ClickTimer_Tick(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Timer.Tick"/> event of the <see cref="P:Elektro.Application.UI.Types.ControlClickNotifier.clkTimer"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlClickNotifier.Control_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event of the <see cref="P:Elektro.Application.UI.Types.ControlClickNotifier.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlClickNotifier.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlClickNotifier.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlClickNotifier.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.ControlDragger">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds dragging capabilities to a single or multiple <see cref="T:System.Windows.Forms.Control"/> when clicking on they client area.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public Class Form1 : Inherits Form
 
     Dim ctrlDragger As New ControlDragger
 
     Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load
 
         ctrlDragger.AddControl(Me.PictureBox1)
         Dim ctrlInfo As ControlDragInfo = ctrlDragger.FindControlDragInfo(Me.PictureBox1)
 
         ctrlInfo.Enabled = True
         ctrlInfo.Cursor = Cursors.SizeAll
 
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlDragger.Controls">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection that contains the 
 owner controls that can perform draggable operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlDragger.controlsB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection that contains the 
 owner controls that can perform draggable operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlDragger.Empty">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents a nul <see cref="T:Elektro.Application.UI.Types.ControlDragger"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="Nothing"/>
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlDragger.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.ControlDragger"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlDragger.#ctor(System.Windows.Forms.Control,System.Boolean,System.Windows.Forms.Cursor)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.ControlDragger"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The owner <see cref="T:System.Windows.Forms.Control"/> used to perform draggable operations.
 </param>
 
 <param name="enabled">
 If set to <see langword="True"/>, inmediately enables dragging on the <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 
 <param name="cursor">
 The <see cref="T:System.Windows.Forms.Cursor"/> to use when dragging the <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlDragger.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.ControlDragger"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The owner <see cref="P:Elektro.Application.UI.Types.ControlDragger.Controls"/> used to perform draggable operations.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlDragger.#ctor(Elektro.Application.UI.Types.ControlDragInfo,System.Drawing.Point,System.Drawing.Point)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.ControlDragger"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="controlInfo">
 The <see cref="T:Elektro.Application.UI.Types.FormDragInfo"/> instance that contains the <see cref="T:System.Windows.Forms.Control"/> reference and its draggable info.
 </param>
 
 <param name="mouseCoordinates">
 The current mouse coordinates.
 </param>
 
 <param name="location">
 The current location.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlDragger.AddControl(System.Windows.Forms.Control,System.Boolean,System.Windows.Forms.Cursor)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Assigns the specified <see cref="T:System.Windows.Forms.Control"/> as a draggable element.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 
 <param name="enabled">
 If set to <see langword="True"/>, inmediatelly enables dragging on the <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 
 <param name="cursor">
 The <see cref="T:System.Windows.Forms.Cursor"/> to use when dragging the <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 The specified control is already added.;ctrl
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlDragger.AddControls(System.Windows.Forms.Control[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Assigns the specified controls as draggable elements of they parents <see cref="T:System.Windows.Forms.Form"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 An array of <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 The parent form of the control is not handled.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlDragger.RemoveControl(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes the specified <see cref="T:System.Windows.Forms.Control"/> from the draggable elements.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 The specified control is not found.;ctrl
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlDragger.RemoveControls(System.Windows.Forms.Control[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes the specified controls from the draggable elements.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 An array of <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlDragger.FindControlDragInfo(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Finds the <see cref="T:Elektro.Application.UI.Types.ControlDragInfo"/> instance that is associated with the specified <see cref="T:System.Windows.Forms.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The <see cref="T:Elektro.Application.UI.Types.ControlDragInfo"/> instance that is associated with the specified <see cref="T:System.Windows.Forms.Control"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlDragger.FindControlDragInfo(System.String,System.StringComparison)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Finds the <see cref="T:Elektro.Application.UI.Types.ControlDragInfo"/> instance that is associated with the specified <see cref="T:System.Windows.Forms.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="controlName">
 The name of the <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The <see cref="T:Elektro.Application.UI.Types.FormDragInfo"/> instance that is associated with the specified <see cref="T:System.Windows.Forms.Control"/> .
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlDragger.AddHandlers(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds the <see cref="T:System.Windows.Forms.Control"/> handlers to enable draggable operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlDragger.RemoveHandlers(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes the <see cref="T:System.Windows.Forms.Control"/> handlers to disable draggable operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlDragger.GetNewLocation(Elektro.Application.UI.Types.ControlDragInfo,System.Drawing.Point)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Return the new control location.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="controlInfo">
 The <see cref="T:Elektro.Application.UI.Types.ControlDragInfo"/> instance that contains the <see cref="T:System.Windows.Forms.Control"/> instance and its info.
 </param>
 
 <param name="currentLocation">
 The current form location.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The new control location.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlDragger.Element_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event of the owner controls.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlDragger.Element_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.MouseUp"/> event of the owner controls.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlDragger.Element_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event of the owner controls.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlDragger.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlDragger.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlDragger.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.ControlDragInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Defines the draggable info of a <see cref="T:Elektro.Application.UI.Types.ControlDragger"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlDragInfo.Control">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the owner <see cref="P:Elektro.Application.UI.Types.ControlDragInfo.Control"/> that is used to perform draggable operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The owner <see cref="P:Elektro.Application.UI.Types.ControlDragInfo.Control"/> that is used to perform draggable operations.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlDragInfo.controlB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The owner <see cref="P:Elektro.Application.UI.Types.ControlDragInfo.Control"/> that is used to perform draggable operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlDragInfo.Name">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the name of the owner <see cref="P:Elektro.Application.UI.Types.ControlDragInfo.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The name of the owner <see cref="P:Elektro.Application.UI.Types.ControlDragInfo.Control"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlDragInfo.Enabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether drag is enabled on the owner <see cref="P:Elektro.Application.UI.Types.ControlDragInfo.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if drag is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlDragInfo.DragInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the <see cref="T:Elektro.Application.UI.Types.ControlDragger"/> instance of the owner <see cref="P:Elektro.Application.UI.Types.ControlDragInfo.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The <see cref="T:Elektro.Application.UI.Types.ControlDragger"/> instance of the owner <see cref="P:Elektro.Application.UI.Types.ControlDragInfo.Control"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlDragInfo.Cursor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the <see cref="P:Elektro.Application.UI.Types.ControlDragInfo.Cursor"/> of the owner <see cref="P:Elektro.Application.UI.Types.ControlDragInfo.Control"/> to use when dragging it.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The <see cref="P:Elektro.Application.UI.Types.ControlDragInfo.Cursor"/> of the owner <see cref="P:Elektro.Application.UI.Types.ControlDragInfo.Control"/> to use when dragging it.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlDragInfo.CursorNormal">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the <see cref="P:Elektro.Application.UI.Types.ControlDragInfo.Cursor"/> of the owner <see cref="P:Elektro.Application.UI.Types.ControlDragInfo.Control"/> to use when not dragging it.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The <see cref="P:Elektro.Application.UI.Types.ControlDragInfo.Cursor"/> of the owner <see cref="P:Elektro.Application.UI.Types.ControlDragInfo.Control"/> to use when not dragging it.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlDragInfo.InitialMouseCoords">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the initial mouse coordinates, normally <see cref="P:System.Windows.Forms.Control.MousePosition"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The initial mouse coordinates, normally <see cref="P:System.Windows.Forms.Control.MousePosition"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlDragInfo.InitialLocation">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the initial <see cref="P:Elektro.Application.UI.Types.ControlDragInfo.Control"/> location, normally <see cref="P:System.Windows.Forms.Control.Location"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The initial <see cref="P:Elektro.Application.UI.Types.ControlDragInfo.Control"/> location, normally <see cref="P:System.Windows.Forms.Control.Location"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlDragInfo.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Types.ControlDragInfo"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlDragInfo.#ctor(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.ControlDragInfo"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The owner <see cref="P:Elektro.Application.UI.Types.ControlDragInfo.Control"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.ControlHintInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents a control-hint and it's personalization.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlHintInfo.HintType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the control-hint type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The control-hint type.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlHintInfo.hintTypeB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Baking field )
 The control-hint type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlHintInfo.Text">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the hint text.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The hint text.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlHintInfo.textB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Baking field )
 The hint text.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlHintInfo.Font">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the text font.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The text font.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlHintInfo.fontB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Baking field )
 The hint text.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlHintInfo.ForeColor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the text color.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The text color.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlHintInfo.#ctor(System.String,System.Drawing.Font,System.Drawing.Color,Elektro.Application.UI.Enums.ControlHintType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.ControlHintInfo"/> struct.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The hint text.
 </param>
 
 <param name="font">
 The text font.
 </param>
 
 <param name="forecolor">
 The text forecolor.
 </param>
 
 <param name="hintType">
 The control-hint type.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlHintInfo.GetType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the ddd<see cref="T:System.Type"/> of the current instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The exact runtime type of the current instance.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlHintInfo.Equals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are considered equal.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the objects are considered equal; otherwise, <see langword="False"/>.
 <para></para>
 If both <paramref name="objA"/> and <paramref name="objB"/> are <see langword="Nothing"/>, 
 the method returns <see langword="True"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlHintInfo.ReferenceEquals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are the same instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if <paramref name="objA"/> is the same instance as <paramref name="objB"/> 
 or if both are <see langword="Nothing"/>; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlHintInfo.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a String that represents the current object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A string that represents the current object.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.ControlResizer">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Enable or disable resize at runtime on a <see cref="P:Elektro.Application.UI.Types.ControlResizer.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public Class Form1 : Inherits Form
 
     Private ctrlResizer As ControlResizer = ControlResizer.Empty
 
     Private Sub Form1_Load() Handles MyBase.Load
 
         Me.Button1.MinimumSize = New Size(width:=24, height:=24)
 
         Me.ctrlResizer = New ControlResizer(Me.Button1)
         Me.ctrlResizer.Enabled = True
         Me.ctrlResizer.PixelMargin = 4
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlResizer.isLeftMouseButtonDown">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A value indicating whether the left mouse button is down.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlResizer.activeEdge">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The current active edge.
 </summary>
</member>
<member name="F:Elektro.Application.UI.Types.ControlResizer.oldCursor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The old control's cursor to restore it after resizing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlResizer.Control">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the owner <see cref="P:Elektro.Application.UI.Types.ControlResizer.Control"/> used to perform resizable operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The control.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlResizer._controlB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The owner <see cref="P:Elektro.Application.UI.Types.ControlResizer.Control"/> used to perform draggable operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlResizer.PixelMargin">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the pixel margin required to activate resize indicators.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The pixel margin required activate resize indicators.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlResizer.Enabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether resize is enabled on the owner <see cref="P:Elektro.Application.UI.Types.ControlResizer.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if resize is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlResizer.IsResizing">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value indicating whether the control is actually resizing.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the control is actually resizing; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlResizer.isResizingB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the control is actually resizing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlResizer.Empty">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents a <see cref="T:Elektro.Application.UI.Types.ControlResizer"/> instance that is <see langword="Nothing"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="Nothing"/>
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlResizer.EdgeTopEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether resize is enabled on the top edge of the owner <see cref="P:Elektro.Application.UI.Types.ControlResizer.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if resize is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlResizer.EdgeBottomEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether resize is enabled on the bottom edge of the owner <see cref="P:Elektro.Application.UI.Types.ControlResizer.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if resize is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlResizer.EdgeLeftEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether resize is enabled on the left edge of the owner <see cref="P:Elektro.Application.UI.Types.ControlResizer.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if resize is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlResizer.EdgeRightEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether resize is enabled on the right edge of the owner <see cref="P:Elektro.Application.UI.Types.ControlResizer.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if resize is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlResizer.EdgeTopLeftEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether resize is enabled on the top-left edge of the owner <see cref="P:Elektro.Application.UI.Types.ControlResizer.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if resize is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlResizer.EdgeTopRightEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether resize is enabled on the top-right edge of the owner <see cref="P:Elektro.Application.UI.Types.ControlResizer.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if resize is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlResizer.EdgeBottomLeftEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether resize is enabled on the bottom-left edge of the owner <see cref="P:Elektro.Application.UI.Types.ControlResizer.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if resize is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ControlResizer.EdgeBottomRightEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether resize is enabled on the bottom-right edge of the owner <see cref="P:Elektro.Application.UI.Types.ControlResizer.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if resize is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Application.UI.Types.ControlResizer.BeginResize">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when when the control begin to resize.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Application.UI.Types.ControlResizer.EndResize">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when when the control ends resizing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlResizer.RaiseBeginResizeEvent(System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Raises the <see cref="E:Elektro.Application.UI.Types.ControlResizer.BeginResize"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlResizer.RaiseEndResizeEvent(System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Raises the <see cref="E:Elektro.Application.UI.Types.ControlResizer.EndResize"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlResizer.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Types.ControlResizer"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlResizer.#ctor(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.ControlResizer"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlResizer.Ctrl_MouseEnter(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.MouseEnter"/> event of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlResizer.Ctrl_MouseLeave(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.MouseLeave"/> event of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlResizer.Ctrl_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlResizer.Ctrl_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary> 
 Handles the <see cref="E:System.Windows.Forms.Control.MouseUp"/> event of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlResizer.Ctrl_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlResizer.SetActiveEdge(System.Windows.Forms.MouseEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the active edge.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlResizer.SetSizeCursor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the size cursor.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlResizer.SetControlBounds(System.Windows.Forms.MouseEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the control bounds.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ControlResizer.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlResizer.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ControlResizer.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.EditControlHook">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Registers a <c>WndProc</c> hook to listen and notify about edit-menu messages of an edit-control.
 ( Copy, Cut, Paste, Delete, Undo )
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Friend WithEvents EditControlHook As New EditControlHook
 
 Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load
 
     ' Capture the Edit-Menu messages for TextBox1 and TextBox2
     Me.EditControlHook.Controls = {Me.TextBox1, Me.TextBox2}
 
     ' Enable the Hook
     Me.EditControlHook.Enabled = True
 
 End Sub
 
 Private Sub Form1_FormClosing() Handles MyBase.FormClosing
 
     Me.EditControlHook.Dispose()
 
 End Sub
 
 Private Sub EditControlHook_Copy(ByVal sender As Object, ByVal e As EventArgs) _
 Handles EditControlHook.Copy
 
     MessageBox.Show(String.Format("Text copied in control: {0}", DirectCast(sender, Control).Name))
 
 End Sub
 
 Private Sub EditControlHook_Cut(ByVal sender As Object, ByVal e As EventArgs) _
 Handles EditControlHook.Cut
 
     MessageBox.Show(String.Format("Text cutted in control: {0}", DirectCast(sender, Control).Name))
 
 End Sub
 
 Private Sub EditControlHook_Paste(ByVal sender As Object, ByVal e As EventArgs) _
 Handles EditControlHook.Paste
 
     MessageBox.Show(String.Format("Text pasted in control: {0}", DirectCast(sender, Control).Name))
 
 End Sub
 
 Private Sub EditControlHook_Delete(ByVal sender As Object, ByVal e As EventArgs) _
 Handles EditControlHook.Delete
 
     MessageBox.Show(String.Format("Text deleted in control: {0}", DirectCast(sender, Control).Name))
 
 End Sub
 
 Private Sub EditControlHook_Undo(ByVal sender As Object, ByVal e As EventArgs) _
 Handles EditControlHook.Undo
 
     MessageBox.Show(String.Format("Text undone in control: {0}", DirectCast(sender, Control).Name))
 
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.EditControlHook.hookproc">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The hook procedure.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.EditControlHook.hHook">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The handle to the hook procedure.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.EditControlHook.cwp">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The <c>CallWndProc</c> structure of the hook procedure.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.EditControlHook.isCopy">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Flag to help determine a copy message.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.EditControlHook.Controls">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the edit-controls that will notify for windows messages.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The controls.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.EditControlHook.Enabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Elektro.Application.UI.Types.EditControlHook"/> is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the hook is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.EditControlHook.enabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether this <see cref="T:Elektro.Application.UI.Types.EditControlHook"/> is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Application.UI.Types.EditControlHook.Cut">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when the text of the control is cutted.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Application.UI.Types.EditControlHook.Copy">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when the text of the control is copied.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Application.UI.Types.EditControlHook.Paste">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when the text of the control is pasted.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Application.UI.Types.EditControlHook.Delete">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when the text of the control is deleted.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Application.UI.Types.EditControlHook.Undo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when the text of the control is undone.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.EditControlHook.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.EditControlHook"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.EditControlHook.Enable">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Enables the hook.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ComponentModel.Win32Exception">
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.EditControlHook.Disable">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Disables the hook.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ComponentModel.Win32Exception">
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.EditControlHook.EditCommandHook(System.Int32,System.IntPtr,System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 An application-defined callback function used with the <see cref="M:Elektro.Interop.Win32.NativeMethods.SetWindowsHookEx(Elektro.Interop.Win32.Enums.HookType,Elektro.Interop.Win32.Delegates.HookProc,System.IntPtr,System.UInt32)"/> function.
 <para></para>
 The system calls this function before calling the window procedure to process a message sent to the thread.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="nCode">
 Specifies whether the hook procedure must process the message.
 <para></para>
 If <paramref name="nCode"/> is <c>HC_ACTION</c>, the hook procedure must process the message.
 <para></para>
 If <paramref name="nCode"/> is less than zero, 
 the hook procedure must pass the message to the <see cref="M:Elektro.Interop.Win32.NativeMethods.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,Elektro.Interop.Win32.Types.KeyboardLowLevelHookStruct@)"/> function 
 without further processing and must return the value returned by <see cref="M:Elektro.Interop.Win32.NativeMethods.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,Elektro.Interop.Win32.Types.KeyboardLowLevelHookStruct@)"/>.
 </param>
 
 <param name="wParam">
 Specifies whether the message was sent by the current thread.
 <para></para>
 If the message was sent by the current thread, it is nonzero; otherwise, it is zero. 
 </param>
 
 <param name="lParam">
 A pointer to a <see cref="T:Elektro.Interop.Win32.Types.CallWndProcStruct"/> structure that contains details about the message. 
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If <paramref name="nCode"/> is less than zero, 
 the hook procedure must return the value returned by <see cref="M:Elektro.Interop.Win32.NativeMethods.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,Elektro.Interop.Win32.Types.KeyboardLowLevelHookStruct@)"/>.
 <para></para>
 If <paramref name="nCode"/> is greater than or equal to zero, 
 it is highly recommended that you call <see cref="M:Elektro.Interop.Win32.NativeMethods.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,Elektro.Interop.Win32.Types.KeyboardLowLevelHookStruct@)"/> and 
 return the value it returns; 
 otherwise, other applications that have installed <c>WH_CALLWNDPROC</c> hooks will not 
 receive hook notifications and may behave incorrectly as a result. 
 <para></para>
 If the hook procedure does not call <see cref="M:Elektro.Interop.Win32.NativeMethods.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,Elektro.Interop.Win32.Types.KeyboardLowLevelHookStruct@)"/>, the return value should be zero. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.EditControlHook.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.EditControlHook.Finalize">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.EditControlHook.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.EditControlHook.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.FontData">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents a custom font that is not installed on the system.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim foData As New FontData(My.Resources.MyFont)
 ' Or...
 ' Dim foData As New FontData("C:\Font.tff")
 
 Dim fo As New Font(foData.FontFamily, 10.0F, FontStyle.Regular, GraphicsUnit.Point)
 
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.FontData.FontFamily">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the font.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FontData.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Types.FontData"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FontData.#ctor(System.Byte[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.FontData"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="fontData">
 The font data representing the font.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FontData.#ctor(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.FontData"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The font filepath.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.FontData.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FontData.Finalize">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FontData.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FontData.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.FormDragger">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds dragging capabilities to a single or multiple <see cref="T:System.Windows.Forms.Form"/> when clicking on they client area.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public Class Form1 : Inherits Form
 
     ''' &lt;summary&gt;
     ''' The &lt;see cref="FormDragger"/&gt; instance that manages the form(s) dragging.
     ''' &lt;/summary&gt;
     Friend FormDrag As FormDragger = FormDragger.Empty
 
     Private Sub Test() Handles MyBase.Shown
         Me.InitializeDrag()
     End Sub
 
     Private Sub InitializeDrag()
 
         ' 1st way, using the single-Form constructor:
         Me.FormDrag = New FormDragger(Me, enabled:=True, cursor:=Cursors.SizeAll)
 
         ' 2nd way, using the multiple-Forms constructor:
         ' Me.FormDrag = New FormDragger({Me, Form2, form3})
 
         ' 3rd way, using the default constructor then adding a Form into the collection:
         ' Me.FormDrag = New FormDragger
         ' Me.FormDrag.AddForm(Me, enabled:=True, cursor:=Cursors.SizeAll)
 
     End Sub
 
     ''' &lt;summary&gt;
     ''' Alternates the dragging enabled of the specified form.
     ''' &lt;/summary&gt;
     ''' &lt;param name="form">The form.&lt;/param&gt;
     Private Sub AlternateDragEnabled(ByVal form As Form)
 
         Dim formInfo As FormDragInfo = Me.FormDrag.FindFormDragInfo(form)
         formInfo.Enabled = Not formInfo.Enabled
 
     End Sub
 
     Private Sub Button1_Click(ByVal sender As Object, ByVal e As EventArgs) _
     Handles Button1.Click
 
         Me.AlternateDragEnabled(Me)
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.FormDragger.Forms">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection that contains the 
 owner Forms that can perform draggable operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.FormDragger.formsB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection that contains the 
 owner Forms that can perform draggable operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.FormDragger.Empty">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents a nul <see cref="T:Elektro.Application.UI.Types.FormDragger"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="Nothing"/>
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragger.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.FormDragger"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragger.#ctor(System.Windows.Forms.Form,System.Boolean,System.Windows.Forms.Cursor)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.FormDragger"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="form">
 The owner <see cref="T:System.Windows.Forms.Form"/> used to perform draggable operations.
 </param>
 
 <param name="enabled">
 If set to <see langword="True"/>, inmediately enables dragging on the <see cref="T:System.Windows.Forms.Form"/>.
 </param>
 
 <param name="cursor">
 The <see cref="T:System.Windows.Forms.Cursor"/> to use when dragging the <see cref="T:System.Windows.Forms.Form"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragger.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Forms.Form})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.FormDragger"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="forms">
 The owner <see cref="P:Elektro.Application.UI.Types.FormDragger.Forms"/> used to perform draggable operations.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragger.#ctor(Elektro.Application.UI.Types.FormDragInfo,System.Drawing.Point,System.Drawing.Point)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.FormDragger"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="formInfo">
 The <see cref="T:Elektro.Application.UI.Types.FormDragInfo"/> instance that contains the <see cref="T:System.Windows.Forms.Form"/> reference and its draggable info.
 </param>
 
 <param name="mouseCoordinates">
 The current mouse coordinates.
 </param>
 
 <param name="location">
 The current location.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragger.AddForm(System.Windows.Forms.Form,System.Boolean,System.Windows.Forms.Cursor)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Assigns the specified <see cref="T:System.Windows.Forms.Form"/> as a draggable element.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="form">
 The <see cref="T:System.Windows.Forms.Form"/>.
 </param>
 
 <param name="enabled">
 If set to <see langword="True"/>, inmediatelly enables dragging on the <see cref="T:System.Windows.Forms.Form"/>.
 </param>
 
 <param name="cursor">
 The <see cref="T:System.Windows.Forms.Cursor"/> to use when dragging the <see cref="T:System.Windows.Forms.Form"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 The specified form is already added.;form
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragger.AddControl(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Assigns the specified <see cref="T:System.Windows.Forms.Control"/> as a draggable element.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 The parent form of the control is not handled.;ctrl
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragger.AddControls(System.Windows.Forms.Control[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Assigns the specified controls as draggable elements of they parents <see cref="T:System.Windows.Forms.Form"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 An array of <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 The parent form of the control is not handled.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragger.RemoveForm(System.Windows.Forms.Form)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes the specified <see cref="T:System.Windows.Forms.Form"/> from the draggable elements.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="form">
 The <see cref="T:System.Windows.Forms.Form"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 The specified form is not found.;form
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragger.RemoveControl(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes the specified <see cref="T:System.Windows.Forms.Control"/> from the draggable elements.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragger.RemoveControls(System.Windows.Forms.Control[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes the specified controls from the draggable elements.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 An array of <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragger.FindFormDragInfo(System.Windows.Forms.Form)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Finds the <see cref="T:Elektro.Application.UI.Types.FormDragInfo"/> instance that is associated with the specified <see cref="T:System.Windows.Forms.Form"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="form">
 The <see cref="T:System.Windows.Forms.Form"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The <see cref="T:Elektro.Application.UI.Types.FormDragInfo"/> instance that is associated with the specified <see cref="T:System.Windows.Forms.Form"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragger.FindFormDragInfo(System.String,System.StringComparison)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Finds the <see cref="T:Elektro.Application.UI.Types.FormDragInfo"/> instance that is associated with the specified <see cref="T:System.Windows.Forms.Form"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="formName">
 The name of the <see cref="T:System.Windows.Forms.Form"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The <see cref="T:Elektro.Application.UI.Types.FormDragInfo"/> instance that is associated with the specified <see cref="T:System.Windows.Forms.Form"/> .
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragger.FindFormDragInfo(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Finds the <see cref="T:Elektro.Application.UI.Types.FormDragInfo"/> instance that is associated with the specified <see cref="T:System.Windows.Forms.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 A <see cref="T:System.Windows.Forms.Control"/> that is hosted by the <see cref="T:System.Windows.Forms.Form"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The <see cref="T:Elektro.Application.UI.Types.FormDragInfo"/> instance that is associated with the specified <see cref="T:System.Windows.Forms.Control"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragger.AddHandlers(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds the <see cref="T:System.Windows.Forms.Control"/> handlers to enable draggable operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragger.RemoveHandlers(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes the <see cref="T:System.Windows.Forms.Control"/> handlers to disable draggable operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The <see cref="T:System.Windows.Forms.Control"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragger.GetNewLocation(Elektro.Application.UI.Types.FormDragInfo,System.Drawing.Point)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Return the new form location.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="formInfo">
 The <see cref="T:Elektro.Application.UI.Types.FormDragInfo"/> instance that contains the <see cref="T:System.Windows.Forms.Form"/> instance and its info.
 </param>
 
 <param name="currentLocation">
 The current form location.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The new form location.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragger.FindFormDragInfo(System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Finds the <see cref="T:Elektro.Application.UI.Types.FormDragInfo"/> instance that is associated with the specified <see cref="T:System.Windows.Forms.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 An <see cref="T:System.Object"/> of type <see cref="T:System.Windows.Forms.Form"/>, 
 or type <see cref="T:System.Windows.Forms.Control"/> that is hosted by the <see cref="T:System.Windows.Forms.Form"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The <see cref="T:Elektro.Application.UI.Types.FormDragInfo"/> instance that is associated with the specified <see cref="T:System.Object"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Invalid type.;sender
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragger.Element_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event of the owner forms.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragger.Element_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.MouseUp"/> event of the owner forms.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragger.Element_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event of the owner forms.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.FormDragger.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragger.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragger.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.FormDragInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Defines the draggable info of a <see cref="T:Elektro.Application.UI.Types.FormDragger"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.FormDragInfo.Form">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the owner <see cref="P:Elektro.Application.UI.Types.FormDragInfo.Form"/> that is used to perform draggable operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The owner <see cref="P:Elektro.Application.UI.Types.FormDragInfo.Form"/> that is used to perform draggable operations.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.FormDragInfo.formB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The owner <see cref="P:Elektro.Application.UI.Types.FormDragInfo.Form"/> that is used to perform draggable operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.FormDragInfo.Name">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the name of the owner <see cref="P:Elektro.Application.UI.Types.FormDragInfo.Form"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The name of the owner <see cref="P:Elektro.Application.UI.Types.FormDragInfo.Form"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.FormDragInfo.Enabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether drag is enabled on the owner <see cref="P:Elektro.Application.UI.Types.FormDragInfo.Form"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if drag is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.FormDragInfo.DragInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the <see cref="T:Elektro.Application.UI.Types.FormDragger"/> instance of the owner <see cref="P:Elektro.Application.UI.Types.FormDragInfo.Form"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The <see cref="T:Elektro.Application.UI.Types.FormDragger"/> instance of the owner <see cref="P:Elektro.Application.UI.Types.FormDragInfo.Form"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.FormDragInfo.Cursor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the <see cref="P:Elektro.Application.UI.Types.FormDragInfo.Cursor"/> of the owner <see cref="P:Elektro.Application.UI.Types.FormDragInfo.Form"/> to use when dragging it.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The <see cref="P:Elektro.Application.UI.Types.FormDragInfo.Cursor"/> of the owner <see cref="P:Elektro.Application.UI.Types.FormDragInfo.Form"/> to use when dragging it.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.FormDragInfo.CursorNormal">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the <see cref="P:Elektro.Application.UI.Types.FormDragInfo.Cursor"/> of the owner <see cref="P:Elektro.Application.UI.Types.FormDragInfo.Form"/> to use when not dragging it.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The <see cref="P:Elektro.Application.UI.Types.FormDragInfo.Cursor"/> of the owner <see cref="P:Elektro.Application.UI.Types.FormDragInfo.Form"/> to use when not dragging it.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.FormDragInfo.InitialMouseCoords">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the initial mouse coordinates, normally <see cref="P:System.Windows.Forms.Control.MousePosition"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The initial mouse coordinates, normally <see cref="P:System.Windows.Forms.Control.MousePosition"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.FormDragInfo.InitialLocation">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the initial <see cref="P:Elektro.Application.UI.Types.FormDragInfo.Form"/> location, normally <see cref="P:System.Windows.Forms.Control.Location"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The initial <see cref="P:Elektro.Application.UI.Types.FormDragInfo.Form"/> location, normally <see cref="P:System.Windows.Forms.Control.Location"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragInfo.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Types.FormDragInfo"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.FormDragInfo.#ctor(System.Windows.Forms.Form)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.FormDragInfo"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="form">
 The owner <see cref="P:Elektro.Application.UI.Types.FormDragInfo.Form"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.ListViewColumnSorter">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs a sorting operation in a <see cref="T:System.Windows.Forms.ListView"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public Class Form1 : Inherits Form
 
     Friend WithEvents MyListView As New ListView
     Private sorter As New ListViewColumnSorter
 
     Public Sub New()
 
         MyClass.InitializeComponent()
 
         With Me.MyListView
 
             ' Set the sorter, our ListViewColumnSorter.
             .ListViewItemSorter = sorter
 
             ' The initial direction for the sorting.
             .Sorting = SortOrder.Ascending
 
             ' Set the initial sort-modifier.
             sorter.SortModifier = SortModifiers.SortByText
 
             ' Add some columns.
             .Columns.Add("Text").Tag = SortModifiers.SortByText
             .Columns.Add("Numbers").Tag = SortModifiers.SortByNumber
             .Columns.Add("Dates").Tag = SortModifiers.SortByDate
 
             ' Adjust the column sizes.
             For Each col As ColumnHeader In Me.MyListView.Columns
                 col.Width = 100
             Next
 
             ' Add some items.
             .Items.Add("hello").SubItems.AddRange({"2", "11/11/2000"})
             .Items.Add("yeehaa!").SubItems.AddRange({"1", "9/9/1999"})
             .Items.Add("El3ktr0").SubItems.AddRange({"100", "21/08/2014"})
             .Items.Add("wow").SubItems.AddRange({"10", "11-11-2000"})
 
             ' Styling things.
             .Dock = DockStyle.Fill
             .View = View.Details
             .FullRowSelect = True
         End With
 
         With Me ' Styling things.
             .Size = New Size(400, 200)
             .FormBorderStyle = Global.System.Windows.Forms.FormBorderStyle.FixedSingle
             .MaximizeBox = False
             .StartPosition = FormStartPosition.CenterScreen
             .Text = "ListViewColumnSorter TestForm"
         End With
 
         Me.Controls.Add(Me.MyListView)
 
     End Sub
 
     ''' ----------------------------------------------------------------------------------------------------
     ''' &lt;summary&gt;
     ''' Handles the &lt;see cref="ListView.ColumnClick"/&gt; event of the &lt;see cref="MyListView"/&gt; control.
     ''' &lt;/summary&gt;
     ''' ----------------------------------------------------------------------------------------------------
     ''' &lt;param name="sender"&gt;
     ''' The source of the event.
     ''' &lt;/param&gt;
     ''' 
     ''' &lt;param name="e"&gt;
     ''' The &lt;see cref="ColumnClickEventArgs"/&gt; instance containing the event data.
     ''' &lt;/param&gt;
     ''' ----------------------------------------------------------------------------------------------------
     Private Sub MyListView_ColumnClick(ByVal sender As Object, ByVal e As ColumnClickEventArgs) _
     Handles MyListView.ColumnClick
 
         Dim lv As ListView = DirectCast(sender, ListView)
 
         ' Dinamycaly sets the sort-modifier to sort the column by text, number, or date.
         sorter.SortModifier = DirectCast(lv.Columns(e.Column).Tag, SortModifiers)
 
         ' Determine whether clicked column is already the column that is being sorted.
         If (e.Column = sorter.ColumnIndex) Then
 
             ' Reverse the current sort direction for this column.
             If (sorter.Order = SortOrder.Ascending) Then
                 sorter.Order = SortOrder.Descending
 
             Else
                 sorter.Order = SortOrder.Ascending
 
             End If
 
         Else
             ' Set the column number that is to be sorted, default to ascending.
             sorter.ColumnIndex = e.Column
             sorter.Order = SortOrder.Ascending
 
         End If ' e.Column
 
         ' Perform the sort.
         lv.Sort()
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ListViewColumnSorter.comparer">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The comparer instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ListViewColumnSorter.ColumnIndex">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the index of the column to which to apply the sorting operation (default index is <c>0</c>).
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The index of the column to which to apply the sorting operation (default index is <c>0</c>).
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ListViewColumnSorter.columnIndexB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The index of the column to which to apply the sorting operation (default index is <c>0</c>).
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ListViewColumnSorter.Order">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the order of sorting to apply.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The order of sorting to apply.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ListViewColumnSorter.orderB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The order of sorting to apply.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.ListViewColumnSorter.SortModifier">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the sort modifier.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The sort modifier.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.ListViewColumnSorter.sortModifierB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The sort modifier.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ListViewColumnSorter.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.ListViewColumnSorter"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.ListViewColumnSorter.Compare(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="a">
 The first object to compare.
 </param>
 
 <param name="b">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A signed integer that indicates the relative values of <paramref name="a"/> and <paramref name="b"/>.
 <para></para>
 0: <paramref name="a"/> equals <paramref name="b"/>.
 <para></para>
 Less than 0: <paramref name="a"/> is less than <paramref name="b"/>.
 <para></para>
 Greater than 0: <paramref name="a"/> is greater than <paramref name="b"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.EventArgs.MenuItemClickedEventArgs">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains the event-data of <see cref="E:Elektro.Application.UI.Types.SystemMenuManager.MenuItemClicked"/> events.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.EventArgs.MenuItemClickedEventArgs.Id">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the item identifier.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The item identifier.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.EventArgs.MenuItemClickedEventArgs.idB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 Gets the item identifier.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.EventArgs.MenuItemClickedEventArgs.Text">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the item text.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The item text.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.EventArgs.MenuItemClickedEventArgs.textB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 Gets the item text.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.EventArgs.MenuItemClickedEventArgs.Type">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the item type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The item type.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.EventArgs.MenuItemClickedEventArgs.typeB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 Gets the item type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.EventArgs.MenuItemClickedEventArgs.State">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the item state.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The item state.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.EventArgs.MenuItemClickedEventArgs.stateB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 Gets the item state.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.EventArgs.MenuItemClickedEventArgs.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Types.EventArgs.MenuItemClickedEventArgs"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.EventArgs.MenuItemClickedEventArgs.#ctor(System.Int32,System.String,Elektro.Interop.Win32.Enums.MenuItemType,Elektro.Interop.Win32.Enums.MenuItemState)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.EventArgs.MenuItemClickedEventArgs"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="id">
 The item identifier.
 </param>
 
 <param name="text">
 The item text.
 </param>
 
 <param name="type">
 The item type.
 </param>
 
 <param name="state">
 The item state.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.NonClientAreaMargins">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Defines the margins of the non-client area of a window.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.NonClientAreaMargins.LeftWidth">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the left margin width, in pixels.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The left margin width, in pixels.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.NonClientAreaMargins.leftWidthB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The left margin width, in pixels.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.NonClientAreaMargins.RightWidth">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the right margin width, in pixels.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The right margin width, in pixels.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.NonClientAreaMargins.rightWidthB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The right margin width, in pixels.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.NonClientAreaMargins.TopHeight">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the top margin height, in pixels.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The top margin height, in pixels.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.NonClientAreaMargins.topHeightB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The top margin height, in pixels.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.NonClientAreaMargins.BottomHeight">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the bottom margin height, in pixels.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The bottom margin height, in pixels.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.NonClientAreaMargins.bottomHeightB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The bottom margin height, in pixels.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.NonClientAreaMargins.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.NonClientAreaMargins"/> structure.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="leftWidth">
 The left margin width, in pixels.
 </param>
 
 <param name="rightWidth">
 The right margin width, in pixels.
 </param>
 
 <param name="topHeight">
 The top margin height, in pixels.
 </param>
 
 <param name="bottomHeight">
 The bottom margin height, in pixels.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.NonClientAreaMargins.GetType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the ddd<see cref="T:System.Type"/> of the current instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The exact runtime type of the current instance.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.NonClientAreaMargins.Equals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are considered equal.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the objects are considered equal; otherwise, <see langword="False"/>.
 <para></para>
 If both <paramref name="objA"/> and <paramref name="objB"/> are <see langword="Nothing"/>, 
 the method returns <see langword="True"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.NonClientAreaMargins.ReferenceEquals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are the same instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if <paramref name="objA"/> is the same instance as <paramref name="objB"/> 
 or if both are <see langword="Nothing"/>; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.NonClientAreaMargins.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a String that represents the current object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A string that represents the current object.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.SplashForm">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Simulates a SplashScreen using an alpha-blend Form.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Private Sub Test() Handles MyBase.Load
 
     ' Hide this form.
     With Me
         Me.Size = New Size(0, 0)
         Me.Hide()
     End With
 
     ' show the SplahForm.
     Using splashForm As New SplashForm(New Bitmap("C:\Image.png"))
         splashForm.Opacity = 255
         splashForm.TimeOut = 2500
         splashForm.DragEnabled = True
         splashForm.ShowDialog()
     End Using
 
     ' Restore this form.
     With Me
         Me.Size = New Size(640, 480)
         Me.Show()
     End With
 
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.SplashForm.formLayer">
 <summary>
 The <see cref="T:System.Windows.Forms.Form"/> to display the image.
 </summary>
</member>
<member name="P:Elektro.Application.UI.Types.SplashForm.Image">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the image to show.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The image to show.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.SplashForm.Opacity">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the image opacity.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The image opacity.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.SplashForm.DragEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the image is draggable.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the image is draggable; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.SplashForm.TimeOut">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the timeout to auto-close the image, in milliseconds.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The timeout to auto-close the image, in milliseconds.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SplashForm.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Types.SplashForm"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SplashForm.#ctor(System.Drawing.Bitmap)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.SplashForm"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="bmp">
 The image to show.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SplashForm.#ctor(System.Drawing.Image)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.SplashForm"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="img">
 The image to show.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SplashForm.Show">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays the image.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SplashForm.ShowDialog">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays the image as a modal dialog box.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.SplashForm.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SplashForm.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this <see cref="T:Elektro.Application.UI.Types.SplashForm"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SplashForm.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.SplashFormLayer">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The <see cref="T:System.Windows.Forms.Form"/> layer that shows an image for a <see cref="T:Elektro.Application.UI.Types.SplashForm"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.SplashFormLayer.AcSrcOver">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The bitmap is placed over the destination bitmap based on the alpha values of the source pixels.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd183393%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.SplashFormLayer.AcSrcAlpha">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The bitmap has an Alpha channel (that is, per-pixel alpha).
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd183393%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.SplashFormLayer._CloseTimer">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A Timer to auto-close the <see cref="T:Elektro.Application.UI.Types.SplashForm"/> at the specified interval.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.SplashFormLayer.CreateParams">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Encapsulates the information needed when creating a control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.Windows.Forms.CreateParams"/> that contains the required creation parameters 
 when the handle to the control is created.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.SplashFormLayer.Image">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the image to show.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The image to show.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.SplashFormLayer.Opacity">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the image opacity.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The image opacity.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.SplashFormLayer.DragEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the image is draggable.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the image is draggable; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.SplashFormLayer.TimeOut">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the timeout to close the Form, in milliseconds.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>The timeout to close the Form, in milliseconds.</value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SplashFormLayer.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Types.SplashFormLayer"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SplashFormLayer.#ctor(System.Drawing.Image,System.Byte,System.Int32,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.SplashFormLayer"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="img">
 The image to show.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SplashFormLayer.FormSplash_Load">
 <summary>
 Handles the Load event of the Form.
 </summary>
</member>
<member name="M:Elektro.Application.UI.Types.SplashFormLayer.Timer1_Tick">
 <summary>
 Handles the 'Tick' event of the 'CloseTimer' control.
 </summary>
</member>
<member name="M:Elektro.Application.UI.Types.SplashFormLayer.SetBitmap">
 <summary>
 Sets the img on the Form.
 </summary>
</member>
<member name="M:Elektro.Application.UI.Types.SplashFormLayer.WndProc(System.Windows.Forms.Message@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Invokes the default window procedure associated with this window to process windows messages.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="m">
 A <see cref="T:System.Windows.Forms.Message"/> that is associated with the current Windows message.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.SystemMenuManager">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Manages the system menu of a window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public Class Form1 : Inherits Form
 
     Friend WithEvents SystemMenu As New Global.SystemMenuManager(Me)
 
     Private Shadows Sub Shown() Handles MyBase.Shown
 
         ' Disable the menu
         SystemMenu.MenuEnabled = False
 
         ' Enable the menu
         SystemMenu.MenuEnabled = True
 
         ' Gets the total amount of menu items.
         MsgBox(SystemMenu.GetItemCount())
 
         ' Sets the menu background color.
         SystemMenu.SetMenuBackColor(Color.Teal)
 
         ' Sets the menu style.
         SystemMenu.SetMenuStyle(MenuStyle.AutoDismis)
 
         ' Sets the state of the Close button and menu item.
         SystemMenu.SetItemState(MenuItem.Close, MenuItemState.Disabled)
 
         ' Sets the Bitmap image of the Move menu item.
         'SystemMenu.SetItemBitmap(MenuItem.Move, New Bitmap("C:\File.png"))
 
         ' Gets the Bitmap image of the Move menu item.
         Dim bmp As Bitmap = SystemMenu.GetItemBitmap(MenuItem.Move)
 
         ' Removes the Bitmap image of the Move menu item.
         SystemMenu.RemoveItemBitmap(MenuItem.Move)
 
         ' Gets the ID of an item.
         MsgBox(SystemMenu.GetItemState(MenuItem.Move).ToString)
 
         ' Gets the text of an item.
         MsgBox(SystemMenu.GetItemText(MenuItem.Move))
 
         ' Gets the state of an item.
         MsgBox(SystemMenu.GetItemState(MenuItem.Move).ToString)
 
         ' Sets the text of an item.
         SystemMenu.SetItemText(MenuItem.Move, "Muéveme")
 
         ' Checks if a handle is a menu handle.
         MsgBox(SystemMenuManager.IsMenu(IntPtr.Zero))
 
         ' Remove all the menu items.
         'SystemMenu.ClearMenu()
 
         ' Restore the menu to defaults.
         'SystemMenu.RestoreMenu()
 
         ' Dispose the SystemMenuManager Object.
         'SystemMenu.Dispose()
 
     End Sub
 
     Private Sub SystemMenu_MenuItemClicked(ByVal sender As Object, ByVal e As MenuItemClickedEventArgs) _
     Handles SystemMenu.MenuItemClicked
 
         Dim sb As New Global.System.Text.StringBuilder
         With sb
             .AppendLine(String.Format("Menu handle: {0}", DirectCast(sender, IntPtr).ToInt32))
             .AppendLine(String.Format("Item ID    : {0}", CStr(e.Id)))
             .AppendLine(String.Format("Item Text  : {0}", e.Text))
             .AppendLine(String.Format("Item Type  : {0}", e.Type.ToString))
             .AppendLine(String.Format("Item State : {0}", e.State.ToString))
         End With
 
         Console.WriteLine(sb.ToString, "SystemMenuManager", MessageBoxButtons.OK, MessageBoxIcon.Information)
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.SystemMenuManager.menuHandle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The handle of the window's system menu.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.SystemMenuManager.menuBrush">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A brush used to paint the menu background.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.SystemMenuManager.closeItemState">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The State of the Close item.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.SystemMenuManager.itemStates">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Stores the current state of each default menu item.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.SystemMenuManager.itemBitmaps">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Stores the Bitmap image of each default menu item.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.SystemMenuManager.positionItemStates">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Stores the current state of each menu item specified by position.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.SystemMenuManager.positionItemBitmaps">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Stores the Bitmap image of each menu item specified by position.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.SystemMenuManager.OwnerWindow">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the window that owns this <see cref="T:Elektro.Application.UI.Types.SystemMenuManager"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The window.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.SystemMenuManager.ownerWindowB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The window that owns this <see cref="T:Elektro.Application.UI.Types.SystemMenuManager"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.SystemMenuManager.Handle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the handle for the window that owns this <see cref="T:Elektro.Application.UI.Types.SystemMenuManager"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The handle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.SystemMenuManager.MenuEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the system menu of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the system menu is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.SystemMenuManager.menuEnabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the system menu of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Application.UI.Types.SystemMenuManager.MenuItemClicked">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when a menu item is clicked.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Types.SystemMenuManager"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.#ctor(System.Windows.Forms.IWin32Window)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.SystemMenuManager"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="window">
 The <see cref="T:System.Windows.Forms.IWin32Window"/> window that owns this instance (eg. a <see cref="T:System.Windows.Forms.Form"/> window).
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.IsMenu(System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a handle is a menu handle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if is a menu handle, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.GetItemCount">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the amount of items in the system menu.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The amount of items in the system menu.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.RestoreMenu">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Restores the system menu to defaults.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.SetItemText(System.Int32,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Set the text of a menu item at given position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="position">
 The menu item position.
 </param>
 
 <param name="text">
 The new text for the item.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.SetItemText(Elektro.Interop.Win32.Enums.MenuItem,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Set the text of a menu item.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="item">
 The menu item.
 </param>
 
 <param name="text">
 The new text for the item.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.SetItemState(Elektro.Interop.Win32.Enums.MenuItem,Elektro.Interop.Win32.Enums.MenuItemState)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Set an state for a menu item.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="item">
 The system menu item.
 </param>
 
 <param name="state">
 The new state for the item.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.SetItemState(System.Int32,Elektro.Interop.Win32.Enums.MenuItemState)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Set an state for a menu item at given position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="position">
 The menu item position.
 </param>
 
 <param name="state">
 The new state for the item.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.SetItemBitmap(Elektro.Interop.Win32.Enums.MenuItem,System.Drawing.Bitmap)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Set a custom Bitmap image for a menu item.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="item">
 The menu item.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.SetItemBitmap(System.Int32,System.Drawing.Bitmap)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Set a custom Bitmap image for a menu item at given position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="position">
 The menu item position.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.GetItemBitmap(Elektro.Interop.Win32.Enums.MenuItem)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns the custom Bitmap image used by a menu item.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="item">
 The menu item.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The <see cref="T:System.Drawing.Bitmap"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.GetItemBitmap(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns the custom Bitmap image used by a menu item at given position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="position">
 The menu item position.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The <see cref="T:System.Drawing.Bitmap"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.RemoveItemBitmap(Elektro.Interop.Win32.Enums.MenuItem)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes the custom Bitmap image used by a menu item.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="item">
 The menu item.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.RemoveItemBitmap(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes the custom Bitmap image used by a menu item at given position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="position">
 The menu item position.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.AddSeparator(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Add a separator at given position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="position">
 The position where the item will be added.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.AddItem(System.String,System.Int32,System.Int32,System.Drawing.Bitmap,System.Drawing.Bitmap)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds an Item at the given position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="label">
 The text of the item.
 </param>
 
 <param name="id">
 A Identifier to interact with this item when is clicked.
 </param>
 
 <param name="position">
 The position where the item will be added.
 </param>
 
 <param name="imageChecked">
 Image displayed when Item is selected.
 </param>
 
 <param name="imageUnchecked">
 Image displayed when Item is not selected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.GetItemID(Elektro.Interop.Win32.Enums.MenuItem)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the Id of a menu item.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The item Id.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.GetItemID(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the Id of a menu item at given position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The item Id.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.GetItemText(Elektro.Interop.Win32.Enums.MenuItem)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the text of a menu item.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The item text.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.GetItemText(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the text of a menu item at given position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The item text.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.GetItemState(Elektro.Interop.Win32.Enums.MenuItem)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the state of a menu item.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The item state.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.GetItemState(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the state of a menu item at given position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The item state.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.SetMenuBackColor(System.Drawing.Color)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Set the background color of a menu.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.SetMenuStyle(Elektro.Interop.Win32.Enums.MenuStyle)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Set the menu style.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.ClearMenu">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes all the menu items.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.EnableAllItems">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Enables all the menu items.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.DisableAllItems">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Disables all the menu items.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.WndProc(System.Windows.Forms.Message@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Invokes the default window procedure associated with this window to process windows messages.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="m">
 A <see cref="T:System.Windows.Forms.Message"/> that is associated with the current Windows message.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.SystemMenuManager.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.Finalize">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.SystemMenuManager.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.DwmPreviewManager">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Manages the images that will be used to display a thumbnail preview or peek preview for the specified window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Friend WithEvents DwmPreview As DwmPreviewManager
 
 Private Sub Form1_Shown() Handles MyBase.Shown
 
     Me.DwmPreview = New DwmPreviewManager(Me)
 
     Using thumbnailImage As Bitmap = DirectCast(Bitmap.FromFile("C:\Image1.jpg"), Bitmap)
         Me.DwmPreview.ThumbnailImage = thumbnailImage
     End Using
 
     Using peekImage As Bitmap = DirectCast(Bitmap.FromFile("C:\Image2.jpg"), Bitmap)
         Me.DwmPreview.PeekImage = peekImage
     End Using
 
 End Sub
 
 Private Sub DwmPreview_ThumbnailPreviewRequested(ByVal sender As Object, ByVal e As EventArgs) _
 Handles DwmPreview.ThumbnailPreviewRequested
     ' Do something here...
 End Sub
 
 Private Sub DwmPreview_PeekPreviewRequested(ByVal sender As Object, ByVal e As EventArgs) _
 Handles DwmPreview.PeekPreviewRequested
     ' Do something here...
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.DwmPreviewManager.OwnerWindow">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the window that owns this <see cref="T:Elektro.Application.UI.Types.DwmPreviewManager"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The window.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.DwmPreviewManager.ownerWindowB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The window that owns this <see cref="T:Elektro.Application.UI.Types.DwmPreviewManager"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.DwmPreviewManager.Handle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the handle for the window that owns this <see cref="T:Elektro.Application.UI.Types.DwmPreviewManager"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The handle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.DwmPreviewManager.ThumbnailImage">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the image that will be used to display a thumbnail preview of the current Window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The image that will be used to display a thumbnail preview of the current Window.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.DwmPreviewManager.thumbnailImageB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The image that will be used to display a thumbnail preview of the current Window.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.DwmPreviewManager.PeekImage">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the image that will be used to display a peek preview of the current Window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The image that will be used to display a peek preview of the current Window.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.DwmPreviewManager.peekImageB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The image that will be used to display a peek preview of the current Window.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Application.UI.Types.DwmPreviewManager.ThumbnailPreviewRequested">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when Windows requested to display a thumbnail preview on the Taskbar 
 or window manager (<c>ALT+TAB</c>) menu.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Application.UI.Types.DwmPreviewManager.PeekPreviewRequested">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when Windows requested to display a live (<c>Aero Peek</c>) preview on the Taskbar 
 or window manager (<c>ALT+TAB</c>) menu.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.DwmPreviewManager.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Types.DwmPreviewManager"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.DwmPreviewManager.#ctor(System.Windows.Forms.IWin32Window)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.DwmPreviewManager"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="window">
 The <see cref="T:System.Windows.Forms.IWin32Window"/> window that owns this instance (eg. a <see cref="T:System.Windows.Forms.Form"/> window).
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.DwmPreviewManager.SetDwmWindowAttribute(Elektro.Interop.Win32.Enums.DwmWindowAttribute,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets a Desktop Window Manager (DWM) attribute on the current window.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.DwmPreviewManager.SetThumbnailImage(System.Drawing.Size)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the thumbnail preview image.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="size">
 The thumbnail size.
 <para></para>
 The size can't exceed the maximum allowed size that is specified 
 in the <c>HIWORD</c> (max. image width) and <c>LOWORD</c> (max. image height) values 
 of the <see cref="P:System.Windows.Forms.Message.LParam"/> parameter of <see cref="F:Elektro.Interop.Win32.Enums.WindowsMessages.WM_DwmSendIconicThumbnail"/> message.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.DwmPreviewManager.SetPeekImage">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the peek preview image.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.DwmPreviewManager.RefreshImages">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Refreshes the thumbnail and peek representations in Desktop Window Manager (DWM).
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.DwmPreviewManager.OnThumbnailPreviewRequested(System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Raises the <see cref="E:Elektro.Application.UI.Types.DwmPreviewManager.ThumbnailPreviewRequested"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:System.EventArgs"/> that contains the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.DwmPreviewManager.OnPeekPreviewRequested(System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Raises the <see cref="E:Elektro.Application.UI.Types.DwmPreviewManager.PeekPreviewRequested"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:System.EventArgs"/> that contains the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.DwmPreviewManager.WndProc(System.Windows.Forms.Message@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Invokes the default window procedure associated with this window to process windows messages.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="m">
 A <see cref="T:System.Windows.Forms.Message"/> that is associated with the current Windows message.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.DwmPreviewManager.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.DwmPreviewManager.Finalize">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.DwmPreviewManager.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.DwmPreviewManager.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.TransparentControlsForm">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A transparent <see cref="T:System.Windows.Forms.Form"/> designed to host controls.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public Class Form1 : Inherits Form
 
     ' Our Transparent Form.
     Protected WithEvents frm As TransparentControlsForm
 
     ' Our controls.
     Friend WithEvents tb1 As New TextBox With {.Text = "Elektro-Test 1"}
     Friend WithEvents tb2 As New TextBox With {.Text = "Elektro-Test 2"}
     Friend WithEvents cb1 As New CheckBox With {.Text = "Elektro-Test 3", .FlatStyle = FlatStyle.Flat}
 
 #Region " Event Handlers "
 
     ''' &lt;summary&gt;
     ''' Handles the Shown event of the Form.
     ''' &lt;/summary&gt;
     Private Shadows Sub Shown(ByVal sender As Object, ByVal e As EventArgs) _
     Handles MyBase.Shown
 
         ' Set the Control locations.
         tb1.Location = New Point(5, 5)
         tb2.Location = New Point(tb1.Location.X, tb1.Location.Y + CInt(tb1.Height * 1.5R))
         cb1.Location = New Point(tb2.Location.X, tb2.Location.Y + CInt(tb2.Height * 1.5R))
 
         ' Instance the Form that will store our controls.
         If frm Is Nothing Then
             frm = New TransparentControlsForm({tb1, tb2, cb1},
                        New Point(Me.Bounds.Right, Me.Bounds.Top))
         End If
 
         With frm
             .Moveable = True ' Set the Controls moveable.
             .Show() ' Display the transparent Form.
         End With
 
     End Sub
 
 #End Region
 
 #Region " Textbox's Event Handlers "
 
     ''' &lt;summary&gt;
     ''' Handles the TextChanged event of the TextBox controls.
     ''' &lt;/summary&gt;
     ''' &lt;param name="sender"&gt;The source of the event.&lt;/param&gt;
     ''' &lt;param name="e"&gt;The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.&lt;/param&gt;
     Friend Sub tb_textchanged(ByVal sender As Object, ByVal e As KeyPressEventArgs) _
     Handles tb1.KeyPress, tb2.KeyPress, cb1.KeyPress
 
         ' Just a crazy message-box to interact with the raised event.
         MessageBox.Show("I'm gonna do this control disappear!", "",
                         MessageBoxButtons.OK, MessageBoxIcon.Stop)
 
         e.Handled = True
 
         ' Searchs the ControlsForm
         Dim f As Form = DirectCast(sender, Control).FindForm
 
         ' ...And close it
         f.Hide()
 
     End Sub
 
 #End Region
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.TransparentControlsForm.moveableIsHandled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Indicates whether the moveable events are handled
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.TransparentControlsForm.moveFormFlag">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Boolean Flag that indicates whether the Form should be moved.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.TransparentControlsForm.moveFormPosition">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The position where to move the form.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.TransparentControlsForm.Moveable">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Elektro.Application.UI.Types.TransparentControlsForm"/> and it's controls are movable.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if controls are movable; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.TransparentControlsForm.moveableB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether this <see cref="T:Elektro.Application.UI.Types.TransparentControlsForm"/> and it's controls are movable.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.TransparentControlsForm.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Types.TransparentControlsForm"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.TransparentControlsForm.#ctor(System.Windows.Forms.Control[],System.Drawing.Point)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.TransparentControlsForm"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="controls">
 The control array to display in the Form.
 </param>
 
 <param name="formLocation">
 The default Formulary location.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.TransparentControlsForm.#ctor(System.Windows.Forms.Control,System.Drawing.Point)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.TransparentControlsForm"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="control">
 The control to display in the Formulary.
 </param>
 
 <param name="formLocation">
 The default Formulary location.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.TransparentControlsForm.MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="M:Elektro.Application.UI.Types.TransparentControlsForm.MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)"/> event of the Form and it's controls.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.TransparentControlsForm.MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="M:Elektro.Application.UI.Types.TransparentControlsForm.MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)"/> event of the Form and it's controls.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.TransparentControlsForm.MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="M:Elektro.Application.UI.Types.TransparentControlsForm.MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)"/> event of the Form and it's controls.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.UndoRedo`1">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The base of a Undo/Redo mechanism for a <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of control.
 </typeparam>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedo`1.undoStack">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The stack that keeps items to be undone.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedo`1.redoStack">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The stack that keeps items to be redone.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.UndoRedo`1.Control">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The control.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedo`1._controlB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.UndoRedo`1.CanUndo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value indicating whether this instance can perform a undo operation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if can undo; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.UndoRedo`1.CanRedo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value indicating whether this instance can perform a redo operation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if can redo; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.UndoRedo`1.IsUndoing">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value indicating whether this instance is currently performing a undo operation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if is undoing; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedo`1.isUndoingB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether this instance is currently performing a undo operation.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.UndoRedo`1.IsRedoing">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value indicating whether this instance is currently performing a redo operation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if is redoing; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedo`1.isRedoingB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether this instance is currently performing a redo operation.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedo`1.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Types.UndoRedo`1"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedo`1.#ctor(`0)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.UndoRedo`1"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedo`1.Undo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs a undo operation.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedo`1.Redo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs a redo operation.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedo`1.InternalUndoRedo(Elektro.Application.UI.Enums.UndoRedoCommand)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs a undo or redo operation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="command">
 The undo/redo command.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedo`1.AddUndoRedoItem(Elektro.Application.UI.Enums.UndoRedoCommand,System.Int32,System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds a undo or redo item.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="command">
 The undo/redo command.
 </param>
 
 <param name="event">
 The control event that reffers to the data.
 </param>
 
 <param name="currentData">
 The current data on the control.
 </param>
 
 <param name="lastData">
 The last saved data on the control.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedo`1.RestoreData(System.Int32,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Restores the specified data on the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="event">
 The control event that reffers to the data being restored.
 </param>
 
 <param name="data">
 The data to restore.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedo`1.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedo`1.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedo`1.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.UndoRedoCheckBox">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Undo/Redo mechanism for a <see cref="T:System.Windows.Forms.CheckBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public NotInheritable Class Form1 : Inherits Form
 
     Private undoRedo As UndoRedoCheckBox
 
     Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) _
     Handles MyBase.Load
 
         Me.undoRedo = New UndoRedoCheckBox(Me.CheckBox1) With {
             .Events = UndoRedoCheckBoxEvents.CheckedChanged
         }
 
     End Sub
 
     Private Sub Button1_Click(sender As Object, e As EventArgs) _
     Handles Button1.Click
 
         Me.undoRedo.Undo()
 
     End Sub
 
     Private Sub Button2_Click(sender As Object, e As EventArgs) _
     Handles Button2.Click
 
         Me.undoRedo.Redo()
 
     End Sub
 
     Private Sub Form1_FormClosing(sender As Object, e As FormClosingEventArgs) _
     Handles MyBase.FormClosing
 
         Me.undoRedo.Dispose()
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedoCheckBox.lastChecked">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The last saved checked state of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.UndoRedoCheckBox.Events">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the events being monitored for undo/redo operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The events being monitored for undo/redo operations.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoCheckBox.#ctor(System.Windows.Forms.CheckBox)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.UndoRedoCheckBox"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The <see cref="T:System.Windows.Forms.CheckBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoCheckBox.RestoreData(System.Int32,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Restores the specified data on the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="event">
 The control event that reffers to the data being restored.
 </param>
 
 <param name="data">
 The data to restore.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoCheckBox.CheckBox_CheckedChanged(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.CheckBox.CheckedChanged"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoCheckBox.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.UndoRedoComboBox">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Undo/Redo mechanism for a <see cref="T:System.Windows.Forms.ComboBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public NotInheritable Class Form1 : Inherits Form
 
     Private undoRedo As UndoRedoComboBox
 
     Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) _
     Handles MyBase.Load
 
         Me.undoRedo = New UndoRedoComboBox(Me.ComboBox1) With {
             .Events = UndoRedoComboBoxEvents.SelectedIndexChanged
         }
 
     End Sub
 
     Private Sub Button1_Click(sender As Object, e As EventArgs) _
     Handles Button1.Click
 
         Me.undoRedo.Undo()
 
     End Sub
 
     Private Sub Button2_Click(sender As Object, e As EventArgs) _
     Handles Button2.Click
 
         Me.undoRedo.Redo()
 
     End Sub
 
     Private Sub Form1_FormClosing(sender As Object, e As FormClosingEventArgs) _
     Handles MyBase.FormClosing
 
         Me.undoRedo.Dispose()
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedoComboBox.lastSelectedIndex">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The last saved selected-index of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.UndoRedoComboBox.Events">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the events being monitored for undo/redo operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The events being monitored for undo/redo operations.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoComboBox.#ctor(System.Windows.Forms.ComboBox)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.UndoRedoComboBox"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The <see cref="T:System.Windows.Forms.ComboBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoComboBox.RestoreData(System.Int32,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Restores the specified data on the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="event">
 The control event that reffers to the data being restored.
 </param>
 
 <param name="data">
 The data to restore.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoComboBox.ComboBox_SelectedIndexChanged(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.ComboBox.SelectedIndexChanged"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoComboBox.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.UndoRedoDateTimePicker">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Undo/Redo mechanism for a <see cref="T:System.Windows.Forms.DateTimePicker"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public NotInheritable Class Form1 : Inherits Form
 
     Private undoRedo As UndoRedoDateTimePicker
 
     Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) _
     Handles MyBase.Load
 
         Me.undoRedo = New UndoRedoDateTimePicker(Me.DateTimePicker1) With {
             .Events = UndoRedoDateTimePickerEvents.ValueChanged
         }
 
     End Sub
 
     Private Sub Button1_Click(sender As Object, e As EventArgs) _
     Handles Button1.Click
 
         Me.undoRedo.Undo()
 
     End Sub
 
     Private Sub Button2_Click(sender As Object, e As EventArgs) _
     Handles Button2.Click
 
         Me.undoRedo.Redo()
 
     End Sub
 
     Private Sub Form1_FormClosing(sender As Object, e As FormClosingEventArgs) _
     Handles MyBase.FormClosing
 
         Me.undoRedo.Dispose()
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedoDateTimePicker.lastDate">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The last selected date of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.UndoRedoDateTimePicker.Events">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the events being monitored for undo/redo operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The events being monitored for undo/redo operations.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoDateTimePicker.#ctor(System.Windows.Forms.DateTimePicker)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.UndoRedoDateTimePicker"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The <see cref="T:System.Windows.Forms.DateTimePicker"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoDateTimePicker.RestoreData(System.Int32,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Restores the specified data on the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="event">
 The control event that reffers to the data being restored.
 </param>
 
 <param name="data">
 The data to restore.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoDateTimePicker.DateTimePicker_ValueChanged(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.DateTimePicker.ValueChanged"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoDateTimePicker.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.UndoRedoItem">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Encapsulates the data of an item to undo or redo on a control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.UndoRedoItem.Event">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the control event that reffers to the undo/redo data.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The control event that reffers to the undo/redo data.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.UndoRedoItem.LastValue">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the last value on the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The last value on the control.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.UndoRedoItem.CurrentValue">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the current value on the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The current value on the control.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoItem.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.UndoRedoItem"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.UndoRedoListBox">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Undo/Redo mechanism for a <see cref="T:System.Windows.Forms.ListBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public NotInheritable Class Form1 : Inherits Form
 
     Private undoRedo As UndoRedoListBox
 
     Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) _
     Handles MyBase.Load
 
         Me.undoRedo = New UndoRedoListBox(Me.ListBox1) With {
             .Events = UndoRedoListBoxEvents.SelectedIndexChanged
         }
 
     End Sub
 
     Private Sub Button1_Click(sender As Object, e As EventArgs) _
     Handles Button1.Click
 
         Me.undoRedo.Undo()
 
     End Sub
 
     Private Sub Button2_Click(sender As Object, e As EventArgs) _
     Handles Button2.Click
 
         Me.undoRedo.Redo()
 
     End Sub
 
     Private Sub Form1_FormClosing(sender As Object, e As FormClosingEventArgs) _
     Handles MyBase.FormClosing
 
         Me.undoRedo.Dispose()
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedoListBox.lastSelectedIndices">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The last saved selected indices of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.UndoRedoListBox.Events">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the events being monitored for undo/redo operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The events being monitored for undo/redo operations.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoListBox.#ctor(System.Windows.Forms.ListBox)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.UndoRedoListBox"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The <see cref="T:System.Windows.Forms.ListBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoListBox.RestoreData(System.Int32,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Restores the specified data on the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="event">
 The control event that reffers to the data being restored.
 </param>
 
 <param name="data">
 The data to restore.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoListBox.ListBox_SelectedIndexChanged(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.ListBox.SelectedIndexChanged"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoListBox.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.UndoRedoListView">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Undo/Redo mechanism for a <see cref="T:System.Windows.Forms.ListView"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public NotInheritable Class Form1 : Inherits Form
 
     Private undoRedo As UndoRedoListView
 
     Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) _
     Handles MyBase.Load
 
         Me.undoRedo = New UndoRedoListView(Me.ListView1) With {
             .Events = (UndoRedoListViewEvents.SelectedIndexChanged Or UndoRedoListViewEvents.ItemChecked)
         }
 
     End Sub
 
     Private Sub Button1_Click(sender As Object, e As EventArgs) _
     Handles Button1.Click
 
         Me.undoRedo.Undo()
 
     End Sub
 
     Private Sub Button2_Click(sender As Object, e As EventArgs) _
     Handles Button2.Click
 
         Me.undoRedo.Redo()
 
     End Sub
 
     Private Sub Form1_FormClosing(sender As Object, e As FormClosingEventArgs) _
     Handles MyBase.FormClosing
 
         Me.undoRedo.Dispose()
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedoListView.lastSelectedIndices">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The last saved selected indices of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedoListView.lastCheckedIndices">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The last saved checked indices of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.UndoRedoListView.Events">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the events being monitored for undo/redo operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The events being monitored for undo/redo operations.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoListView.#ctor(System.Windows.Forms.ListView)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.UndoRedoListView"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The <see cref="T:System.Windows.Forms.ListView"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoListView.RestoreData(System.Int32,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Restores the specified data on the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="event">
 The control event that reffers to the data being restored.
 </param>
 
 <param name="data">
 The data to restore.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoListView.ListView_SelectedIndexChanged(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.ListView.SelectedIndexChanged"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoListView.ListView_ItemChecked(System.Object,System.Windows.Forms.ItemCheckedEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.ListView.ItemChecked"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.Windows.Forms.ItemCheckedEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoListView.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.UndoRedoMaskedTextBox">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Undo/Redo mechanism for a <see cref="T:System.Windows.Forms.MaskedTextBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public NotInheritable Class Form1 : Inherits Form
 
     Private undoRedo As UndoRedoMaskedTextBox
 
     Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) _
     Handles MyBase.Load
 
         Me.undoRedo = New UndoRedoMaskedTextBox(Me.MaskedTextBox1) With {
             .Events = (UndoRedoMaskedTextBoxEvents.TextChanged Or UndoRedoMaskedTextBoxEvents.FontChanged),
             .TextUpdateBehavior = UndoRedoTextUpdateBehavior.OnLeave
         }
 
     End Sub
 
     Private Sub Button1_Click(sender As Object, e As EventArgs) _
     Handles Button1.Click
 
         Me.undoRedo.Undo()
 
     End Sub
 
     Private Sub Button2_Click(sender As Object, e As EventArgs) _
     Handles Button2.Click
 
         Me.undoRedo.Redo()
 
     End Sub
 
     Private Sub Form1_FormClosing(sender As Object, e As FormClosingEventArgs) _
     Handles MyBase.FormClosing
 
         Me.undoRedo.Dispose()
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedoMaskedTextBox.lastText">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The last saved text of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedoMaskedTextBox.lastFont">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The last saved font of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedoMaskedTextBox.lastBackColor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The last saved background-color of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedoMaskedTextBox.lastForeColor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The last saved foreground-color of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.UndoRedoMaskedTextBox.Events">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the events being monitored for undo/redo operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The events being monitored for undo/redo operations.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.UndoRedoMaskedTextBox.TextUpdateBehavior">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the update behavior of when to save the text to undo or redo.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The update behavior of when to save the text to undo or redo.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoMaskedTextBox.#ctor(System.Windows.Forms.MaskedTextBox)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.UndoRedoMaskedTextBox"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The <see cref="T:System.Windows.Forms.MaskedTextBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoMaskedTextBox.RestoreData(System.Int32,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Restores the specified data on the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="event">
 The control event that reffers to the data being restored.
 </param>
 
 <param name="data">
 The data to restore.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoMaskedTextBox.MaskedTextBox_TextChanged(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.TextChanged"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoMaskedTextBox.MaskedTextBox_Leave(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.Leave"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoMaskedTextBox.MaskedTextBox_FontChanged(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.FontChanged"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoMaskedTextBox.MaskedTextBox_BackColorChanged(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.BackColorChanged"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoMaskedTextBox.MaskedTextBox_ForeColorChanged(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.ForeColorChanged"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoMaskedTextBox.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.UndoRedoMonthCalendar">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Undo/Redo mechanism for a <see cref="T:System.Windows.Forms.MonthCalendar"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public NotInheritable Class Form1 : Inherits Form
 
     Private undoRedo As UndoRedoMonthCalendar
 
     Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) _
     Handles MyBase.Load
 
         Me.undoRedo = New UndoRedoMonthCalendar(Me.MonthCalendar1) With {
             .Events = UndoRedoMonthCalendarEvents.DateSelected
         }
 
     End Sub
 
     Private Sub Button1_Click(sender As Object, e As EventArgs) _
     Handles Button1.Click
 
         Me.undoRedo.Undo()
 
     End Sub
 
     Private Sub Button2_Click(sender As Object, e As EventArgs) _
     Handles Button2.Click
 
         Me.undoRedo.Redo()
 
     End Sub
 
     Private Sub Form1_FormClosing(sender As Object, e As FormClosingEventArgs) _
     Handles MyBase.FormClosing
 
         Me.undoRedo.Dispose()
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedoMonthCalendar.lastSelection">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The last selected range of dates on the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.UndoRedoMonthCalendar.Events">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the events being monitored for undo/redo operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The events being monitored for undo/redo operations.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoMonthCalendar.#ctor(System.Windows.Forms.MonthCalendar)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.UndoRedoMonthCalendar"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The <see cref="T:System.Windows.Forms.MonthCalendar"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoMonthCalendar.RestoreData(System.Int32,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Restores the specified data on the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="event">
 The control event that reffers to the data being restored.
 </param>
 
 <param name="data">
 The data to restore.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoMonthCalendar.MonthCalendar_DateSelected(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.MonthCalendar.DateSelected"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoMonthCalendar.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.UndoRedoNumericUpDown">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Undo/Redo mechanism for a <see cref="T:System.Windows.Forms.NumericUpDown"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public NotInheritable Class Form1 : Inherits Form
 
     Private undoRedo As UndoRedoNumericUpDown
 
     Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) _
     Handles MyBase.Load
 
         Me.undoRedo = New UndoRedoNumericUpDown(Me.NumericUpDown1) With {
             .Events = UndoRedoNumericUpDownEvents.ValueChanged,
             .TextUpdateBehavior = UndoRedoTextUpdateBehavior.OnLeave
         }
 
     End Sub
 
     Private Sub Button1_Click(sender As Object, e As EventArgs) _
     Handles Button1.Click
 
         Me.undoRedo.Undo()
 
     End Sub
 
     Private Sub Button2_Click(sender As Object, e As EventArgs) _
     Handles Button2.Click
 
         Me.undoRedo.Redo()
 
     End Sub
 
     Private Sub Form1_FormClosing(sender As Object, e As FormClosingEventArgs) _
     Handles MyBase.FormClosing
 
         Me.undoRedo.Dispose()
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedoNumericUpDown.lastValue">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The last selected value of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.UndoRedoNumericUpDown.Events">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the events being monitored for undo/redo operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The events being monitored for undo/redo operations.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.UndoRedoNumericUpDown.TextUpdateBehavior">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the update behavior of when to save the text to undo or redo.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The update behavior of when to save the text to undo or redo.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoNumericUpDown.#ctor(System.Windows.Forms.NumericUpDown)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.UndoRedoDateTimePicker"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The <see cref="T:System.Windows.Forms.NumericUpDown"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoNumericUpDown.RestoreData(System.Int32,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Restores the specified data on the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="event">
 The control event that reffers to the data being restored.
 </param>
 
 <param name="data">
 The data to restore.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoNumericUpDown.NumericUpDown_ValueChanged(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.NumericUpDown.ValueChanged"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoNumericUpDown.NumericUpDown_Leave(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.Leave"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoNumericUpDown.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.UndoRedoRichTextBox">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Undo/Redo mechanism for a <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public NotInheritable Class Form1 : Inherits Form
 
     Private undoRedo As UndoRedoRichTextBox
 
     Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) _
     Handles MyBase.Load
 
         Me.undoRedo = New UndoRedoRichTextBox(Me.RichTextBox1) With {
             .Events = (UndoRedoRichTextBoxEvents.TextChanged Or UndoRedoRichTextBoxEvents.FontChanged),
             .TextUpdateBehavior = UndoRedoTextUpdateBehavior.OnLeave
         }
 
     End Sub
 
     Private Sub Button1_Click(sender As Object, e As EventArgs) _
     Handles Button1.Click
 
         Me.undoRedo.Undo()
 
     End Sub
 
     Private Sub Button2_Click(sender As Object, e As EventArgs) _
     Handles Button2.Click
 
         Me.undoRedo.Redo()
 
     End Sub
 
     Private Sub Form1_FormClosing(sender As Object, e As FormClosingEventArgs) _
     Handles MyBase.FormClosing
 
         Me.undoRedo.Dispose()
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedoRichTextBox.lastText">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The last saved text of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedoRichTextBox.lastFont">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The last saved font of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedoRichTextBox.lastBackColor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The last saved background-color of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedoRichTextBox.lastForeColor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The last saved foreground-color of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.UndoRedoRichTextBox.Events">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the events being monitored for undo/redo operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The events being monitored for undo/redo operations.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.UndoRedoRichTextBox.TextUpdateBehavior">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the update behavior of when to save the text to undo or redo.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The update behavior of when to save the text to undo or redo.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoRichTextBox.#ctor(System.Windows.Forms.RichTextBox)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.UndoRedoTextBox"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The <see cref="T:System.Windows.Forms.RichTextBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoRichTextBox.RestoreData(System.Int32,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Restores the specified data on the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="event">
 The control event that reffers to the data being restored.
 </param>
 
 <param name="data">
 The data to restore.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoRichTextBox.RichTextBox_TextChanged(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.TextChanged"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoRichTextBox.RichTextBox_Leave(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.Leave"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoRichTextBox.RichTextBox_FontChanged(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.FontChanged"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoRichTextBox.RichTextBox_BackColorChanged(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.BackColorChanged"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoRichTextBox.RichTextBox_ForeColorChanged(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.ForeColorChanged"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoRichTextBox.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.UndoRedoTextBox">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Undo/Redo mechanism for a <see cref="T:System.Windows.Forms.TextBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public NotInheritable Class Form1 : Inherits Form
 
     Private undoRedo As UndoRedoTextBox
 
     Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) _
     Handles MyBase.Load
 
         Me.undoRedo = New UndoRedoTextBox(Me.TextBox1) With {
             .Events = (UndoRedoTextBoxEvents.TextChanged Or UndoRedoTextBoxEvents.FontChanged),
             .TextUpdateBehavior = UndoRedoTextUpdateBehavior.OnLeave
         }
 
     End Sub
 
     Private Sub Button1_Click(sender As Object, e As EventArgs) _
     Handles Button1.Click
 
         Me.undoRedo.Undo()
 
     End Sub
 
     Private Sub Button2_Click(sender As Object, e As EventArgs) _
     Handles Button2.Click
 
         Me.undoRedo.Redo()
 
     End Sub
 
     Private Sub Form1_FormClosing(sender As Object, e As FormClosingEventArgs) _
     Handles MyBase.FormClosing
 
         Me.undoRedo.Dispose()
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedoTextBox.lastText">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The last saved text of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedoTextBox.lastFont">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The last saved font of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedoTextBox.lastBackColor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The last saved background-color of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.UndoRedoTextBox.lastForeColor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The last saved foreground-color of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.UndoRedoTextBox.Events">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the events being monitored for undo/redo operations.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The events being monitored for undo/redo operations.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.UndoRedoTextBox.TextUpdateBehavior">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the update behavior of when to save the text to undo or redo.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The update behavior of when to save the text to undo or redo.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoTextBox.#ctor(System.Windows.Forms.TextBox)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.UndoRedoTextBox"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The <see cref="T:System.Windows.Forms.TextBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoTextBox.RestoreData(System.Int32,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Restores the specified data on the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="event">
 The control event that reffers to the data being restored.
 </param>
 
 <param name="data">
 The data to restore.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoTextBox.TextBox_TextChanged(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.TextChanged"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoTextBox.TextBox_Leave(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.Leave"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoTextBox.TextBox_FontChanged(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.FontChanged"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoTextBox.TextBox_BackColorChanged(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.BackColorChanged"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoTextBox.TextBox_ForeColorChanged(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.ForeColorChanged"/> event of <see cref="P:Elektro.Application.UI.Types.UndoRedo`1.controlB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.UndoRedoTextBox.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.WindowLocker">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Selectivelly locks or unlocks various components of a window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public Class Form1 : Inherits Form
 
     Friend FormLock As New WindowLocker(Me)
 
     Private Sub Form1_Load() Handles MyBase.Shown
 
         With Me.FormLock
             .CloseButtonEnabled = False
             .MaximizeButtonEnabled = False
             .MinimizeButtonEnabled = False
             .MoveEnabled = False
             .MenuEnabled = False
         End With
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowLocker.OwnerWindow">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the window that owns this <see cref="T:Elektro.Application.UI.Types.WindowLocker"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The window.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowLocker.ownerWindowB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The window that owns this <see cref="T:Elektro.Application.UI.Types.WindowLocker"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowLocker.Handle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the handle for the window that owns this <see cref="T:Elektro.Application.UI.Types.WindowLocker"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The handle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowLocker.CloseButtonEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the Close button of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the Close button is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowLocker.closeButtonEnabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the Close button of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowLocker.MinimizeButtonEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the Minimize button of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the Minimize button is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowLocker.minimizeButtonEnabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the Minimize button of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowLocker.MaximizeButtonEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the Maximize button of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the Close button is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowLocker.maximizeButtonEnabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the Maximize button of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowLocker.DragEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the window-drag of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the window-drag is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowLocker.dragEnabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the window-drag of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowLocker.MoveEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the window-move is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if window-move is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowLocker.moveEnabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the window-move is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowLocker.SizeableTopBorderEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the top sizable border of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the top sizable border is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowLocker.sizeableTopBorderEnabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the top sizable border of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowLocker.SizeableTopLeftBorderEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the top-left sizable border of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the top-left sizable border is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowLocker.sizeableTopLeftBorderEnabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the top-left sizable border of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowLocker.SizeableTopRightBorderEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the top-right sizable border of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the top-right sizable border is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowLocker.sizeableTopRightBorderEnabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the top-right sizable border of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowLocker.SizeableBottomBorderEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the bottom sizable border of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the bottom sizable border is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowLocker.sizeableBottomBorderEnabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the bottom sizable border of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowLocker.SizeableBottomLeftBorderEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the bottom-left sizable border of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the bottom-left sizable border is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowLocker.sizeableBottomLeftBorderEnabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the bottom-left sizable border of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowLocker.SizeableBottomRightBorderEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the bottom-right sizable border of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the bottom-right sizable border is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowLocker.sizeableBottomRightBorderEnabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the bottom-right sizable border of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowLocker.SizeableLeftBorderEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the left sizable border of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the left sizable border is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowLocker.sizeableLeftBorderEnabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the left sizable border of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowLocker.SizeableRightBorderEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the right sizable border of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the right sizable border is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowLocker.sizeableRightBorderEnabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the right sizable border of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowLocker.ResizeEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the resize of the window is enabled.
 <para></para>
 This value takes precedence over any of the sizeable border properties.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the resize is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowLocker.resizeEnabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the resize of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowLocker.MenuEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the system-menu of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the system-menu is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowLocker.menuEnabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the system-menu of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowLocker.ScrollEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the horizontal and vertical scrolling of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the horizontal and vertical scrolling is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowLocker.scrollEnabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the horizontal and vertical scrolling of the window is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowLocker.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Types.WindowLocker"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowLocker.#ctor(System.Windows.Forms.IWin32Window)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.WindowLocker"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="window">
 The <see cref="T:System.Windows.Forms.IWin32Window"/> window that owns this instance (eg. a <see cref="T:System.Windows.Forms.Form"/> window).
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowLocker.Lock">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Locks everything on the window.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowLocker.Unlock">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Unlocks everything on the window.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowLocker.WndProc(System.Windows.Forms.Message@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Invokes the default window procedure associated with this window to process windows messages.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="m">
 A <see cref="T:System.Windows.Forms.Message"/> that is associated with the current Windows message.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowLocker.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowLocker.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowLocker.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.WindowMagnetizer">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Add magnetism to the edges of a window,
 in this way, by bringing the window to a screen edge, the edge of the window adheres it to the edge of the screen.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Private magnetizer As New WindowMagnetizer(Me) With
     {
         .Enabled = True,
         .AllowOffscreen = True,
         .Threshold = 30
     }
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowMagnetizer.isResizing">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the owner window is being resized by one of its edges.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowMagnetizer.OwnerWindow">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the window that owns this <see cref="T:Elektro.Application.UI.Types.WindowMagnetizer"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The window.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowMagnetizer.ownerWindowB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The window that owns this <see cref="T:Elektro.Application.UI.Types.WindowMagnetizer"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowMagnetizer.Handle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the handle for the window that owns this <see cref="T:Elektro.Application.UI.Types.WindowMagnetizer"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The handle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowMagnetizer.Threshold">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets, in pixels, the minimum threshold that the magnetic window needs to dock it on the nearest window border.
 <para></para>
 (Default value is <c>20</c>))
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The minimum threshold that the magnetic window needs to dock it on the nearest window border.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowMagnetizer.thresholdB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The minimum threshold that the magnetic window needs to dock it on the nearest window border.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowMagnetizer.Enabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the magnetizer is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the magnetizer is enabled, otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowMagnetizer.enabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the magnetizer is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowMagnetizer.AllowOffscreen">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the window can be moved off-screen.
 <para></para>
 Default value is <see langword="True"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the window can be moved off-screen, otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowMagnetizer.allowOffscreenB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the window can be moved off-screen.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowMagnetizer.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Types.WindowMagnetizer"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowMagnetizer.#ctor(System.Windows.Forms.IWin32Window)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.WindowMagnetizer"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="window">
 The <see cref="T:System.Windows.Forms.IWin32Window"/> window that owns this instance (eg. a <see cref="T:System.Windows.Forms.Form"/> window).
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowMagnetizer.DockToNearestScreenBorder(System.Windows.Forms.IWin32Window,System.IntPtr,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 If the margin between the specified <paramref name="window"/> 
 and the nearest border of the active screeen is lower than the value specified in <paramref name="threshold"/>,
 then it docks the window to the border. 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="window">
 The magnetic window.
 </param>
 
 <param name="windowPosHandle">
 A pointer to a <see cref="T:Elektro.Interop.Win32.Types.WindowPos"/> structure that contains the 
 new size and position of the <paramref name="window"/>.
 </param>
 
 <param name="threshold">
 The minimum threshold that the window needs to dock it on the nearest desktop border.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowMagnetizer.WndProc(System.Windows.Forms.Message@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Invokes the default window procedure associated with this window to process windows messages.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="m">
 A <see cref="T:System.Windows.Forms.Message"/> that is associated with the current Windows message.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowMagnetizer.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowMagnetizer.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowMagnetizer.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.WindowMovingOpacity">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds transparency to a window when moving or resizing the window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Friend FormMovingOpacity As New WindowMovingOpacity(Me) With
     {
         .OpacityNonStatic = 80,
         .OpacityStatic = 100
     }
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowMovingOpacity.OwnerWindow">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the window that owns this <see cref="T:Elektro.Application.UI.Types.WindowMovingOpacity"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The window.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowMovingOpacity.ownerWindowB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The window that owns this <see cref="T:Elektro.Application.UI.Types.WindowMovingOpacity"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowMovingOpacity.Handle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the handle for the window that owns this <see cref="T:Elektro.Application.UI.Types.WindowMovingOpacity"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The handle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowMovingOpacity.OpacityNonStatic">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the opacity to apply to the window when the window is moving or resizing.
 <para></para>
 The valid range is from <c>0</c> to <c>100</c>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The opacity, from <c>0</c> to <c>100</c>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowMovingOpacity.opacityNonStaticB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The opacity to apply to the window when the window is moving or resizing.
 <para></para>
 The valid range is from <c>0</c> to <c>100</c>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowMovingOpacity.OpacityStatic">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the opacity to apply to the window when the window isn't moving, in a static position.
 <para></para>
 The valid range is from <c>0</c> to <c>100</c>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The opacity, from <c>0</c> to <c>100</c>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowMovingOpacity.opacityStaticB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The opacity to apply to the window when the window isn't moving.
 <para></para>
 The valid range is from <c>0</c> to <c>100</c>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowMovingOpacity.EnableMoveOpacity">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the transparency is enabled when moving the window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if transparency is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowMovingOpacity.enableMoveOpacityB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the transparency is enabled when moving the window.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowMovingOpacity.EnableResizeOpacity">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the transparency is enabled when resizing the window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if transparency is enabled; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowMovingOpacity.enableResizeOpacityB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the transparency is enabled when resizing the window.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowMovingOpacity.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Types.WindowMovingOpacity"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowMovingOpacity.#ctor(System.Windows.Forms.IWin32Window)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.WindowMovingOpacity"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="window">
 The <see cref="T:System.Windows.Forms.IWin32Window"/> window that owns this instance (eg. a <see cref="T:System.Windows.Forms.Form"/> window).
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowMovingOpacity.WndProc(System.Windows.Forms.Message@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Invokes the default window procedure associated with this window to process windows messages.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="m">
 A <see cref="T:System.Windows.Forms.Message"/> that is associated with the current Windows message.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowMovingOpacity.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowMovingOpacity.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowMovingOpacity.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.WindowToScreenDocker">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Docks a window around the edges of the screen.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Friend WindowDock As New WindowToScreenDocker(Me) With
     {
         .EnableMove = False,
         .EnableResize = True
     }
 
 Private Sub Test()
 
     Me.WindowDock.Dock(ScreenDockingPosition.WorkingAreaBottomRight)
 
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowToScreenDocker.positions">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The docking positions relative to the screen.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowToScreenDocker.OwnerWindow">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the window that owns this <see cref="T:Elektro.Application.UI.Types.WindowToScreenDocker"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The window.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowToScreenDocker.ownerWindowB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The window that owns this <see cref="T:Elektro.Application.UI.Types.WindowToScreenDocker"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowToScreenDocker.Handle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the handle for the window that owns this <see cref="T:Elektro.Application.UI.Types.WindowToScreenDocker"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The handle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowToScreenDocker.Screen">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the target <see cref="P:Elektro.Application.UI.Types.WindowToScreenDocker.Screen"/> where the docking will be performed.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The target <see cref="P:Elektro.Application.UI.Types.WindowToScreenDocker.Screen"/> where the docking will be performed.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowToScreenDocker.screenB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The target <see cref="P:Elektro.Application.UI.Types.WindowToScreenDocker.Screen"/> where the docking will be performed.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowToScreenDocker.IsDocked">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value indicating whether the window is docked.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the owner window is docked; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowToScreenDocker.isDockedB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the owner window is docked.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowToScreenDocker.Position">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the current <see cref="T:Elektro.Application.UI.Enums.ScreenDockingPosition"/> of the window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The current <see cref="T:Elektro.Application.UI.Enums.ScreenDockingPosition"/> of the window.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowToScreenDocker.positionB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The current <see cref="T:Elektro.Application.UI.Enums.ScreenDockingPosition"/> of the window.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowToScreenDocker.EnableMove">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value that indicates whether the window-moving is enabled.
 <para></para>
 If <see langword="False"/>, the window cannot be moved.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowToScreenDocker.enableMoveB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A value that indicates whether the window-moving is enabled.
 <para></para>
 If <see langword="False"/>, the window cannot be moved.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowToScreenDocker.EnableResize">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value that indicates whether the window-resizing is enabled.
 <para></para>
 If <see langword="False"/>, the window cannot be resized.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowToScreenDocker.enableResizeB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A value that indicates whether the window-resizing is enabled.
 <para></para>
 If <see langword="False"/>, the window cannot be resized.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowToScreenDocker.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Types.WindowToScreenDocker"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowToScreenDocker.#ctor(System.Windows.Forms.IWin32Window)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.WindowToScreenDocker"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="window">
 The <see cref="T:System.Windows.Forms.IWin32Window"/> window that owns this instance (eg. a <see cref="T:System.Windows.Forms.Form"/> window).
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowToScreenDocker.#ctor(System.Windows.Forms.IWin32Window,System.Windows.Forms.Screen)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.WindowToScreenDocker"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="window">
 The <see cref="T:System.Windows.Forms.IWin32Window"/> window that owns this instance (eg. a <see cref="T:System.Windows.Forms.Form"/> window).
 </param>
 
 <param name="scr">
 The target <see cref="P:Elektro.Application.UI.Types.WindowToScreenDocker.Screen"/> where the docking will be performed.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowToScreenDocker.Dock(Elektro.Application.UI.Enums.ScreenDockingPosition)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Docks the window to a specified position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="position">
 The target docking position.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowToScreenDocker.Undock">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Disables the window docking.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowToScreenDocker.RenewPositions(System.Windows.Forms.IWin32Window,System.Windows.Forms.Screen)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Renews the Dock positions according to the source window size.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="window">
 The source window.
 </param>
 
 <param name="scr">
 The target screen.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowToScreenDocker.WndProc(System.Windows.Forms.Message@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Invokes the default window procedure associated with this window to process windows messages.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="m">
 A <see cref="T:System.Windows.Forms.Message"/> that is associated with the current Windows message.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowToScreenDocker.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowToScreenDocker.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowToScreenDocker.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.WindowToWindowDocker">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Docks a source window around the edges of a target window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public Class Form1 : Inherits Form
 
     Friend WindowDock As WindowToWindowDocker
     Friend WithEvents Form2 As New Form
 
     Private Sub Button1_Click() Handles Button1.Click
 
         Me.WindowDock = New WindowToWindowDocker(Me) With
             {
                 .EnableMove = False,
                 .EnableResize = True
             }
 
         Me.Form2.StartPosition = FormStartPosition.CenterScreen
         Me.Form2.Show()
 
         Me.WindowDock.Dock(Me.Form2, WindowDockingPosition.Right)
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowToWindowDocker._targetWindowNotifier">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A <see cref="T:Elektro.Application.UI.Types.WindowToWindowDockerTargetWindowNotifier"/> instance that notifies about window events.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowToWindowDocker.OwnerWindow">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the window that owns this <see cref="T:Elektro.Application.UI.Types.WindowToWindowDocker"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The window.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowToWindowDocker.ownerWindowB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The window that owns this <see cref="T:Elektro.Application.UI.Types.WindowToWindowDocker"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowToWindowDocker.Handle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the handle for the window that owns this <see cref="T:Elektro.Application.UI.Types.WindowToWindowDocker"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The handle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowToWindowDocker.Position">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the current <see cref="T:Elektro.Application.UI.Enums.WindowDockingPosition"/> of the window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The current <see cref="P:Elektro.Application.UI.Types.WindowToWindowDocker.Position"/> of the window.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowToWindowDocker.positionB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The current <see cref="T:Elektro.Application.UI.Enums.WindowDockingPosition"/> of the window.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowToWindowDocker.IsDocked">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value indicating whether the owner window is docked.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the owner window is docked; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowToWindowDocker.isDockedB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the owner window is docked.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowToWindowDocker.EnableMove">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value that indicates whether the window-moving is enabled.
 <para></para>
 If <see langword="False"/>, the window cannot be moved.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowToWindowDocker.enableMoveB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A value that indicates whether the window-moving is enabled.
 <para></para>
 If <see langword="False"/>, the window cannot be moved.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowToWindowDocker.EnableResize">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value that indicates whether the window-resizing is enabled.
 <para></para>
 If <see langword="False"/>, the window cannot be resized.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowToWindowDocker.enableResizeB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A value that indicates whether the window-resizing is enabled.
 <para></para>
 If <see langword="False"/>, the window cannot be resized.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowToWindowDocker.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Types.WindowToWindowDocker"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowToWindowDocker.#ctor(System.Windows.Forms.IWin32Window)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.WindowToWindowDocker"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="window">
 The <see cref="T:System.Windows.Forms.IWin32Window"/> window that owns this instance (eg. a <see cref="T:System.Windows.Forms.Form"/> window).
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowToWindowDocker.Dock(System.Windows.Forms.IWin32Window,Elektro.Application.UI.Enums.WindowDockingPosition)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Docks the window to a specified position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="targetWindow">
 The target window where to perform the docking.
 </param>
 
 <param name="position">
 The target docking position.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowToWindowDocker.Undock">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Disables the window docking.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowToWindowDocker.Dock(System.Windows.Forms.IWin32Window,System.Windows.Forms.IWin32Window,Elektro.Application.UI.Enums.WindowDockingPosition)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Docks the window to a specified position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceWindow">
 The source window to dock.
 </param>
 
 <param name="targetWindow">
 The target window where to perform the docking.
 </param>
 
 <param name="position">
 The target docking position.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowToWindowDocker.OnTargetWindow_WindowMoving(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:Elektro.Application.UI.Types.WindowToWindowDockerTargetWindowNotifier.WindowMoving"/> event 
 of the <see cref="P:Elektro.Application.UI.Types.WindowToWindowDocker.targetWindowNotifier"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Application.UI.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowToWindowDocker.WndProc(System.Windows.Forms.Message@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Invokes the default window procedure associated with this window to process windows messages.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="m">
 A <see cref="T:System.Windows.Forms.Message"/> that is associated with the current Windows message.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowToWindowDocker.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowToWindowDocker.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowToWindowDocker.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Application.UI.Types.WindowToWindowDockerTargetWindowNotifier">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Notifies about window-moving events of a window.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowToWindowDockerTargetWindowNotifier.OwnerWindow">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the window that owns this <see cref="T:Elektro.Application.UI.Types.WindowToWindowDockerTargetWindowNotifier"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The window.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowToWindowDockerTargetWindowNotifier.ownerWindowB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The window that owns this <see cref="T:Elektro.Application.UI.Types.WindowToWindowDockerTargetWindowNotifier"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Application.UI.Types.WindowToWindowDockerTargetWindowNotifier.IsMoving">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that indicates whether the owner window is moving.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The window.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowToWindowDockerTargetWindowNotifier.isMovingB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value that indicates whether the owner window is moving.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Application.UI.Types.WindowToWindowDockerTargetWindowNotifier.WindowMoving">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when the owner window is moving.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowToWindowDockerTargetWindowNotifier.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Application.UI.Types.WindowToWindowDockerTargetWindowNotifier"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowToWindowDockerTargetWindowNotifier.#ctor(System.Windows.Forms.IWin32Window)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Application.UI.Types.WindowToWindowDockerTargetWindowNotifier"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="window">
 The <see cref="T:System.Windows.Forms.IWin32Window"/> window that owns this instance (eg. a <see cref="T:System.Windows.Forms.Form"/> window).
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowToWindowDockerTargetWindowNotifier.WndProc(System.Windows.Forms.Message@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Invokes the default window procedure associated with this window to process windows messages.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="m">
 A <see cref="T:System.Windows.Forms.Message"/> that is associated with the current Windows message.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Application.UI.Types.WindowToWindowDockerTargetWindowNotifier.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowToWindowDockerTargetWindowNotifier.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Application.UI.Types.WindowToWindowDockerTargetWindowNotifier.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
</members>
</doc>
