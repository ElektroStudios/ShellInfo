<?xml version="1.0"?>
<doc>
<assembly>
<name>
Elektro.Core
</name>
</assembly>
<members>
<member name="T:Elektro.Core.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Elektro.Core.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Elektro.Core.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:Elektro.Core.Generics.Extensions.IEnumerableOfIGrouping.Join">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerableOfIGrouping.Join.JoinByFirstGroupElement``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``1,``0}})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Takes the first element of each group and joins them into a new <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim collection As IEnumerable(Of String) = {"1", "1", "22", "3", "333", "333"}
 Dim groups As IEnumerable(Of IGrouping(Of Integer, String)) = collection.GroupBy(Function(str As String) str.Length)
 Dim newCollection As IEnumerable(Of String) = groups.JoinByFirstGroupElement()
 
 For Each element As String In newCollection
     Console.WriteLine(element)
 Next
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of the source elements.
 </typeparam>
 
 <typeparam name="TKey">
 The type of the source <see cref="T:System.Linq.IGrouping`2"/> key.
 </typeparam>
 
 <param name="sender">
 The source collection.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerableOfIGrouping.Join.JoinByFirstGroupElement``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``1,``0}},System.Func{``0,System.Boolean})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Takes the first element that satisfies the specified condition of each group 
 and joins them into a new <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim collection As IEnumerable(Of String) = {"1", "1", "22", "3", "333", "333"}
 Dim groups As IEnumerable(Of IGrouping(Of Integer, String)) = collection.GroupBy(Function(str As String) str.Length)
 Dim newCollection As IEnumerable(Of String) = groups.JoinByFirstGroupElement(Function(str As String) CInt(str) &lt; 100)
 
 For Each element As String In newCollection
     Console.WriteLine(element)
 Next
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of the source elements.
 </typeparam>
 
 <typeparam name="TKey">
 The type of the source <see cref="T:System.Linq.IGrouping`2"/> key.
 </typeparam>
 
 <param name="sender">
 The source collection.
 </param>
 
 <param name="predicate">
 A function to test each element for a condition.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.IEnumerable.Grouping">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.Grouping.GroupByIntoFirstElement``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Groups the elements of a sequence according to a specified key selector function 
 and discards all the elements in each group except the first element.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim collection As IEnumerable(Of String) = {"1", "1", "22", "3", "333", "333"}
 collection = collection.GroupByIntoFirstElement(Function(str As String) str.Length)
 
 For Each element As String In collection
     Console.WriteLine(element)
 Next
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of the source elements.
 </typeparam>
 
 <typeparam name="TKey">
 The type of the key returned by <paramref name="keySelector"/>.
 </typeparam>
 
 <param name="sender">
 The source collection.
 </param>
 
 <param name="keySelector">
 A function to extract the key for each element.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.Grouping.GroupByIntoMaxNumberOfElements``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Groups the elements of a sequence according to a specified key selector function 
 and takes the specified amount of elements of each group.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim collection As IEnumerable(Of String) = {"1", "1", "22", "3", "333", "333"}
 Dim groups As IEnumerable(Of IEnumerable(Of String)) = collection.GroupByIntoMaxNumberOfElements(2, Function(str As String) str.Length)
 
 For index As Integer = 0 To (groups.Count - 1)
     For Each element As String In groups(index)
         Console.WriteLine("Group Index: {0}; Element: {1}", index, element)
     Next
 Next
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of the source elements.
 </typeparam>
 
 <typeparam name="TKey">
 The type of the key returned by <paramref name="keySelector"/>.
 </typeparam>
 
 <param name="sender">
 The source collection.
 </param>
 
 <param name="count">
 The maximum amount of elements per group.
 </param>
 
 <param name="keySelector">
 A function to extract the key for each element.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.IEnumerable.Appending">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.Appending.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Appends an element to the end of the source collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim col As IEnumerable(Of Integer) = Enumerable.Range(1, 3) ' {1, 2, 3}
 col = col.Append(4) ' {1, 2, 3, 4}
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="item">
 The element to append.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.IEnumerable.Concatenation">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.Concatenation.ConcatMultiple``1(System.Collections.Generic.IEnumerable{``0}[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Concatenates multiple <see cref="T:System.Collections.Generic.IEnumerable`1"/> at once into a single <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim col1 As IEnumerable(Of Integer) = {1, 2, 3}
 Dim col2 As IEnumerable(Of Integer) = {4, 5, 6}
 Dim col3 As IEnumerable(Of Integer) = {7, 8, 9}
 Debug.WriteLine(String.Join(", ", {col1, col2, col3}.ConcatMultiple))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source collections.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.IEnumerable.Count">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.Count.CountEmptyItems``1(System.Collections.Generic.IEnumerable{``0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Counts the empty items of the source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim emptyItemCount As Integer = {"Hello", "   ", "World!"}.CountEmptyItems
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The total amount of empty items.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.Count.CountNonEmptyItems``1(System.Collections.Generic.IEnumerable{``0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Counts the non-empty items of the source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim nonEmptyItemCount As Integer = {"Hello", "   ", "World!"}.CountNonEmptyItems
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The total amount of non-empty items.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.IEnumerable.Duplicates">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.Duplicates.Duplicates``1(System.Collections.Generic.IEnumerable{``0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets all the duplicated values of the source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim col As IEnumerable(Of Integer) = {1, 1, 2, 2, 3, 3, 0}
 Debug.WriteLine(String.Join(", ", col.Duplicates))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source collection.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.Duplicates.UniqueDuplicates``1(System.Collections.Generic.IEnumerable{``0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the unique duplicated values of the source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim col As IEnumerable(Of Integer) = {1, 1, 2, 2, 3, 3, 0}
 Debug.WriteLine(String.Join(", ", col.UniqueDuplicates))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source collection.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.Duplicates.Uniques``1(System.Collections.Generic.IEnumerable{``0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the unique values of the source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim col As IEnumerable(Of Integer) = {1, 1, 2, 2, 3, 3, 0}
 Debug.WriteLine(String.Join(", ", col.Uniques))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source collection.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.Duplicates.RemoveDuplicates``1(System.Collections.Generic.IEnumerable{``0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes duplicated values in the source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>   
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim col As IEnumerable(Of Integer) = {1, 1, 2, 2, 3, 3, 0}
 Debug.WriteLine(String.Join(", ", col.RemoveDuplicates))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source collection.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.IEnumerable.FindIndexOf">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.FindIndexOf.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Searches for the specified object and returns the zero-based index of the first occurrence within the 
 entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox({1, 2, 3, 4, 5, 6, 7, 8, 9}.IndexOf(value:=1))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="value">
 The object to locate in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index of the first occurrence of object within the entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>, 
 if found; otherwise, –1.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.FindIndexOf.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Searches for the specified object and returns the zero-based index of the first occurrence within the 
 entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox({1, 2, 3, 4, 5, 6, 7, 8, 9}.IndexOf(value:=1))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="value">
 The object to locate in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="index">
 The zero-based starting index of the search.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index of the first occurrence of object within the entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>, 
 if found; otherwise, –1.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.FindIndexOf.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Searches for the specified object and returns the zero-based index of the first occurrence within the 
 entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox({1, 2, 3, 4, 5, 6, 7, 8, 9}.IndexOf(value:=1))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="value">
 The object to locate in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="index">
 The zero-based starting index of the search.
 </param>
 
 <param name="count">
 The number of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index of the first occurrence of object within the entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>, 
 if found; otherwise, –1.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.FindIndexOf.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Searches for the specified object pattern and returns the zero-based index of the first occurrence within the 
 entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox({0, 1, 2, 3, 4, 5, 6, 7, 8, 9}.IndexOf(pattern:={5, 6, 7}))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="pattern">
 The object pattern to locate in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index of the first occurrence of object pattern within the entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>, 
 if found; otherwise, –1.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.FindIndexOf.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Searches for the specified object pattern and returns the zero-based index of the first occurrence within the 
 entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox({0, 1, 2, 3, 4, 5, 6, 7, 8, 9}.IndexOf(pattern:={5, 6, 7}, index:=5))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="pattern">
 The object pattern to locate in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="index">
 The zero-based starting index of the search.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index of the first occurrence of object pattern within the entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>, 
 if found; otherwise, –1.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.FindIndexOf.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Searches for the specified object pattern and returns the zero-based index of the first occurrence within the 
 entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox({0, 1, 2, 3, 4, 5, 6, 7, 8, 9}.IndexOf(pattern:={5, 6, 7}, index:=5, count:=3))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="pattern">
 The object pattern to locate in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="index">
 The zero-based starting index of the search.
 </param>
 
 <param name="count">
 The number of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index of the first occurrence of object pattern within the entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>, 
 if found; otherwise, –1.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 index;Value equals or bigger than 0 is required.
 or
 count;Value bigger than 0 is required.
 or
 count;Value equals or bigger than the pattern length is required.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.FindIndexOf.IndexOfAll``1(System.Collections.Generic.IEnumerable{``0},``0)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Searches for the specified object and returns the zero-based indexes of all the occurrence within the 
 entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox(String.Join(", ", {0, 1, 2, 3, 4, 5, 6, 5, 5, 9}.IndexOfAll(value:=5)))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="value">
 The object to locate in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index of all the occurrences of object within the entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>, 
 if found; otherwise, <see langword="Nothing"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 index;Value equals or bigger than 0 is required.
 or
 count;Value bigger than 0 is required.
 or
 count;Value equals or bigger than the pattern length is required.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.FindIndexOf.IndexOfAll``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Searches for the specified object and returns the zero-based indexes of all the occurrence within the 
 entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox(String.Join(", ", {0, 1, 2, 3, 4, 5, 6, 5, 5, 9}.IndexOfAll(value:=5, index:=5)))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="value">
 The object to locate in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="index">
 The zero-based starting index of the search.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index of all the occurrences of object within the entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>, 
 if found; otherwise, <see langword="Nothing"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 index;Value equals or bigger than 0 is required.
 or
 count;Value bigger than 0 is required.
 or
 count;Value equals or bigger than the pattern length is required.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.FindIndexOf.IndexOfAll``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Searches for the specified object and returns the zero-based indexes of all the occurrence within the 
 entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox(String.Join(", ", {0, 1, 2, 3, 4, 5, 6, 5, 5, 9}.IndexOfAll(value:=5, index:=5, count:=4)))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="value">
 The object to locate in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="index">
 The zero-based starting index of the search.
 </param>
 
 <param name="count">
 The number of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index of all the occurrences of object within the entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>, 
 if found; otherwise, <see langword="Nothing"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 index;Value equals or bigger than 0 is required.
 or
 count;Value bigger than 0 is required.
 or
 count;Value equals or bigger than the pattern length is required.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.FindIndexOf.IndexOfAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Searches for the specified object pattern and returns the zero-based indexes of all the occurrence within the 
 entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox(String.Join(", ", {0, 1, 2, 3, 4, 5, 6, 5, 5, 9}.IndexOfAll(pattern:={5, 5})))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="pattern">
 The object pattern to locate in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index of all the occurrences of object pattern within the entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>, 
 if found; otherwise, <see langword="Nothing"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 index;Value equals or bigger than 0 is required.
 or
 count;Value bigger than 0 is required.
 or
 count;Value equals or bigger than the pattern length is required.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.FindIndexOf.IndexOfAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Searches for the specified object pattern and returns the zero-based indexes of all the occurrence within the 
 entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox(String.Join(", ", {0, 1, 2, 3, 4, 5, 6, 5, 5, 9}.IndexOfAll(pattern:={5, 5}, index:=5)))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="pattern">
 The object pattern to locate in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="index">
 The zero-based starting index of the search.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index of all the occurrences of object pattern within the entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>, 
 if found; otherwise, <see langword="Nothing"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 index;Value equals or bigger than 0 is required.
 or
 count;Value bigger than 0 is required.
 or
 count;Value equals or bigger than the pattern length is required.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.FindIndexOf.IndexOfAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Searches for the specified object pattern and returns the zero-based indexes of all the occurrence within the 
 entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox(String.Join(", ", {0, 1, 2, 3, 4, 5, 6, 5, 5, 9}.IndexOfAll(pattern:={5, 5}, index:=5, count:=4)))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="pattern">
 The object pattern to locate in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="index">
 The zero-based starting index of the search.
 </param>
 
 <param name="count">
 The number of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index of all the occurrences of object pattern within the entire <see cref="T:System.Collections.Generic.IEnumerable`1"/>, 
 if found; otherwise, <see langword="Nothing"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 index;Value equals or bigger than 0 is required.
 or
 count;Value bigger than 0 is required.
 or
 count;Value equals or bigger than the pattern length is required.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.IEnumerable.Iteration">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.Iteration.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs the specified action on each element of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="action">
 The <see cref="T:System.Action`1"/> delegate to perform on each element of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.IEnumerable.Join">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.Join.StringJoin``1(System.Collections.Generic.IEnumerable{``0}[],System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Joins multiple <see cref="T:System.Collections.Generic.IEnumerable`1"/> at once into a single string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim col1 As IEnumerable(Of Integer) = {1, 2, 3}
 Dim col2 As IEnumerable(Of Integer) = {4, 5, 6}
 Dim col3 As IEnumerable(Of Integer) = {7, 8, 9}
 Debug.WriteLine({col1, col2, col3}.StringJoin(", ")))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
     
 <param name="separator">
 The string to use as a separator.
 </param>
 
 <param name="sender">
 The source collections.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see cref="T:System.String"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.IEnumerable.Prepending">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.Prepending.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prepends an element to the start of the source collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim col As IEnumerable(Of Integer) = Enumerable.Range(1, 3) ' {1, 2, 3}
 col = col.Prepend(0) ' {0, 1, 2, 3}
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="item">
 The element to prepend.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.IEnumerable.Randomizing">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Generics.Extensions.IEnumerable.Randomizing.rand">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A <see cref="T:System.Random"/> instance to generate random secuences of numbers.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.Randomizing.Randomize``1(System.Collections.Generic.IEnumerable{``0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Randomizes the elements of the source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim col As IEnumerable(Of Integer) = {1, 2, 3, 4, 5, 6, 7, 8, 9}
 Debug.WriteLine(String.Join(", ", col.Randomize))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source collection.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.IEnumerable.Split">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.Split.SplitIntoParts``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Splits the source <see cref="T:System.Collections.Generic.IEnumerable`1"/> into the specified amount of secuences.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
  Dim mainCol As IEnumerable(Of Integer) = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0}
  Dim splittedCols As IEnumerable(Of IEnumerable(Of Integer)) = mainCol.SplitIntoParts(amount:=2)
  splittedCols.ToList.ForEach(Sub(col As IEnumerable(Of Integer))
                                  Debug.WriteLine(String.Join(", ", col))
                              End Sub)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source collection.
 </param>
 
 <param name="amount">
 The target amount of secuences.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.Split.SplitIntoNumberOfElements``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Splits the source <see cref="T:System.Collections.Generic.IEnumerable`1"/> into secuences with the specified amount of elements.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
  Dim mainCol As IEnumerable(Of Integer) = {1, 2, 3, 4, 5, 6, 7, 8, 9}
  Dim splittedCols As IEnumerable(Of IEnumerable(Of Integer)) = mainCol.SplitIntoNumberOfElements(amount:=4)
  splittedCols.ToList.ForEach(Sub(col As IEnumerable(Of Integer))
                                  Debug.WriteLine(String.Join(", ", col))
                              End Sub)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source collection.
 </param>
 
 <param name="amount">
 The target amount of elements.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.Split.SplitIntoNumberOfElements``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean,``0)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Splits the source <see cref="T:System.Collections.Generic.IEnumerable`1"/> into secuences with the specified amount of elements.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
  Dim mainCol As IEnumerable(Of Integer) = {1, 2, 3, 4, 5, 6, 7, 8, 9}
  Dim splittedCols As IEnumerable(Of IEnumerable(Of Integer)) = mainCol.SplitIntoNumberOfElements(amount:=4, fillEmpty:=True, valueToFill:=0)
  splittedCols.ToList.ForEach(Sub(col As IEnumerable(Of Integer))
                                  Debug.WriteLine(String.Join(", ", col))
                              End Sub)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source collection.
 </param>
 
 <param name="amount">
 The target amount of elements.
 </param>
 
 <param name="fillEmpty">
 If set to <see langword="True"/>, generates empty elements to fill the last secuence's part amount.
 </param>
 
 <param name="valueToFill">
 An optional value used to fill the last secuence's part amount.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.IEnumerable.TypeConversion">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.TypeConversion.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates a <see cref="T:System.Collections.Generic.List`1"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the specified transform function.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim col As IEnumerable(Of Integer) = Enumerable.Range(1, 10)
 Dim list As List(Of Integer) = col.ToList(Function(i As Integer) i > 5)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="predicate">
 A transform function to apply to each element.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Collections.Generic.List`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerable.TypeConversion.ToArray``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates an array from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the specified transform function.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim col As IEnumerable(Of Integer) = Enumerable.Range(1, 10)
 Dim array As Integer() = col.ToArray(Function(i As Integer) i > 5)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="predicate">
 A transform function to apply to each element.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting array.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.Array.Disposing">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with an <see cref="T:System.Array"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.Array.Disposing.DisposeAll``1(``0[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Disposes all the disposable elements of the specified Array.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public Class Form1 : Inherits Form
 
     Private Sub Test(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Shown
 
         Dim myCol As MyDisposableType() = {New MyDisposableType}
         myCol.DisposeAll()
 
         Try
             MsgBox(myCol(0).MyField)
 
         Catch ex As NullReferenceException
             MsgBox(ex.Message)
 
         End Try
 
     End Sub
 
 End Class
 
 Public Class MyDisposableType : Implements IDisposable
 
     Public MyField As String
 
     Public Sub New()
         Me.MyField = "Default field initialization value"
     End Sub
 
     Private disposedValue As Boolean
 
     Public Sub Dispose() Implements IDisposable.Dispose
         Dispose(True)
         GC.SuppressFinalize(Me)
     End Sub
 
     Protected Sub Dispose(disposing As Boolean)
         If Not Me.disposedValue Then
             If disposing Then
                 Me.MyField = ""
             End If
         End If
         Me.disposedValue = True
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source Array.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.Array.Initialization">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with an <see cref="T:System.Array"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.Array.Initialization.InitializeAll``1(``0[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes all the elements (that aren't already initialized) of the specified Array.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Private Sub Test()
 
     Dim myCol As MyType() = New MyType(100) {}
     myCol.InitializeAll()
 
     MsgBox(myCol(0).MyField)
 
 End Sub
 
 Public NotInheritable Class MyType
 
     Public MyField As String
 
     Public Sub New()
         Me.MyField = "Default field initialization value"
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source Array.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.Array.Initialization.DeinitializeAll``1(``0[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Deinitializes all the elements of the specified Array.
 <para></para>
 This method just turns to <see langword="Nothing"/> all the elements, 
 <para></para>
 if you also need to dispose them, call <see cref="M:Elektro.Core.Generics.Extensions.Array.Disposing.DisposeAll``1(``0[])"/> method instead.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public Class Form1 : Inherits Form
 
     Private Sub Test(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Shown
 
         Dim myCol As MyDisposableType() = {New MyDisposableType}
         myCol.DeinitializeAll()
 
         Try
             MsgBox(myCol(0).MyField)
 
         Catch ex As NullReferenceException
             MsgBox(ex.Message)
 
         End Try
 
     End Sub
 
 End Class
 
 Public Class MyType
 
     Public MyField As String
 
     Public Sub New()
         Me.MyField = "Default field initialization value"
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source Array.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.Array.Iteration">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with an <see cref="T:System.Array"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.Array.Iteration.ForEach``1(``0[],System.Action{``0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs the specified action on each element of the source collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Array"/>.
 </param>
 
 <param name="action">
 The <see cref="T:System.Action`1"/> delegate to perform on each element of the <see cref="T:System.Array"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.Array.Resizing">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with an <see cref="T:System.Array"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.Array.Resizing.Resize``1(``0[],System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Resizes the number of elements of the source collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim myArray(50) As Integer
 Console.WriteLine(String.Format("{0,-12}: {1}", "Initial Size", myArray.Length))
 
 myArray = myArray.Resize(myArray.Length - 51)
 Console.WriteLine(String.Format("{0,-12}: {1}", "New Size", myArray.Length))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The array <see cref="T:System.Type"/>.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Array"/>.
 </param>
 
 <param name="newSize">
 The new size.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resized <see cref="T:System.Array"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 newSize;Value greater than 0 is required.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.IDictionary.TypeConversion">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with an <see cref="T:System.Collections.Generic.IDictionary`2"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IDictionary.TypeConversion.ToHashtable(System.Collections.IDictionary)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts an <see cref="T:System.Collections.IDictionary"/> to <see cref="T:System.Collections.Hashtable"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.IDictionary"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Collections.Hashtable"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IDictionary.TypeConversion.ToNameValueCollection(System.Collections.IDictionary)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts an <see cref="T:System.Collections.IDictionary"/> to <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.IDictionary"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.IEnumerableOfByte.TypeConversion">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerableOfByte.TypeConversion.ToString(System.Collections.Generic.IEnumerable{System.Byte},System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts a byte sequence to its String representation using the specified character <see cref="T:System.Text.Encoding"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MessageBox.Show(New Byte() {84, 101, 115, 116}.ToString(Encoding.Default))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="N:Elektro.Core.Generics.Extensions.Array"/>.
 </param>
 
 <param name="enc">
 The character <see cref="T:System.Text.Encoding"/> to decode the bytes.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The String representation.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerableOfByte.TypeConversion.ToString(System.Byte[],System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts a byte sequence to its String representation using the specified character <see cref="T:System.Text.Encoding"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MessageBox.Show(New Byte() {84, 101, 115, 116}.ToString(Encoding.Default))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Array"/>.
 </param>
 
 <param name="enc">
 The character <see cref="T:System.Text.Encoding"/> to decode the bytes.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The String representation.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.IEnumerableOfString.Count">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerableOfString.Count.CountEmptyItems(System.Collections.Generic.IEnumerable{System.String})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Counts the empty items of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim emptyLinesCount As Integer = {"Hello", "   ", "World!"}.CountEmptyItems
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The total amount of empty items.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerableOfString.Count.CountNonEmptyItems(System.Collections.Generic.IEnumerable{System.String})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Counts the non-empty items of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim nonEmptyLinesCount As Integer = {"Hello", "   ", "World!"}.CountNonEmptyItems
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The total amount of non-empty items.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.IEnumerableOfString.Find">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerableOfString.Find.FindExact(System.Collections.Generic.IEnumerable{System.String},System.String,System.StringComparison)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Finds the elements that are equals to the specified string on the source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim col As IEnumerable(Of String) = {"Hello World !!", "a", "b", "c"}
 Debug.WriteLine(String.Join(", ", col.FindExact(searchString:="a", stringComparison:=StringComparison.OrdinalIgnoreCase)))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source collections.
 </param>
 
 <param name="searchString">
 The string to search for.
 </param>
 
 <param name="stringComparison">
 The string comparison rule.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerableOfString.Find.FindByContains(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Finds the elements that contains the specified string on the source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim col As IEnumerable(Of String) = {"Hello World !!", "a", "b", "c"}
 Debug.WriteLine(String.Join(", ", col.FindByContains(searchString:="World", ignoreCase:=True)))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source collections.
 </param>
 
 <param name="searchString">
 The string to search for.
 </param>
 
 <param name="ignoreCase">
 If set to <see langword="True"/>, performs a non sensitive string-case comparison.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerableOfString.Find.FindByLike(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs a String-Like pattern search on the source <see cref="T:System.Collections.Generic.IEnumerable`1"/> 
 and returns all the matches.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim col As IEnumerable(Of String) = {"Hello World", "a", "b", "c"}
 Debug.WriteLine(String.Join(", ", col.FindByLike(likePattern:="*hello*", ignoreCase:=True)))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source collections.
 </param>
 
 <param name="likePattern">
 The pattern comparison to use with the <see langword="Like"/> operator.
 </param>
 
 <param name="ignoreCase">
 If set to <see langword="True"/>, performs a non sensitive string-case comparison.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.IEnumerableOfString.Remove">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerableOfString.Remove.RemoveExact(System.Collections.Generic.IEnumerable{System.String},System.String,System.StringComparison)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes the elements that are equals to the specified string on the source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim col As IEnumerable(Of String) = {"Hello World !!", "a", "b", "c"}
 Debug.WriteLine(String.Join(", ", col.RemoveExact(searchString:="Hello", ignoreCase:=True)))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source collections.
 </param>
 
 <param name="searchString">
 The string to search for.
 </param>
 
 <param name="stringComparison">
 The string comparison rule.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerableOfString.Remove.RemoveByContains(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes the elements that contains the specified string on the source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim col As IEnumerable(Of String) = {"Hello World !!", "a", "b", "c"}
 Debug.WriteLine(String.Join(", ", col.RemoveByContains(searchString:="Hello", ignoreCase:=True)))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source collections.
 </param>
 
 <param name="searchString">
 The string to search for.
 </param>
 
 <param name="ignoreCase">
 If set to <see langword="True"/>, performs a non sensitive string-case comparison.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerableOfString.Remove.RemoveByLike(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs a String-Like pattern search on the source <see cref="T:System.Collections.Generic.IEnumerable`1"/> 
 and removes all the matches.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim col As IEnumerable(Of String) = {"Hello World", "a", "b", "c"}
 Debug.WriteLine(String.Join(", ", col.RemoveByLike(likePattern:="*hello*", ignoreCase:=True)))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source collections.
 </param>
 
 <param name="likePattern">
 The pattern comparison to use with the <see langword="Like"/> operator.
 </param>
 
 <param name="ignoreCase">
 If set to <see langword="True"/>, performs a non sensitive string-case comparison.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.IEnumerableOfString.Sort">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IEnumerableOfString.Sort.BubbleSort(System.Collections.Generic.IEnumerable{System.String})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sorts the source <see cref="T:System.Collections.Generic.IEnumerable`1"/> by BubbleSort method.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim col As IEnumerable(Of String) = {"10", "333", "2", "45"}
 Debug.WriteLine(String.Join(", ", col.BubbleSort))
 </code>
 </example>
 ---------------------------------------------------------------------------------------------------- 
 <param name="sender">
 The source collection.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.IList.FindIndexOf">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with an <see cref="T:System.Collections.Generic.IList`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.IList.FindIndexOf.IndexOf``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IList`1"/>.
 </param>
 
 <param name="predicate">
 A function to test each element for a condition..
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The index of item if found in the list; otherwise, <c>-1</c>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.NameValueCollection.TypeConversion">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with an <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.NameValueCollection.TypeConversion.ToDictionary(System.Collections.Specialized.NameValueCollection)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts a <see cref="T:System.Collections.Specialized.NameValueCollection"/> 
 to <see cref="T:System.Collections.Generic.Dictionary`2"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Collections.Generic.Dictionary`2"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.NameValueCollection.TypeConversion.ToGETRequestString(System.Collections.Specialized.NameValueCollection)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts the name and values of a <see cref="T:System.Collections.Specialized.NameValueCollection"/> 
 to a formatted <c>GET</c> web-request string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim baseAddress As String = "https://www.google.com/search?"
 Dim params As New NameValueCollection()
 params.Add("q", "Hello World")
 params.Add("lr", "lang_en")
 params.Add("ie", "utf-8")
 
 Console.WriteLine(String.Format("{0}{1}", baseAddress, params.ToGETRequestString()))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <c>GET</c> request string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.NameValueCollection.TypeConversion.ToGETRequestString(System.Collections.Specialized.NameValueCollection,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts the name and values of a <see cref="T:System.Collections.Specialized.NameValueCollection"/> 
 to a formatted <c>GET</c> web-request string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim params As New NameValueCollection()
 params.Add("q", "Hello World")
 params.Add("lr", "lang_en")
 params.Add("ie", "utf-8")
 
 Console.WriteLine(params.ToGETRequestString(baseAddress:="https://www.google.com/search?"))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <c>GET</c> request string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.Queue.Dequeueing">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Collections.Generic.Queue`1"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.Queue.Dequeueing.Dequeue``1(System.Collections.Generic.Queue{``0},System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes and returns the specified amount of objects from the beginning of the <see cref="T:System.Collections.Generic.Queue`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim myQueue As New Queue(Of String)
 myQueue.Enqueue("1")
 myQueue.Enqueue("2")
 myQueue.Enqueue("3")
 
 Dim items As String() = myQueue.Dequeue(3)
 
 MsgBox(String.Join(",", items))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.Queue`1"/>.
 </param>
 
 <param name="amount">
 The amount of items to pop.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The objects removed from the beginning of the <see cref="T:System.Collections.Generic.Queue`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 amount
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.Queue.Enqueueing">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Collections.Generic.Queue`1"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.Queue.Enqueueing.EnqueueRange``1(System.Collections.Generic.Queue{``0}@,``0[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds a range of objects in the incoming order to the end of the source <see cref="T:System.Collections.Generic.Queue`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim myQueue As New Queue(Of String)
 myQueue.EnqueueRange({"T", "E", "S", "T"})
 
 Do Until myQueue.Count = 0
     Console.WriteLine(myStack.Dequeue)
 Loop
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.Queue`1"/>.
 </param>
 
 <param name="items">
 The items to enqueue.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.Queue.Peeking">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Collections.Generic.Queue`1"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.Queue.Peeking.Peek``1(System.Collections.Generic.Queue{``0},System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns the specified amount of objects from the beginning of the <see cref="T:System.Collections.Generic.Queue`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim myQueue As New Queue(Of String)
 myQueue.Enqueue("1")
 myQueue.Enqueue("2")
 myQueue.Enqueue("3")
 
 Dim items As String() = myQueue.Peek(3)
 
 MsgBox(String.Join(",", items))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.Queue`1"/>.
 </param>
 
 <param name="amount">
 The amount of items to peek.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The objects from the beginning of the <see cref="T:System.Collections.Generic.Queue`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 amount
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.Queue.Reversing">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Collections.Generic.Queue`1"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.Queue.Reversing.Reverse``1(System.Collections.Generic.Queue{``0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Inverts the order of the elements of the source <see cref="T:System.Collections.Generic.Queue`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim myQueue As New Queue(Of String)
 With myQueue
     .Enqueue("T")
     .Enqueue("E")
     .Enqueue("S")
     .Enqueue("T")
 End With
 
 myQueue = myQueue.Reverse
 
 Do Until myQueue.Count = 0
     Console.WriteLine(myQueue.Dequeue)
 Loop
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.Queue`1"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Collections.Generic.Queue`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.Stack.Peeking">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Collections.Generic.Stack`1"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.Stack.Peeking.Peek``1(System.Collections.Generic.Stack{``0},System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns the specified amount of objects from the top of the <see cref="T:System.Collections.Generic.Stack`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim myStack As New Stack(Of String)
 myStack.Push("1")
 myStack.Push("2")
 myStack.Push("3")
 
 Dim items As String() = myStack.Peek(3)
 
 MsgBox(String.Join("", items))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.Stack`1"/>.
 </param>
 
 <param name="amount">
 The amount of items to peek.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The objects from the top of the <see cref="T:System.Collections.Generic.Stack`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 amount
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.Stack.Poping">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Collections.Generic.Stack`1"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.Stack.Poping.Pop``1(System.Collections.Generic.Stack{``0},System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes and returns the specified amount of objects from the top of the <see cref="T:System.Collections.Generic.Stack`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim myStack As New Stack(Of String)
 myStack.Push("1")
 myStack.Push("2")
 myStack.Push("3")
 
 Dim items As String() = myStack.Pop(3)
 
 MsgBox(String.Join("", items))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.Stack`1"/>.
 </param>
 
 <param name="amount">
 The amount of items to pop.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The objects removed from the top of the <see cref="T:System.Collections.Generic.Stack`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 amount
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.Stack.Pushing">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Collections.Generic.Stack`1"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.Stack.Pushing.PushRange``1(System.Collections.Generic.Stack{``0}@,``0[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Inserts a range of objects in the incoming order at the top of the source <see cref="T:System.Collections.Generic.Stack`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim myStack As New Stack(Of String)
 myStack.PushRange({"T", "E", "S", "T"})
 
 Do Until myStack.Count = 0
     Console.WriteLine(myStack.Pop)
 Loop
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.Stack`1"/>.
 </param>
 
 <param name="items">
 The items to push.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Extensions.Stack.Reversing">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Collections.Generic.Stack`1"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Extensions.Stack.Reversing.Reverse``1(System.Collections.Generic.Stack{``0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Inverts the order of the elements of the source <see cref="T:System.Collections.Generic.Stack`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim myStack As New Stack(Of String)
 With myStack
     .Push("T")
     .Push("E")
     .Push("S")
     .Push("T")
 End With
 
 myStack = myStack.Reverse
 
 Do Until myStack.Count = 0
     Console.WriteLine(myStack.Pop)
 Loop
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.Stack`1"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Collections.Generic.Stack`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Enums.EnumFindDirection">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a direction to find a value in a <see cref="T:System.Enum"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Generics.Enums.EnumFindDirection.Nearest">
 <summary>
 Searchs for the nearest value.
 </summary>
</member>
<member name="F:Elektro.Core.Generics.Enums.EnumFindDirection.Smaller">
 <summary>
 Search for a smaller value.
 </summary>
</member>
<member name="F:Elektro.Core.Generics.Enums.EnumFindDirection.SmallerOrSame">
 <summary>
 Search for a smaller or the same value.
 </summary>
</member>
<member name="F:Elektro.Core.Generics.Enums.EnumFindDirection.Greater">
 <summary>
 Search for a greater value.
 </summary>
</member>
<member name="F:Elektro.Core.Generics.Enums.EnumFindDirection.GreaterOrSame">
 <summary>
 Search for a greater or the same value.
 </summary>
</member>
<member name="T:Elektro.Core.Generics.Tools.EnumUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Enum"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Tools.EnumUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.Generics.Tools.EnumUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Tools.EnumUtil.FindNearestEnumValue``1(System.Int64,Elektro.Core.Generics.Enums.EnumFindDirection)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the nearest value of an <see cref="T:System.Enum"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Enum Bitrate As Integer
     Kbps128 = 128
     Kbps192 = 192
     Kbps256 = 256
     Kbps320 = 320
 End Enum
 
 Private Sub Test() Handles MyBase.Shown
 
     Dim findValue As Bitrate = FindNearestEnumValue(Of Bitrate)(192, EnumFindDirection.GreaterOrSame)
 
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of <see cref="T:System.Enum"/>.
 </typeparam>
 
 <param name="value">
 The existing value.
 </param>
 
 <param name="direction">
 The find direction of the nearest value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The nearest value in the specified <see cref="T:System.Enum"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Tools.EnumUtil.FindNearestEnumValue``1(System.String,Elektro.Core.Generics.Enums.EnumFindDirection)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the nearest value of an <see cref="T:System.Enum"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Enum Bitrate As Integer
     Kbps128 = 128
     Kbps192 = 192
     Kbps256 = 256
     Kbps320 = 320
 End Enum
 
 Private Sub Test() Handles MyBase.Shown
 
     Dim findValue As Bitrate = FindNearestEnumValue(Of Bitrate)("190", EnumFindDirection.Nearest)
 
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of <see cref="T:System.Enum"/>.
 </typeparam>
 
 <param name="value">
 The existing value.
 </param>
 
 <param name="direction">
 The find direction of the nearest value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The nearest value in the specified <see cref="T:System.Enum"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Tools.EnumUtil.FindNearestEnumValue``1(``0,Elektro.Core.Generics.Enums.EnumFindDirection)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the nearest value of an <see cref="T:System.Enum"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Enum Bitrate As Integer
     Kbps128 = 128
     Kbps192 = 192
     Kbps256 = 256
     Kbps320 = 320
 End Enum
 
 Private Sub Test() Handles MyBase.Shown
 
     Dim findValue As Bitrate = FindNearestEnumValue(Of Bitrate)(Bitrate.Kbps192, EnumFindDirection.Greater)
 
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of <see cref="T:System.Enum"/>.
 </typeparam>
 
 <param name="value">
 The existing value.
 </param>
 
 <param name="direction">
 The find direction of the nearest value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The nearest value in the specified <see cref="T:System.Enum"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Types.FixedQueue`1">
 ---------------------------------------------------------------------------------------------------- 
 <summary>
 Represents a <see cref="T:System.Collections.Generic.Queue`1"/> with a fixed capacity.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim queue As New FixedQueue(Of Integer)(maxCapacity:=5)
 
 For x As Integer = 0 To 10
     queue.Enqueue(x)
 Next
 
 For Each value As Integer In queue
     Console.WriteLine(value)
 Next
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of the queue items.
 </typeparam>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Generics.Types.FixedQueue`1.MaxCapacity">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the maximum capacity of this <see cref="T:Elektro.Core.Generics.Types.FixedQueue`1"/>, 
 bottom items beyond the specified capacity are discarded when a new item is pushed.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The maximum capacity of this <see cref="T:Elektro.Core.Generics.Types.FixedQueue`1"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Generics.Types.FixedQueue`1.maxCapacityB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The maximum capacity of this <see cref="T:Elektro.Core.Generics.Types.FixedQueue`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Generics.Types.FixedQueue`1.FreeSlots">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the amount of free slots onto this <see cref="T:Elektro.Core.Generics.Types.FixedQueue`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The amount of free slots.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Generics.Types.FixedQueue`1.IsEmpty">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value indicating whether this <see cref="T:Elektro.Core.Generics.Types.FixedQueue`1"/> is empty.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if empty; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Generics.Types.FixedQueue`1.IsFull">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value indicating whether this <see cref="T:Elektro.Core.Generics.Types.FixedQueue`1"/> is full.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if full; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Types.FixedQueue`1.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.Generics.Types.FixedQueue`1"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Types.FixedQueue`1.#ctor(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Generics.Types.FixedQueue`1"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="maxCapacity">
 The maximum queue capacity.
 <para></para>
 Bottom items beyond the specified capacity are discarded when a new item is pushed.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Types.FixedQueue`1.Enqueue(`0,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds an object to the end of this <see cref="T:Elektro.Core.Generics.Types.FixedQueue`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="item">
 The object to add to the queue.
 <para></para>
 The value can be null for reference types.
 </param>
 
 <param name="throwIfFullSlots">
 If <see langword="True"/>, a <see cref="T:System.OverflowException"/> is thrown if there isn't any free slot to add the item.
 <para></para>
 If <see langword="False"/> and there isn't any free slot to add the item, the last item on the queue is discarded.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.OverflowException">
 Any slot availiable.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Types.FixedQueue`1.GetHashCode">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Serves as a hash function for a particular type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Types.FixedQueue`1.GetType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the <see cref="T:System.Type"/> of the current instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The exact runtime type of the current instance.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Types.FixedQueue`1.Equals(System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="obj">
 Another object to compare to.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified <see cref="T:System.Object"/> is equal to this instance; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Types.FixedQueue`1.Equals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are considered equal.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the objects are considered equal; otherwise, <see langword="False"/>.
 <para></para>
 If both <paramref name="objA"/> and <paramref name="objB"/> are <see langword="Nothing"/>, 
 the method returns <see langword="True"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Types.FixedQueue`1.ReferenceEquals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are the same instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if <paramref name="objA"/> is the same instance as <paramref name="objB"/> 
 or if both are <see langword="Nothing"/>; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Types.FixedQueue`1.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a String that represents the current object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A string that represents the current object.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Generics.Types.FixedStack`1">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents a <see cref="T:System.Collections.Generic.Stack`1"/> with a fixed capacity.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim stack As New FixedStack(Of Integer)(maxCapacity:=5)
 
 For x As Integer = 0 To 10
     stack.Push(x)
 Next
 
 For Each value As Integer In stack
     Console.WriteLine(value)
 Next
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of the stack items.
 </typeparam>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Generics.Types.FixedStack`1.MaxCapacity">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the maximum capacity of this <see cref="T:Elektro.Core.Generics.Types.FixedStack`1"/>, 
 bottom items beyond the specified capacity are discarded when a new item is pushed.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The maximum capacity of this <see cref="T:Elektro.Core.Generics.Types.FixedStack`1"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Generics.Types.FixedStack`1.maxCapacityB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The maximum capacity of this <see cref="T:Elektro.Core.Generics.Types.FixedStack`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Generics.Types.FixedStack`1.FreeSlots">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the amount of free slots onto this <see cref="T:Elektro.Core.Generics.Types.FixedStack`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The amount of free slots.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Generics.Types.FixedStack`1.IsEmpty">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value indicating whether this <see cref="T:Elektro.Core.Generics.Types.FixedStack`1"/> is empty.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if empty; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Generics.Types.FixedStack`1.IsFull">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value indicating whether this <see cref="T:Elektro.Core.Generics.Types.FixedStack`1"/> is full.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if full; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Types.FixedStack`1.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.Generics.Types.FixedStack`1"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Types.FixedStack`1.#ctor(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Generics.Types.FixedStack`1"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="maxCapacity">
 The maximum stack capacity.
 <para></para>
 Bottom items beyond the specified capacity are discarded when a new item is pushed.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Types.FixedStack`1.Push(`0,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Inserts an object at the top of this <see cref="T:Elektro.Core.Generics.Types.FixedStack`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="item">
 The object to push onto the stack.
 <para></para>
 The value can be null for reference types.
 </param>
 
 <param name="throwIfFullSlots">
 If <see langword="True"/>, a <see cref="T:System.OverflowException"/> is thrown if there isn't any free slot to add the item.
 <para></para>
 If <see langword="False"/> and there isn't any free slot to add the item, the bottom item on the stack is discarded.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.OverflowException">
 Any slot availiable.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Types.FixedStack`1.GetHashCode">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Serves as a hash function for a particular type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Types.FixedStack`1.GetType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the <see cref="T:System.Type"/> of the current instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The exact runtime type of the current instance.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Types.FixedStack`1.Equals(System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="obj">
 Another object to compare to.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified <see cref="T:System.Object"/> is equal to this instance; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Types.FixedStack`1.Equals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are considered equal.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the objects are considered equal; otherwise, <see langword="False"/>.
 <para></para>
 If both <paramref name="objA"/> and <paramref name="objB"/> are <see langword="Nothing"/>, 
 the method returns <see langword="True"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Types.FixedStack`1.ReferenceEquals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are the same instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if <paramref name="objA"/> is the same instance as <paramref name="objB"/> 
 or if both are <see langword="Nothing"/>; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Generics.Types.FixedStack`1.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a String that represents the current object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A string that represents the current object.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Extensions.DirectoryInfo.Access">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.IO.DirectoryInfo"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.DirectoryInfo.Access.HasRights(System.IO.DirectoryInfo,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source directory contains the specified user-rights.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dir As New DirectoryInfo("C:\Directory\")
 Dim hasRights As Boolean = dir.HasRights(FileSystemRights.Read Or FileSystemRights.Write, AccessControlType.Allow)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.DirectoryInfo"/>.
 </param>
 
 <param name="rights">
 The user-rights.
 </param>
 
 <param name="accessControlType">
 The access control type, determines whether to check for allowed user-rights or denied user-rights.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the directory contains the user-rights;  otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.DirectoryInfo.Access.SetRights(System.IO.DirectoryInfo,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the user-rights of the source directory.
 </summary>
 ---------------------------------------------------------------------------------------------------- 
 <example> This is a code example.
 <code>
 Dim dir As New DirectoryInfo("C:\Directory\")
 dir.SetRights(FileSystemRights.FullControl, AccessControlType.Allow)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.DirectoryInfo"/>.
 </param>
 
 <param name="rights">
 The user-rights.
 </param>
 
 <param name="accessControlType">
 The access control type, determines whether to allowe user-rights or deny user-rights.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Extensions.DirectoryInfo.Deletion">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.IO.DirectoryInfo"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.DirectoryInfo.Deletion.Recycle(System.IO.FileInfo,Microsoft.VisualBasic.FileIO.UIOption)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sends the source directory to the Recycle Bin.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.DirectoryInfo"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Extensions.DirectoryInfo.Open">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.IO.DirectoryInfo"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.DirectoryInfo.Open.OpenInExplorer(System.IO.DirectoryInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Opens the source directory in Explorer.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.DirectoryInfo"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.DirectoryNotFoundException">
 Directory not found.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Extensions.DirectoryInfo.Copy">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.IO.DirectoryInfo"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.DirectoryInfo.Copy.CopyTo(System.IO.DirectoryInfo,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies the entire directory to another one.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.DirectoryInfo"/>.
 </param>
 
 <param name="targetDirectoryPath">
 The target directory path.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.IO.DirectoryInfo"/> instance that represents the target directory.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.DirectoryInfo.Copy.CopyTo(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies the entire directory to another one.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.DirectoryInfo"/>.
 </param>
 
 <param name="targetDirectory">
 The target <see cref="T:System.IO.DirectoryInfo"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Extensions.DirectoryInfo.Create">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.IO.DirectoryInfo"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.DirectoryInfo.Create.CreateAllDirectories(System.IO.DirectoryInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates all directories and subdirectories in the path.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.DirectoryInfo"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An object that represents the directory.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.DirectoryInfo.Create.CreateAllDirectories(System.IO.DirectoryInfo,System.Security.AccessControl.DirectorySecurity)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates all directories and subdirectories in the path.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.DirectoryInfo"/>.
 </param>
 
 <param name="directorySecurity">
 The access control to apply to the directory.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An object that represents the directory.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Extensions.DirectoryInfo.Parent">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.IO.DirectoryInfo"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.DirectoryInfo.Parent.HasParent(System.IO.DirectoryInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the directory has a parent directory.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.DirectoryInfo"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the directory has a parent directory, otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Extensions.DirectoryInfo.Renaming">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.IO.DirectoryInfo"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.DirectoryInfo.Renaming.Rename(System.IO.DirectoryInfo,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Renames the name of the directory.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.DirectoryInfo"/>.
 </param>
 
 <param name="name">
 The new name of the directory.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Extensions.DirectoryInfo.Size">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.IO.DirectoryInfo"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.DirectoryInfo.Size.GetSize(System.IO.DirectoryInfo,System.IO.SearchOption)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the size of the directory, in bytes.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.DirectoryInfo"/>.
 </param>
 
 <param name="searchOption">
 The <see cref="T:System.IO.SearchOption"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The directory size, in bytes.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Extensions.FileInfo.Open">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.IO.FileInfo"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.FileInfo.Open.OpenInExplorer(System.IO.FileInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Opens the specified file in Explorer.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.FileInfo"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 File or directory not found.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Extensions.FileInfo.Access">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.IO.FileInfo"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.FileInfo.Access.IsAccesible(System.IO.FileInfo,System.IO.FileAccess)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source file is accesible in the context of reading or writting to the file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim file As New FileInfo("C:\File.ext")
 Dim isAccesible As Boolean = file.IsAccesible(FileAccess.Read)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.FileInfo"/>.
 </param>
 
 <param name="fileAccess">
 The file access to check.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if file is accesible; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.FileInfo.Access.Lock(System.IO.FileInfo,System.IO.FileShare)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Locks read/write access to the specified file for other applications 
 (during the lifetime of the current application).
 <para></para>
 To unlock the file, just dispose the returned <see cref="T:System.IO.FileStream"/> object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim file As New FileInfo("C:\File.ext")
 Using fs As FileStream = file.Lock(FileShare.Read)
  ' ...
 End Using
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.FileInfo"/>.
 </param>
 
 <param name="fileShare">
 The type of access that other applications will have to this file.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.IO.FileStream"/> object that represents the file stream.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.FileInfo.Access.HasRights(System.IO.FileInfo,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source file contains the specified user-rights.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim file As New FileInfo("C:\File.ext")
 Dim hasRights As Boolean = file.HasRights(FileSystemRights.Read Or FileSystemRights.Write, AccessControlType.Allow)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.FileInfo"/>.
 </param>
 
 <param name="rights">
 The user-rights.
 </param>
 
 <param name="accessControlType">
 The access control type, determines whether to check for allowed user-rights or denied user-rights.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the file contains the user-rights;  otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.FileInfo.Access.SetRights(System.IO.FileInfo,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the user-rights of the source file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim file As New FileInfo("C:\File.ext")
 file.SetRights(FileSystemRights.Read Or FileSystemRights.Write, AccessControlType.Allow)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.FileInfo"/>.
 </param>
 
 <param name="rights">
 The user-rights.
 </param>
 
 <param name="accessControlType">
 The access control type, determines whether to allowe user-rights or deny user-rights.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Extensions.FileInfo.Deletion">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.IO.FileInfo"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.FileInfo.Deletion.Recycle(System.IO.FileInfo,Microsoft.VisualBasic.FileIO.UIOption)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sends the source file to the Recycle Bin.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.FileInfo"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Extensions.FileInfo.Copy">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.IO.FileInfo"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.FileInfo.Copy.CopyTo(System.IO.FileInfo,System.IO.DirectoryInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies the source file to the specified directory.
 <para></para>
 If the target file already exists, an <see cref="T:System.IO.IOException"/> is thrown.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.FileInfo"/>.
 </param>
 
 <param name="targetDirectory">
 The target directory.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.FileInfo.Copy.CopyTo(System.IO.FileInfo,System.IO.DirectoryInfo,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies the source file to the specified directory.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.FileInfo"/>.
 </param>
 
 <param name="targetDirectory">
 The target directory.
 </param>
 
 <param name="overwrite">
 If <see langword="True"/>, overwrites any existing file; 
 otherwise, if <see langword="False"/> and the target file already exists, an <see cref="T:System.IO.IOException"/> is thrown.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Extensions.FileInfo.Create">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.IO.FileInfo"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.FileInfo.Create.CreateAllDirectories(System.IO.FileInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates all directories and subdirectories in the path.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.FileInfo"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An object that represents the directory.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.FileInfo.Create.CreateAllDirectories(System.IO.FileInfo,System.Security.AccessControl.DirectorySecurity)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates all directories and subdirectories in the path.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.FileInfo"/>.
 </param>
 
 <param name="directorySecurity">
 The access control to apply to the directory.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An object that represents the directory.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Extensions.FileInfo.Filename">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.IO.FileInfo"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.FileInfo.Filename.HasExtension(System.IO.FileInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the path includes a file extension.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.FileInfo"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the path includes a file extension, otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.FileInfo.Filename.GetNameWithoutExtension(System.IO.FileInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the name of the file, without the extension.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.FileInfo"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The name of the file, minus the last period (.) and all characters following it.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Extensions.FileInfo.Move">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.IO.FileInfo"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.FileInfo.Move.MoveTo(System.IO.FileInfo,System.IO.DirectoryInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Moves the source file to the specified directory.
 <para></para>
 If the target file already exists, an <see cref="T:System.IO.IOException"/> is thrown.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.FileInfo"/>.
 </param>
 
 <param name="targetDirectory">
 The target directory.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.FileInfo.Move.MoveTo(System.IO.FileInfo,System.IO.DirectoryInfo,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Moves the source file to the specified directory.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.FileInfo"/>.
 </param>
 
 <param name="targetDirectory">
 The target directory.
 </param>
 
 <param name="overwrite">
 If <see langword="True"/>, overwrites any existing file; 
 otherwise, if <see langword="False"/> and the target file already exists, an <see cref="T:System.IO.IOException"/> is thrown.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Extensions.FileInfo.Renaming">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.IO.FileInfo"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.FileInfo.Renaming.RenameExtension(System.IO.FileInfo,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Changes the extension of the file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.FileInfo"/>.
 </param>
 
 <param name="extension">
 The new extension (with or without a leading period).
 <para></para>
 You can set <paramref name="extension"/> to <see langword="Nothing"/> to remove an existing extension.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.FileInfo.Renaming.Rename(System.IO.FileInfo,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Renames the name of the file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.FileInfo"/>.
 </param>
 
 <param name="name">
 The new name of the file.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.FileInfo.Renaming.Rename(System.IO.FileInfo,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Renames the name of the file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.FileInfo"/>.
 </param>
 
 <param name="name">
 The new name of the file.
 </param>
 
 <param name="extension">
 The new extension (with or without a leading period).
 <para></para>
 You can set <paramref name="extension"/> to <see langword="Nothing"/> to remove an existing extension.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Extensions.MemoryStream.Read">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.IO.MemoryStream"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.MemoryStream.Read.ReadToEnd(System.IO.MemoryStream)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reads all characters from the current position to the end of the <see cref="T:System.IO.MemoryStream"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.MemoryStream"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The rest of the stream as a string, from the current position to the end.
 <para></para>
 If the current position is at the end of the stream, returns an empty string ("").
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.MemoryStream.Read.ReadToEnd(System.IO.MemoryStream,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reads all characters from the current position to the end of the <see cref="T:System.IO.MemoryStream"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.MemoryStream"/>.
 </param>
 
 <param name="enc">
 The encoding.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The rest of the stream as a string, from the current position to the end.
 <para></para>
 If the current position is at the end of the stream, returns an empty string ("").
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.MemoryStream.Read.ReadToEnd(System.IO.MemoryStream,System.Int64)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reads all characters from the current position to the end of the <see cref="T:System.IO.MemoryStream"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.MemoryStream"/>.
 </param>
 
 <param name="position">
 The position.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The rest of the stream as a string, from the current position to the end.
 <para></para>
 If the current position is at the end of the stream, returns an empty string ("").
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.MemoryStream.Read.ReadToEnd(System.IO.MemoryStream,System.Text.Encoding,System.Int64)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reads all characters from the specified position to the end of the <see cref="T:System.IO.MemoryStream"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.MemoryStream"/>.
 </param>
 
 <param name="enc">
 The encoding.
 </param>
 
 <param name="position">
 The position.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The rest of the stream as a string, from the current position to the end.
 <para></para>
 If the current position is at the end of the stream, returns an empty string ("").
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Extensions.MemoryStream.Seek">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.IO.MemoryStream"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.MemoryStream.Seek.SeekToBegin(System.IO.MemoryStream@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the position to the beginning of the source stream.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.MemoryStream"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The new position within the source stream.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.MemoryStream.Seek.SeekToEnd(System.IO.MemoryStream@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the position to the end of the source stream.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.MemoryStream"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The new position within the source stream.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Extensions.MemoryStream.TypeConversion">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.IO.MemoryStream"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.MemoryStream.TypeConversion.ToStream(System.IO.MemoryStream)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts a <see cref="T:System.IO.MemoryStream"/> to a <see cref="T:System.IO.Stream"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.MemoryStream"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.IO.Stream"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Extensions.Stream.Read">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.IO.Stream"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.Stream.Read.ReadToEnd(System.IO.Stream)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reads all characters from the current position to the end of the <see cref="T:System.IO.Stream"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.Stream"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The rest of the stream as a string, from the current position to the end.
 <para></para>
 If the current position is at the end of the stream, returns an empty string ("").
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.Stream.Read.ReadToEnd(System.IO.Stream,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reads all characters from the current position to the end of the <see cref="T:System.IO.Stream"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.Stream"/>.
 </param>
 
 <param name="enc">
 The encoding.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The rest of the stream as a string, from the current position to the end.
 <para></para>
 If the current position is at the end of the stream, returns an empty string ("").
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.Stream.Read.ReadToEnd(System.IO.Stream,System.Int64)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reads all characters from the current position to the end of the <see cref="T:System.IO.Stream"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.Stream"/>.
 </param>
 
 <param name="position">
 The position.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The rest of the stream as a string, from the current position to the end.
 <para></para>
 If the current position is at the end of the stream, returns an empty string ("").
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.Stream.Read.ReadToEnd(System.IO.Stream,System.Text.Encoding,System.Int64)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reads all characters from the specified position to the end of the <see cref="T:System.IO.Stream"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.Stream"/>.
 </param>
 
 <param name="enc">
 The encoding.
 </param>
 
 <param name="position">
 The position.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The rest of the stream as a string, from the current position to the end.
 <para></para>
 If the current position is at the end of the stream, returns an empty string ("").
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Extensions.Stream.Seek">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.IO.Stream"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.Stream.Seek.SeekToBegin(System.IO.Stream@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the position to the beginning of the source stream.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.Stream"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The new position within the source stream.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.Stream.Seek.SeekToEnd(System.IO.Stream@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the position to the end of the source stream.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.Stream"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The new position within the source stream.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Extensions.Stream.TypeConversion">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.IO.Stream"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.Stream.TypeConversion.ToMemoryStream(System.IO.Stream)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts a <see cref="T:System.IO.Stream"/> to a <see cref="T:System.IO.MemoryStream"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.Stream"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.IO.MemoryStream"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Extensions.Stream.TypeConversion.ToArray(System.IO.Stream)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes the <see cref="T:System.IO.Stream"/> content to a <see cref="T:System.Byte"/> array.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.Stream"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Byte"/> array.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Enums.DateAttribute">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a date-type of a file.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Enums.DateAttribute.All">
 <summary>
 All the dates.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.DateAttribute.Creation">
 <summary>
 The date on where the file was created.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.DateAttribute.Access">
 <summary>
 The date on where the file was last time accessed.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.DateAttribute.Modification">
 <summary>
 The date on where the file was last time modified.
 </summary>
</member>
<member name="T:Elektro.Core.IO.Enums.DeviceEvent">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a type of input device event.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Enums.DeviceEvent.Key">
 <summary>
 A key is pressed.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.DeviceEvent.Mouse">
 <summary>
 A mouse button is click.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.DeviceEvent.Oem">
 <summary>
 An unidentified hardware source generated the event.
 <para></para>
 It could be a mouse or a keyboard event.
 </summary>
</member>
<member name="T:Elektro.Core.IO.Enums.DiscType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a disc-storage size, in bytes.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Enums.DiscType.Cd">
 <summary>
 A standard compact disc (700 Mb).
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.DiscType.Cd800">
 <summary>
 A compact disc of 800 Mb.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.DiscType.Dvd">
 <summary>
 A DVD-R (4.7 GB).
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.DiscType.DvdDL">
 <summary>
 A dual layer DVD-R (8.5 GB).
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.DiscType.Br">
 <summary>
 A Blu-ray disc (25 GB).
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.DiscType.BrDL">
 <summary>
 A dual layer Blu-ray disc (50 GB).
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.DiscType.BrMiniDisc">
 <summary>
 A Blu-ray mini-disc (7.8 GB).
 </summary>
</member>
<member name="T:Elektro.Core.IO.Enums.DriveFileSystem">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a HardDisk filesystem for Windows Operating System.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Enums.DriveFileSystem.Fat16">
 <summary>
 FAT16 FileSystem.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.DriveFileSystem.Fat32">
 <summary>
 FAT32 FileSystem.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.DriveFileSystem.Ntfs">
 <summary>
 NTFS FileSystem.
 </summary>
</member>
<member name="T:Elektro.Core.IO.Enums.DriveFormatResult">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a result status code of a drive format operation.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Enums.DriveFormatResult.Success">
 <summary>
 No error. Drive is formatted successful.
 </summary>
</member>
<member name="T:Elektro.Core.IO.Enums.HotkeyModifiers">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a key-modifier to assign for a hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/es-es/library/windows/desktop/ms646309%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Enums.HotkeyModifiers.None">
 <summary>
 Specifies any modifier.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.HotkeyModifiers.Alt">
 <summary>
 The <c>ALT</c> keyboard key.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.HotkeyModifiers.Control">
 <summary>
 The <c>CTRL</c> keyboard key.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.HotkeyModifiers.Shift">
 <summary>
 The <c>SHIFT</c> keyboard key.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.HotkeyModifiers.Win">
 <summary>
 The <c>WIN</c> keyboard key.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.HotkeyModifiers.NoRepeat">
 <summary>
 Changes the hotkey behavior so that the keyboard auto-repeat does not yield multiple hotkey notifications.
 </summary>
</member>
<member name="T:Elektro.Core.IO.Enums.KeyBehavior">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a keystroke action.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Enums.KeyBehavior.Hold">
 <summary>
 Hold the key.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.KeyBehavior.Release">
 <summary>
 Release the key.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.KeyBehavior.Press">
 <summary>
 Press the key.
 </summary>
</member>
<member name="T:Elektro.Core.IO.Enums.MouseButton">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a mouse button.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Enums.MouseButton.LeftDown">
 <summary>
 Hold the left button.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.MouseButton.LeftUp">
 <summary>
 Release the left button.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.MouseButton.RightDown">
 <summary>
 Hold the right button.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.MouseButton.RightUp">
 <summary>
 Release the right button.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.MouseButton.MiddleDown">
 <summary>
 Hold the middle button.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.MouseButton.MiddleUp">
 <summary>
 Release the middle button.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.MouseButton.LeftPress">
 <summary>
 Press the left button.
 ( Hold + Release )
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.MouseButton.RightPress">
 <summary>
 Press the Right button.
 ( Hold + Release )
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.MouseButton.MiddlePress">
 <summary>
 Press the Middle button.
 ( Hold + Release )
 </summary>
</member>
<member name="T:Elektro.Core.IO.Enums.MouseWheelDirection">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Indicates the wheel direction of a mouse device.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Enums.MouseWheelDirection.Down">
 <summary>
 The wheel is moved down.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.MouseWheelDirection.Up">
 <summary>
 The wheel is moved up.
 </summary>
</member>
<member name="T:Elektro.Core.IO.Enums.ShortcutHotkeyModifier">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a key-modifier to assign for a shortcut.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb774926%28v=vs.85%29.aspx"/>
 <para></para>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms646278%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Enums.ShortcutHotkeyModifier.None">
 <summary>
 Specifies any modifier.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.ShortcutHotkeyModifier.Shift">
 <summary>
 The <c>SHIFT</c> keyboard key.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.ShortcutHotkeyModifier.Control">
 <summary>
 The <c>CTRL</c> keyboard key.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.ShortcutHotkeyModifier.Alt">
 <summary>
 The <c>ALT</c> keyboard key.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.ShortcutHotkeyModifier.Win">
 <summary>
 The <c>WIN</c> keyboard key.
 </summary>
</member>
<member name="T:Elektro.Core.IO.Enums.ShortcutWindowState">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a window state for a shortcut file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/es-es/library/windows/desktop/bb761056%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Enums.ShortcutWindowState.None">
 <summary>
 Any state specified.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.ShortcutWindowState.Normal">
 <summary>
 Shortcut Window is at normal state.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.ShortcutWindowState.Maximized">
 <summary>
 Shortcut Window is Maximized.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.ShortcutWindowState.Minimized">
 <summary>
 Shortcut Window is Minimized.
 </summary>
</member>
<member name="T:Elektro.Core.IO.Enums.SizeUnits">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a size unit.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Enums.SizeUnits.Byte">
 <summary>
 Represents 1 Byte.
 <para></para>
 (8 Bits)
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.SizeUnits.Kilobyte">
 <summary>
 Represents 1 Kilobyte.
 <para></para>
 (1.024 Bytes)
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.SizeUnits.Megabyte">
 <summary>
 Represents 1 MegaByte.
 <para></para>
 (1.048.576 Bytes)
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.SizeUnits.Gigabyte">
 <summary>
 Represents 1 Gigabyte.
 <para></para>
 (1.073.741.824 Bytes)
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.SizeUnits.Terabyte">
 <summary>
 Represents 1 Terabyte.
 <para></para>
 (1.099.511.627.776 Bytes)
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.SizeUnits.Petabyte">
 <summary>
 Represents 1 Petabyte.
 <para></para>
 (1.125.899.906.842.624 Bytes)
 </summary>
</member>
<member name="F:Elektro.Core.IO.Enums.SizeUnits.Exabyte">
 <summary>
 Represents 1 Exabyte.
 <para></para>
 (1.152.921.504.606.846.976 Bytes)
 </summary>
</member>
<member name="T:Elektro.Core.IO.Tools.Devices">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains devices related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Devices.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.IO.Tools.Devices"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Tools.Devices.CpuId">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the CPU identifier of the current computer machine.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim cpuId As String = CpuId()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The CPU identifier.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Tools.Devices.MotherboardId">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the motherboard identifier of the current computer machine.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim mbdId As String = MotherboardId()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The motherboard identifier.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Tools.Devices.PrinterNames">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the names of all the printers installed on this computer.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim printerNames As IEnumerable(Of String) = PrinterNames()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The names of all the printers installed on this computer.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Devices.GetDriveFreeSpace(System.Char)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the free disk space, in bytes, of the specified drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim freeDiskSpace As String = String.Format("{0} GB", (Hardware.GetDriveFreeSpace("C"c) / (1024 ^ 3)).ToString("n2"))
 
 Dim freeDiskSpacePercent As String = String.Format("{0}% Free disk space",
                                                    (Hardware.GetDriveFreeSpace("C"c) /
                                                     (Hardware.GetDriveSize("C"c) / 100)).ToString("n1"))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="driveLetter">
 The drive letter.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The free disk space, in bytes.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.DriveNotFoundException">
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Devices.GetDriveSize(System.Char)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the total size, in bytes, of the specified drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim driveSize As String = String.Format("{0} GB", (Hardware.GetDriveSize("C"c) / (1024 ^ 3)).ToString("n2"))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="driveLetter">
 The drive letter.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The disk size, in bytes.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.DriveNotFoundException">
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Devices.GetDrivesOf(System.IO.DriveType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the connected drives of the specified <see cref="T:System.IO.DriveType"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim hardDrives As IEnumerable(Of DriveInfo) = Hardware.GetDrivesOf(DriveType.Fixed)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="driveType">
 The type of drive.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the connected drives of specified type.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Devices.FormatDrive(System.Char,System.Boolean,Elektro.Core.IO.Enums.DriveFileSystem,System.Int32,System.String,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Formats a drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Hardware.DriveFormatResult =
     Hardware.FormatDrive(driveLetter:="Z"c, quickFormat:=True,
                              fileSystem:=DriveFileSystem.Ntfs,
                              clusterSize:=4096, volumeLabel:="Drive Z")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/aa390432%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="driveLetter">
 The drive letter to format.
 </param>
 
 <param name="quickFormat">
 If set to <see langword="True"/>, formats the volume with a quick format by removing files from the disk 
 without scanning the disk for bad sectors.
 <para></para>
 Use this option only if the disk has been previously formatted, 
 and you know that the disk is not damaged.
 <para></para>
 The default value is <see langword="True"/>.
 </param>
 
 <param name="fileSystem">
 The filesystem format to use for this volume.
 <para></para>
 Default value is <see cref="F:Elektro.Core.IO.Enums.DriveFileSystem.Ntfs"/>.
 </param>
 
 <param name="clusterSize">
 The disk allocation unit size—cluster size.
 <para></para>
 All of the filesystems organizes the hard disk based on cluster size, 
 which represents the smallest amount of disk space that can be allocated to hold a file.
 <para></para>
 The smaller the cluster size you use, the more efficiently your disk stores information.
 <para></para>
 If no cluster size is specified during format, Windows picks defaults based on the size of the volume.
 These defaults have been selected to reduce the amount of space lost and to reduce fragmentation.
 <para></para> 
 For general use, the default settings are strongly recommended.
 </param>
 
 <param name="volumeLabel">
 The label to use for the new volume.
 <para></para>
 The volume label can contain up to <c>11</c> characters for FAT16 and FAT32 volumes, 
 and up to <c>32</c> characters for NTFS filesystem volumes.
 </param>
 
 <param name="enableCompression">
 Not implemented.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If format success, the return value is <see cref="F:Elektro.Core.IO.Enums.DriveFormatResult.Success"/>; otherwise;
 a <see cref="T:Elektro.Core.IO.Enums.DriveFormatResult"/> value indicating the error.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Volume-label for X filesystem can't be larger than Y characters.;volumeLabel
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Devices.PrintDocument(System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prints a document.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Hardware.PrintDocument("C:\File.txt", Hardware.GetPrinterNames.FirstOrDefault)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The document filepath.
 </param>
 
 <param name="printerName">
 The name of the printer to use.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Devices.SetPrimaryScreenResolution(System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the resolution of the primary screen.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 SetPrimaryScreenResolution(1920, 1080)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="width">
 The resolution width.
 </param>
 
 <param name="height">
 The resolution height.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Devices.SetPrimaryScreenResolution(System.Drawing.Size)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the resolution of the primary screen.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 SetPrimaryScreenResolution(New Size(1920, 1080))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="size">
 The resolution width and height.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Devices.BlockInput">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Blocks the keyboard and mouse input events.
 <para></para>
 When blocked, the user cannot send keystrokes or use the mouse.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.IOException">
 Input is already blocked.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Devices.UnblockInput">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Blocks the keyboard and mouse input.
 <para></para>
 When blocked, the user cannot send keystrokes or use the mouse.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.IOException">
 Input was not blocked.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Devices.GetCpuId">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the CPU identifier of the current computer machine.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim cpuId As String = GetCpuId()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The CPU identifier.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Devices.GetMotherboardId">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the motherboard identifier of the current computer machine.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim mbdId As String = Hardware.GetMotherboardId()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The motherboard identifier.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Devices.GetPrinterNames">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the names of all the printers installed on this computer.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim printerNames As IEnumerable(Of String) = Hardware.GetPrinterNames()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The names of all the printers installed on this computer.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Tools.Directories">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains directory related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Directories.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.IO.Tools.Directories"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Directories.OpenInExplorer(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Opens the specified directory in Explorer.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="directoryPath">
 The directory path.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 File or directory not found.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Directories.OpenInExplorer(System.IO.DirectoryInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Opens the specified directory in Explorer.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="directory">
 The source directory.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 File or directory not found.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Directories.GetSize(System.String,System.IO.SearchOption)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the size of a directory, in bytes.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dirsize As Long = GetSize("C:\Directory\", SearchOption.AllDirectories)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="directoryPath">
 The directory path.
 </param>
 
 <param name="searchOption">
 The <see cref="T:System.IO.SearchOption"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The directory size, in bytes.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Directories.HasAttributes(System.String,System.IO.FileAttributes)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value indicating whether a directory contains the specified directory-attribute(s).
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim hasAttribute As Boolean = HasAttributesAttributes("C:\Directory\", FileAttributes.Hidden Or FileAttributes.ReadOnly)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="directoryPath">
 The directory path.
 </param>
 
 <param name="attributes">
 The directory attribute(s).
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if file contains the directory-attribute(s), <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Directories.SetAttributes(System.String,System.IO.FileAttributes)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the file-attribute(s) of the specified directory.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 SetAttributes("C:\Directory\", FileAttributes.Hidden Or FileAttributes.ReadOnly)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="directoryPath">
 The directory path.
 </param>
 
 <param name="attributes">
 The directory attribute(s) to set.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Directories.AddAttributes(System.String,System.IO.FileAttributes)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds directory-attribute(s) to the specified directory.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 AddAttributes("C:\Directory\", FileAttributes.Hidden Or FileAttributes.ReadOnly)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="directoryPath">
 The directory path.
 </param>
 
 <param name="attributes">
 The directory attribute(s) to add.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Directories.RemoveAttributes(System.String,System.IO.FileAttributes)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes directory-attribute(s) from the specified directory.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 RemoveAttributes("C:\Directory\", FileAttributes.Hidden Or FileAttributes.ReadOnly)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="directoryPath">
 The directory path.
 </param>
 
 <param name="attributes">
 The directory attribute(s) to remove.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Directories.HasRights(System.String,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a directory contains the specified user-rights.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim hasRights As Boolean = HasRights("C:\Directory\",
                                      FileSystemRights.Read Or FileSystemRights.Write,
                                      AccessControlType.Allow)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="directoryPath">
 The directory path.
 </param>
 
 <param name="rights">
 The user-rights.
 </param>
 
 <param name="accessControlType">
 The access control type, determines whether to check for allowed user-rights or denied user-rights.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the directory contains the user-rights;  otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Directories.HasRights(System.IO.DirectoryInfo,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a directory contains the specified user-rights.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dir As New DirectoryInfo("C:\Directory\")
 Dim hasRights As Boolean = HasRights(dir,
                                      FileSystemRights.Read Or FileSystemRights.Write,
                                      AccessControlType.Allow)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="directory">
 The source directory.
 </param>
 
 <param name="rights">
 The user-rights.
 </param>
 
 <param name="accessControlType">
 The access control type, determines whether to check for allowed user-rights or denied user-rights.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the directory contains the user-rights;  otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Directories.SetRights(System.String,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the user-rights of a directory.
 </summary>
 ---------------------------------------------------------------------------------------------------- 
 <example> This is a code example.
 <code>
 SetRights("C:\Directory\", FileSystemRights.FullControl, AccessControlType.Allow)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="directoryPath">
 The directory path.
 </param>
 
 <param name="rights">
 The user-rights.
 </param>
 
 <param name="accessControlType">
 The access control type, determines whether to allowe user-rights or deny user-rights.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Directories.SetRights(System.IO.DirectoryInfo,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the user-rights of a directory.
 </summary>
 ---------------------------------------------------------------------------------------------------- 
 <example> This is a code example.
 <code>
 Dim dir As New DirectoryInfo("C:\Directory\")
 SetRights(dir, FileSystemRights.FullControl, AccessControlType.Allow)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="directory">
 The source directory.
 </param>
 
 <param name="rights">
 The user-rights.
 </param>
 
 <param name="accessControlType">
 The access control type, determines whether to allowe user-rights or deny user-rights.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Directories.GetDirs(System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the directories those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dirs As List(Of DirectoryInfo) =
     GetDirs("C:\Windows\System32", SearchOption.AllDirectories).ToList
 
 Dim dirs As IEnumerable(Of DirectoryInfo) =
     GetDirs(dirPath:="C:\Windows\System32",
             searchOption:=SearchOption.TopDirectoryOnly,
             dirPathPatterns:={"*"},
             dirNamePatterns:={"*Microsoft*"},
             ignoreCase:=True,
             throwOnError:=True)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="dirPath">
 The root directory path to search for directories.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 
 <param name="dirPathPatterns">
 The directory path pattern(s) to match.
 </param>
 
 <param name="dirNamePatterns">
 The directory name pattern(s) to match.
 </param>
 
 <param name="ignoreCase">
 If <see langword="True"/>, ignores the comparing case of <paramref name="dirPathPatterns"/> and <paramref name="dirNamePatterns"/> patterns.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to directory.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the dirrectories information.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">dirPath or searchOption
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Directories.GetDirPaths(System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the filepaths those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dirPaths As List(Of String) =
     GetDirPaths("C:\Windows\System32", SearchOption.AllDirectories).ToList
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="dirPath">
 The root directory path to search for directories.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 
 <param name="dirPathPatterns">
 The directory path pattern(s) to match.
 </param>
 
 <param name="dirNamePatterns">
 The directory name pattern(s) to match.
 </param>
 
 <param name="ignoreCase">
 If <see langword="True"/>, ignores the comparing case of <paramref name="dirPathPatterns"/> and <paramref name="dirNamePatterns"/> patterns.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to directory.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the directory paths.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">dirPath or searchOption
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Directories.Rename(System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Renames a directory.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Rename("C:\Directory\", "new directory name")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceDirPath">
 The source directory path.
 </param>
 
 <param name="targetDirName">
 The target directory name.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.DirectoryNotFoundException">
 Source directory not found.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Directories.IsDirectory(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified directory is really a directory.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="directoryPath">
 The source directory path.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.FileDirSearcher.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.IO.Tools.FileDirSearcher"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.FileDirSearcher.GetFiles(System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the files those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="dirPath">
 The root directory path to search for files.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 
 <param name="fileNamePatterns">
 The file name pattern(s) to match.
 </param>
 
 <param name="fileExtPatterns">
 The file extension pattern(s) to match.
 </param>
 
 <param name="ignoreCase">
 If <see langword="True"/>, ignores the comparing case of <paramref name="fileNamePatterns"/> and <paramref name="fileExtPatterns"/> patterns.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to file or directory.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the files information.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">dirPath or searchOption
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.FileDirSearcher.GetFilePaths(System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the filepaths those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="dirPath">
 The root directory path to search for files.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 
 <param name="fileNamePatterns">
 The file name pattern(s) to match.
 </param>
 
 <param name="fileExtPatterns">
 The file extension pattern(s) to match.
 </param>
 
 <param name="ignoreCase">
 If <see langword="True"/>, ignores the comparing case of <paramref name="fileNamePatterns"/> and <paramref name="fileExtPatterns"/> patterns.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to file or directory.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the filepaths.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">dirPath or searchOption
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.FileDirSearcher.GetDirs(System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the directories those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="dirPath">
 The root directory path to search for directories.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 
 <param name="dirPathPatterns">
 The directory path pattern(s) to match.
 </param>
 
 <param name="dirNamePatterns">
 The directory name pattern(s) to match.
 </param>
 
 <param name="ignoreCase">
 If <see langword="True"/>, ignores the comparing case of <paramref name="dirPathPatterns"/> and <paramref name="dirNamePatterns"/> patterns.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to directory.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the dirrectories information.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">dirPath or searchOption
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.FileDirSearcher.GetDirPaths(System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the filepaths those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="dirPath">
 The root directory path to search for directories.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 
 <param name="dirPathPatterns">
 The directory path pattern(s) to match.
 </param>
 
 <param name="dirNamePatterns">
 The directory name pattern(s) to match.
 </param>
 
 <param name="ignoreCase">
 If <see langword="True"/>, ignores the comparing case of <paramref name="dirPathPatterns"/> and <paramref name="dirNamePatterns"/> patterns.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to directory.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the directory paths.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">dirPath or searchOption
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.FileDirSearcher.AnalyzePath(System.String@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Analyzes a directory path and perform specific changes on it.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="dirPath">
 The directory path.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">dirPath;Value is null, empty, or white-spaced.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.FileDirSearcher.AnalyzeArgs(System.String,System.IO.SearchOption)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Analyzes the specified directory values.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="dirPath">
 The root directory path to search for files.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">dirPath or searchOption
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.FileDirSearcher.SetupDirInfoObject(System.String,System.IO.DirectoryInfo@,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Tries to instance the byreferred <see cref="T:System.IO.DirectoryInfo"/> object using the given directory path.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="dirPath">
 The directory path used to instance the byreffered <see cref="T:System.IO.DirectoryInfo"/> object.
 </param>
 
 <param name="dirInfo">
 The byreffered <see cref="T:System.IO.DirectoryInfo"/> object to instance it using the given directory path.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to directory.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.FileDirSearcher.SetupFileDirCollection``1(System.Func{System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{``0}},System.Func{System.String,System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{``0}},System.String,System.String,System.Collections.Generic.IEnumerable{``0}@,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Tries to instance the byreferred <paramref name="col"/> object using the given directory path.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="A">
 The type of the <paramref name="col"/> object used to cast and fill the byreffered collection.
 </typeparam>
 
 <param name="objectAction">
 The method to invoke, only for <see cref="T:System.IO.FileInfo"/> or <see cref="T:System.IO.DirectoryInfo"/> objects, this parameter can be <see langword="Nothing"/>.
 </param>
 
 <param name="sharedAction">
 The method to invoke, only for filepaths or directorypaths, this parameter can be <see langword="Nothing"/>.
 </param>
 
 <param name="dirPath">
 The directory path used to instance the byreffered <paramref name="col"/> object.
 </param>
 
 <param name="searchPattern">
 The search pattern to list files or directories.
 </param>
 
 <param name="col">
 The byreffered <see cref="T:System.Collections.Generic.IEnumerable`1"/> object to instance it using the given directory path.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to file or directory.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.FileDirSearcher.IsMatchPattern(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether at least one of the specified patterns matches the given value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="value">
 The value, which can be a filename, file extension, direcrory path, or directory name.
 </param>
 
 <param name="patterns">
 The patterns to match the given value.
 </param>
 
 <param name="ignoreCase">
 If set to <see langword="True"/>, compares ignoring string-case rules.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> at least one of the specified patterns matches the given value; <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.FileDirSearcher.RunNextTasks``1(System.Action{System.Collections.Concurrent.ConcurrentQueue{``0},System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean},System.Collections.Concurrent.ConcurrentQueue{``0},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Runs the next collector tasks synchronouslly.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T"></typeparam>
 <param name="action">
 The collector method to invoke.
 </param>
 
 <param name="queue">
 The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance.
 </param>
 
 <param name="dirPath">
 The directory path.
 </param>
 
 <param name="firstPatterns">
 The first comparison patterns.
 </param>
 
 <param name="secondPatterns">
 The second comparison patterns.
 </param>
 
 <param name="ignoreCase">
 If set to <see langword="True"/>, compares ignoring string-case rules.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to file or directory.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.FileDirSearcher.CollectFiles(System.Collections.Concurrent.ConcurrentQueue{System.IO.FileInfo},System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Collects the files those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="queue">
 The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to enqueue new files.
 </param>
 
 <param name="dirPath">
 The root directory path to search for files.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 
 <param name="fileNamePatterns">
 The file name pattern(s) to match.
 </param>
 
 <param name="fileExtPatterns">
 The file extension pattern(s) to match.
 </param>
 
 <param name="ignoreCase">
 If <see langword="True"/>, ignores the comparing case of <paramref name="fileNamePatterns"/> and <paramref name="fileExtPatterns"/> patterns.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to file or directory.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.FileDirSearcher.CollectFilePaths(System.Collections.Concurrent.ConcurrentQueue{System.String},System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Collects the filepaths those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="queue">
 The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to enqueue new filepaths.
 </param>
 
 <param name="dirPath">
 The root directory path to search for files.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 
 <param name="fileNamePatterns">
 The file name pattern(s) to match.
 </param>
 
 <param name="fileExtPatterns">
 The file extension pattern(s) to match.
 </param>
 
 <param name="ignoreCase">
 If <see langword="True"/>, ignores the comparing case of <paramref name="fileNamePatterns"/> and <paramref name="fileExtPatterns"/> patterns.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to file or directory.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.FileDirSearcher.CollectDirs(System.Collections.Concurrent.ConcurrentQueue{System.IO.DirectoryInfo},System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Collects the directories those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="queue">
 The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to enqueue new directories.
 </param>
 
 <param name="dirPath">
 The root directory path to search for directories.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 
 <param name="dirPathPatterns">
 The directory path pattern(s) to match.
 </param>
 
 <param name="dirNamePatterns">
 The directory name pattern(s) to match.
 </param>
 
 <param name="ignoreCase">
 If <see langword="True"/>, ignores the comparing case of <paramref name="dirPathPatterns"/> and <paramref name="dirNamePatterns"/> patterns.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to directory.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.FileDirSearcher.CollectDirPaths(System.Collections.Concurrent.ConcurrentQueue{System.String},System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Collects the directory paths those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="queue">
 The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to enqueue new directory paths.
 </param>
 
 <param name="dirPath">
 The root directory path to search for directories.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 
 <param name="dirPathPatterns">
 The directory path pattern(s) to match.
 </param>
 
 <param name="dirNamePatterns">
 The directory name pattern(s) to match.
 </param>
 
 <param name="ignoreCase">
 If <see langword="True"/>, ignores the comparing case of <paramref name="dirPathPatterns"/> and <paramref name="dirNamePatterns"/> patterns.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to directory.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.FileDirUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.IO.Tools.FileDirUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.FileDirUtil.InternalOpenInExplorer(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Opens the specified file or folder in Explorer.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="itemPath">
 The file or folder path.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 File or directory not found.;itemPath
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.FileDirUtil.InternalHasRights(System.Security.AccessControl.AuthorizationRuleCollection,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a <see cref="T:System.Security.AccessControl.AuthorizationRuleCollection"/> contains the specified user-rights.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="acl">
 A collection of authorization rules.
 </param>
 
 <param name="rights">
 The user-rights.
 </param>
 
 <param name="access">
 The access control type, determines whether to check for allowed user-rights or denied user-rights.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the <see cref="T:System.Security.AccessControl.AuthorizationRuleCollection"/> contains the user-rights; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Tools.Files">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains file related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.IO.Tools.Files"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.OpenInExplorer(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Opens the specified file in Explorer.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The filepath.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 File or directory not found.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.OpenInExplorer(System.IO.FileInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Opens the specified file in Explorer.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="file">
 The source file.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 File or directory not found.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.Compare(System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Compares two files byte by byte to determine if they are equals.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim equals As Boolean = Compare("C:\File1.ext", "C:\file2.ext")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="fileA">
 The first file.
 </param>
 
 <param name="fileB">
 The second file.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if files are equals, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.Compare(System.IO.FileInfo,System.IO.FileInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Compares two files byte by byte to determine if they are equals.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim equals As Boolean = Compare("C:\File1.ext", "C:\file2.ext")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="fileA">
 The first file.
 </param>
 
 <param name="fileB">
 The second file.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if files are equals, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.GetSize(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the size of a file, in bytes.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim filesize As Long = GetSize("C:\File.ext")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The filepath.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The file size, in bytes.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.IsAccesible(System.String,System.IO.FileAccess)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified file is accesible in the context of reading or writting to the file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim isAccesible As Boolean = IsAccesible("C:\File.ext", FileAccess.Read)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The filepath.
 </param>
 
 <param name="fileAccess">
 The file access to check.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if file is accesible; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.IsAccesible(System.IO.FileInfo,System.IO.FileAccess)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified file is accesible in the context of reading or writting to the file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim file As New FileInfo("C:\File.ext")
 Dim isAccesible As Boolean = IsAccesible(file, FileAccess.Read)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="file">
 The source file.
 </param>
 
 <param name="fileAccess">
 The file access to check.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if file is accesible; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.GetAttributes(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the attributes of a file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim attributes As FileAttributes = GetAttributes("C:\File.ext")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The filepath.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The file attributes.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.HasAttributes(System.String,System.IO.FileAttributes)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value indicating whether a file contains the specified file-attribute(s).
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim hasAttribute As Boolean = HasAttributes("C:\File.ext", FileAttributes.Hidden Or FileAttributes.ReadOnly)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The filepath.
 </param>
 
 <param name="attributes">
 The file attribute(s).
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if file contains the file-attribute(s), <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.HasAttributes(System.IO.FileInfo,System.IO.FileAttributes)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value indicating whether a file contains the specified file-attribute(s).
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim file As New FileInfo("C:\File.ext")
 Dim hasAttribute As Boolean = HasAttributes(file, FileAttributes.Hidden Or FileAttributes.ReadOnly)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="file">
 The source file.
 </param>
 
 <param name="attributes">
 The file attribute(s).
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if file contains the file-attribute(s), <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.SetAttributes(System.String,System.IO.FileAttributes)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the file-attribute(s) of the specified file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 SetAttributes("C:\File.ext", FileAttributes.Hidden Or FileAttributes.ReadOnly)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The filepath.
 </param>
 
 <param name="attributes">
 The file attribute(s) to set.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.SetAttributes(System.IO.FileInfo,System.IO.FileAttributes)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the file-attribute(s) of the specified file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim file As New FileInfo("C:\File.ext")
 SetAttributes(file, FileAttributes.Hidden Or FileAttributes.ReadOnly)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="file">
 The source file.
 </param>
 
 <param name="attributes">
 The file attribute(s) to set.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.AddAttributes(System.String,System.IO.FileAttributes)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adss file-attribute(s) to the specified file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 AddAttributes("C:\File.ext", FileAttributes.Hidden Or FileAttributes.ReadOnly)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The filepath.
 </param>
 
 <param name="attributes">
 The file attribute(s) to add.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.AddAttributes(System.IO.FileInfo,System.IO.FileAttributes)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adss file-attribute(s) to the specified file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim file As New FileInfo("C:\File.ext")
 AddAttributes(file, FileAttributes.Hidden Or FileAttributes.ReadOnly)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="file">
 The source file.
 </param>
 
 <param name="attributes">
 The file attribute(s) to add.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.RemoveAttributes(System.String,System.IO.FileAttributes)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes file-attribute(s) from the specified file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 RemoveAttributes("C:\File.ext", FileAttributes.Hidden Or FileAttributes.ReadOnly)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The filepath.
 </param>
 
 <param name="attributes">
 The file attribute(s) to remove.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.RemoveAttributes(System.IO.FileInfo,System.IO.FileAttributes)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes file-attribute(s) from the specified file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim file As New FileInfo("C:\File.ext")
 RemoveAttributes(file, FileAttributes.Hidden Or FileAttributes.ReadOnly)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="file">
 The source file.
 </param>
 
 <param name="attributes">
 The file attribute(s) to remove.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.HasRights(System.String,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a file contains the specified user-rights.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim hasRights As Boolean = HasRights("C:\File.ext",
                            FileSystemRights.Read Or FileSystemRights.Write,
                            AccessControlType.Allow)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The filepath.
 </param>
 
 <param name="rights">
 The user-rights.
 </param>
 
 <param name="accessControlType">
 The access control type, determines whether to check for allowed user-rights or denied user-rights.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the file contains the user-rights;  otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.HasRights(System.IO.FileInfo,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a file contains the specified user-rights.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim file As New FileInfo("C:\File.ext")
 Dim hasRights As Boolean = HasRights(file,
                            FileSystemRights.Read Or FileSystemRights.Write,
                            AccessControlType.Allow)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="file">
 The source file.
 </param>
 
 <param name="rights">
 The user-rights.
 </param>
 
 <param name="accessControlType">
 The access control type, determines whether to check for allowed user-rights or denied user-rights.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the file contains the user-rights;  otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.SetRights(System.String,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the user-rights of a file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 SetRights("C:\File.ext", FileSystemRights.Read Or FileSystemRights.Write, AccessControlType.Allow)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The filepath.
 </param>
 
 <param name="rights">
 The user-rights.
 </param>
 
 <param name="accessControlType">
 The access control type, determines whether to allowe user-rights or deny user-rights.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.SetRights(System.IO.FileInfo,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the user-rights of a file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim file As New FileInfo("C:\File.ext")
 SetRights(file, FileSystemRights.Read Or FileSystemRights.Write, AccessControlType.Allow)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="file">
 The source file.
 </param>
 
 <param name="rights">
 The user-rights.
 </param>
 
 <param name="accessControlType">
 The access control type, determines whether to allowe user-rights or deny user-rights.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.GetFiles(System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the files those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim files As List(Of FileInfo) =
     GetFiles("C:\Windows\System32", SearchOption.AllDirectories).ToList
 
 Dim files As IEnumerable(Of FileInfo) =
     GetFiles(dirPath:="C:\Windows\System32",
              searchOption:=SearchOption.TopDirectoryOnly,
              fileNamePatterns:={"*"},
              fileExtPatterns:={"*.dll", "*.exe"},
              ignoreCase:=True,
              throwOnError:=True)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="dirPath">
 The root directory path to search for files.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 
 <param name="fileNamePatterns">
 The file name pattern(s) to match.
 </param>
 
 <param name="fileExtPatterns">
 The file extension pattern(s) to match.
 </param>
 
 <param name="ignoreCase">
 If <see langword="True"/>, ignores the comparing case of <paramref name="fileNamePatterns"/> and <paramref name="fileExtPatterns"/> patterns.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to file or directory.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the files information.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">dirPath or searchOption
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.GetFilePaths(System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the filepaths those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim filePaths As List(Of String) =
     GetFilePaths("C:\Windows\System32", SearchOption.AllDirectories).ToList
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="dirPath">
 The root directory path to search for files.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 
 <param name="fileNamePatterns">
 The file name pattern(s) to match.
 </param>
 
 <param name="fileExtPatterns">
 The file extension pattern(s) to match.
 </param>
 
 <param name="ignoreCase">
 If <see langword="True"/>, ignores the comparing case of <paramref name="fileNamePatterns"/> and <paramref name="fileExtPatterns"/> patterns.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to file or directory.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the filepaths.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">dirPath or searchOption
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.Rename(System.String,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Renames a file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Rename("C:\File.ext", "new filename", ".ext")
 Rename("C:\File.ext", "new filename", "") ' Preserve file extenstion.
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example that renames the file extension of all files in the specified directory.
 <code>
 Dim dInfo As New DirectoryInfo("C:\Directory\")
 dInfo.EnumerateFiles("*.jpg", SearchOption.TopDirectoryOnly).ToList.
     ForEach(Sub(fInfo As FileInfo)
                 Rename(fInfo.FullName, fInfo.Name, ".png")
             End Sub)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilePath">
 The source file path.
 </param>
 
 <param name="targetFileName">
 The target file name (without file extension).
 </param>
 
 <param name="targetFileExt">
 The target file extension.
 <para></para>
 If this parameter is <see cref="T:System.String"/>, the same file extension is assumed.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 Source file not found.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.Rename(System.IO.FileInfo,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Renames a file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Rename(New FileInfo("C:\File.ext"), "new filename", ".ext")
 Rename(New FileInfo("C:\File.ext"), "new filename", "") ' Preserve file extenstion.
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example that renames the file extension of all files in the specified directory.
 <code>
 Dim dInfo As New DirectoryInfo("C:\Directory\")
 dInfo.EnumerateFiles("*.jpg", SearchOption.TopDirectoryOnly).ToList.
     ForEach(Sub(fInfo As FileInfo)
                 Rename(fInfo, fInfo.Name, ".png")
             End Sub)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="file">
 The source file.
 </param>
 
 <param name="targetFileName">
 The target file name (without file extension).
 </param>
 
 <param name="targetFileExt">
 The target file extension.
 <para></para>
 If this parameter is <see cref="T:System.String"/>, the same file extension is assumed.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 Source file not found.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.RenameIncremental(System.String,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Renames all the files of a directory, by enumerating them.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 RenameIncremental("C:\Directory\", zeroCount:=4)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="directoryPath">
 The directory path.
 </param>
 
 <param name="zeroCount">
 The zeros amount to enumerate the files.
 <para></para>
 If the value is <c>0</c>, the zeros will fit the best amount.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.CreateDummyFile(System.String,System.Int64)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates a dummy zero-filled file of the specified size.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 CreateDummyFile("C:\DummyFile.tmp", 1024L ^ 3L) ' File with 1 GB size.
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The target filepath.
 </param>
 
 <param name="size">
 The size, in Bytes.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.IOException">
 Destination file already exists.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.Lock(System.String,System.IO.FileShare)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Locks read/write access to the specified file for other applications 
 (during the lifetime of the current application).
 <para></para>
 To unlock the file, just dispose the returned <see cref="T:System.IO.FileStream"/> object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Using fs As FileStream = Lock("C:\File.txt", FileShare.Read)
  ' ...
 End Using
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The file path.
 </param>
 
 <param name="fileShare">
 The type of access that other applications will have to this file.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.IO.FileStream"/> object that represents the file stream.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.Lock(System.IO.FileInfo,System.IO.FileShare)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Locks read/write access to the specified file for other applications 
 (during the lifetime of the current application).
 <para></para>
 To unlock the file, just dispose the returned <see cref="T:System.IO.FileStream"/> object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim file As New FileInfo("C:\File.ext")
 Using fs As FileStream = Lock(file, FileShare.Read)
  ' ...
 End Using
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="file">
 The source file.
 </param>
 
 <param name="fileShare">
 The type of access that other applications will have to this file.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.IO.FileStream"/> object that represents the file stream.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.Recycle(System.String,Microsoft.VisualBasic.FileIO.UIOption)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sends the source file to the Recycle Bin.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The file path.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.Recycle(System.IO.FileInfo,Microsoft.VisualBasic.FileIO.UIOption)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sends the source file to the Recycle Bin.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="file">
 The source file.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.IsFile(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified file is really a file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The source filepath.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Files.IsShortcut(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified file is a shortcut file (<c>.lnk</c>).
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The source filepath.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Tools.Keyboard">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains keyboard related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Keyboard.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.IO.Tools.Keyboard"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Tools.Keyboard.ActiveKeyboardLayout">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the active input locale identifier (formerly called the keyboard layout) for the current thread.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim kbdLayout As IntPtr = ActiveKeyboardLayout()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The active input locale identifier (formerly called the keyboard layout) for the current thread.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Tools.Keyboard.ActiveKeyboardLayoutName">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the name of the active input locale identifier (formerly called the keyboard layout) for the system.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim kbdLayoutName As String = ActiveKeyboardLayoutName() ' Result: 00000409 ( U.S. English ) 
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The name of the active input locale identifier (formerly called the keyboard layout) for the system.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Keyboard.SendKey(System.Windows.Forms.Keys,Elektro.Core.IO.Enums.KeyBehavior)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sends a keystroke.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Keyboard.SendKey(Keys.Enter, KeyBehavior.Press)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="key">
 The key to sintetize.
 </param>
 
 <param name="behavior">
 The keystroke behavior.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The function returns the number of events that it successfully inserted into the keyboard input stream.
 <para></para>
 If the function returns zero, the input was already blocked by another thread.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Keyboard.SendChar(System.Char)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sends a character.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Keyboard.SendChar(Convert.ToChar(Keys.D0), KeyAction.Press)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 AppActivate(Process.GetProcessesByName("sublime_text").First.Id)
 
 Dim c As Char = Convert.ToChar(Keys.Oemtilde) ' Ñ
 Dim result As Integer = SendChar(Convert.ToChar(c.ToString.ToLower))
 MessageBox.Show(String.Format("Successfull events: {0}", CStr(result)))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="c">
 The character to send.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The function returns the number of events that it successfully inserted into the keyboard input stream.
 <para></para>
 If the function returns zero, the input was already blocked by another thread.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Keyboard.SendString(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sends a string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Keyboard.SendString("Hello World")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="str">
 The string to send.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The function returns the number of events that it successfully inserted into the keyboard input stream.
 <para></para>
 If the function returns zero, the input was already blocked by another thread.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Keyboard.GetKeyboardLayout(System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the active input locale identifier (formerly called the keyboard layout).
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim kbdLayout As IntPtr = GetKeyboardLayout(IntPtr.Zero) 
 Dim kbdLayout As IntPtr = GetKeyboardLayout(Process.GetCurrentProcess.MainWindowHandle) 
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="idThread">
 A window handle identifier of the thread to query, or <see cref="F:System.IntPtr.Zero"/> to query the current thread.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The return value is the input locale identifier for the thread.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Keyboard.GetKeyboardLayout(System.UInt32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the active input locale identifier (formerly called the keyboard layout).
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim kbdLayout As IntPtr = GetKeyboardLayout(0UI) 
 Dim kbdLayout As IntPtr = GetKeyboardLayout(CUInt(Process.GetCurrentProcess.MainWindowHandle.ToInt32)) 
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="idThread">
 A window handle identifier of the thread to query, or <c>0</c> to query the current thread.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The return value is the input locale identifier for the thread.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Keyboard.GetKeyCode(System.Char,System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Translates a character to the corresponding keycode. 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox(GetKeyCode("a"c)) ' Result: 65
 MsgBox(GetKeyCode("á"c)) ' Result: 65
 MsgBox(GetKeyCode("á"c, IntPtr.Zero)) ' Result: 65
 MsgBox(GetKeyCode("a"c, Process.GetCurrentProcess.MainWindowHandle)) ' Result: 65
 
 Dim sb As New StringBuilder
 Dim chars As Char() = "ABCDEFGHIJKLMNOPQRSTUVWXYZ ñÑçÇ áéíóú ÁÉÍÓÚ àèìòù ÀÈÌÒÙ äëïÖÜ ÄËÏÖÜ º\'¡`+´-.,ª!·$%&amp;/()=?¿&lt;&gt;".ToCharArray
 For Each c As Char In chars
     sb.AppendFormat("Character: {0}", CStr(c))
     sb.AppendLine()
     sb.AppendFormat("KeyCode  : {0}", CStr(Elektro.IO.Tools.Keyboard.GetKeyCode(c, IntPtr.Zero)))
     MessageBox.Show(sb.ToString)
     sb.Clear()
 Next c
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="c">
 The character.
 </param>
 
 <param name="keyboardLayout">
 The keyboard layout.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value contains the keycode.
 <para></para>
 If the function finds no key that translates to the passed character code, 
 the return value is <c>-1</c>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Keyboard.GetActiveKeyboardLayoutName">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the name of the active input locale identifier (formerly called the keyboard layout) for the system.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim kbdLayoutName As String = GetActiveKeyboardLayoutName() ' Result: 00000409 ( U.S. English ) 
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The name of the active input locale identifier (formerly called the keyboard layout) for the system.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Tools.Mouse">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains mouse related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Mouse.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.IO.Tools.Mouse"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Mouse.MouseMove(Elektro.Interop.Win32.Types.Point)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Slices the mouse position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Mouse.MouseMove(New Point With {.X = 5, .Y = -5})
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="offset">
 The offset, in coordinates.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The function returns the number of events that it successfully inserted into the mouse input stream.
 <para></para>
 If the function returns zero, the input was already blocked by another thread.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Mouse.MouseMove(System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Slices the mouse position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Mouse.MouseMove(x:=5, y:=-5)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="x">
 The 'X' offset.
 </param>
 
 <param name="y">
 The 'Y' offset.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The function returns the number of events that it successfully inserted into the mouse input stream.
 <para></para>
 If the function returns zero, the input was already blocked by another thread.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Mouse.MousePosition(Elektro.Interop.Win32.Types.Point)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Moves the mouse hotspot to an absolute position, in coordinates.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Mouse.MousePosition(New Point With {.X = 100, .Y = -500})
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="position">
 The absolute position.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The function returns the number of events that it successfully inserted into the mouse input stream.
 <para></para>
 If the function returns zero, the input was already blocked by another thread.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Mouse.MousePosition(System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Moves the mouse hotspot to an absolute position, in coordinates.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Mouse.MousePosition(x:=100, y:=-500)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="x">
 The absolute 'X' coordinate.
 </param>
 
 <param name="y">
 The absolute 'Y' coordinate.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The function returns the number of events that it successfully inserted into the mouse input stream.
 <para></para>
 If the function returns zero, the input was already blocked by another thread.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Mouse.MouseClick(Elektro.Core.IO.Enums.MouseButton)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Simulates a mouse click.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Mouse.MouseClick(MouseButton.RightPress)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="mouseAction">
 The mouse action to perform.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The function returns the number of events that it successfully inserted into the mouse input stream.
 <para></para>
 If the function returns zero, the input was already blocked by another thread.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Tools.Shortcuts">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains shortcut related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example that demonstrates general shortcut operations.
 <code>
 ' Tries to resolve a shortcut which has changed their Target location.
 Shortcuts.ResolveUi("C:\Corrupted Shortcut.lnk", New IntPtr(1))
 Shortcuts.ResolveNoUi("C:\Corrupted Shortcut.lnk")
 
 ' Creates a new Shortcut file
 Shortcuts.CreateShortcut("C:\Shortcut.lnk",
                          "C:\value.ext",
                          "C:\",
                          "Description",
                          "-Arguments",
                          "C:\Icon.ico", 0,
                          HotkeyModifier.Alt Or HotkeyModifier.Control,
                          Keys.F1,
                          ShortcutWindowState.Normal)
 
 ' Gets Shortcut file information
 Dim sInfo As ShortcutInfo = Shortcuts.GetInfo("C:\Shortcut.lnk")
 
 Dim sb As New StringBuilder
 With sb
     .AppendLine(String.Format(" ""{0}"" ", sInfo.ShortcutFile))
     .AppendLine(String.Format("------------------------"))
     .AppendLine(String.Format("Description: {0}", sInfo.Description))
     .AppendLine(String.Format("Target: {0}", sInfo.Target))
     .AppendLine(String.Format("Arguments: {0}", sInfo.Arguments))
     .AppendLine(String.Format("Target Is Directory?: {0}", CStr(sInfo.IsDirectory)))
     .AppendLine(String.Format("Target Is File?: {0}", CStr(sInfo.IsFile)))
     .AppendLine(String.Format("WorkingDir: {0}", sInfo.WorkingDir))
     .AppendLine(String.Format("DirectoryName: {0}", sInfo.DirectoryName))
     .AppendLine(String.Format("FileName: {0}", sInfo.FileName))
     .AppendLine(String.Format("FileExtension: {0}", sInfo.FileExtension))
     .AppendLine(String.Format("DriveLetter: {0}", sInfo.DriveLetter))
     .AppendLine(String.Format("Icon: {0}", sInfo.Icon))
     .AppendLine(String.Format("Icon Index: {0}", CStr(sInfo.IconIndex)))
     .AppendLine(String.Format("Hotkey (Hex): {0}", CStr(sInfo.Hotkey)))
     .AppendLine(String.Format("Hotkey (Str): {0} + {1}", sInfo.HotkeyModifier.ToString, sInfo.HotkeyAccesor.ToString))
     .AppendLine(String.Format("Window State: {0}", sInfo.WindowState.ToString))
 End With
 MessageBox.Show(sb.ToString)
 
 ' Modify attributes of an existing lnk file.
 For Each lnk As String In Directory.GetFiles("C:\", "*.lnk", SearchOption.TopDirectoryOnly)
 
     Dim info As ShortcutInfo = Shortcuts.GetInfo(lnk)
 
     If info.Target.StartsWith("value", StringComparison.OrdinalIgnoreCase) Then
         Shortcuts.ModifyShortcut(lnk, info.Target.Replace("value", "New value"))
     End If
 
 Next lnk
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example that demonstrates how to create a new shortcut.
 <code>
 Dim sInfo As New ShortcutInfo
 
 With sInfo
     .ShortcutFile = "C:\My Shortcut.lnk"
     .Target = Path.Combine(My.Application.Info.DirectoryPath, Process.GetCurrentProcess.MainModule.ModuleName)
     .Arguments = ""
     .WorkingDir = Path.GetDirectoryName(.Target)
     .Description = "Shortcut Test"
     .Icon = .Target
     .IconIndex = 0
     .WindowState = ShortcutWindowState.Minimized
     .HotkeyModifier = HotkeyModifier.Alt
     .HotkeyAccesor = Keys.D1
 End With
 
 Shortcuts.CreateShortcut(sInfo)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Shortcuts.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.IO.Tools.Shortcuts"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Shortcuts.ResolveUi(System.String,System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Resolves the target of a shortcut.
 If shortcut can't be resolved, an error message would be displayed.
 <para></para>
 This is usefull when the target path of a shortcut file is changed from a driveletter for example,
 then the shortcut file need to be resolved before trying to retrieve the target path.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="shortcutFile">
 The shortcut file to resolve.
 </param>
 
 <param name="hwnd">
 The new handle pointer that would be generated for the window which should display the error message (if any).
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Shortcuts.ResolveNoUi(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Resolves the target of a shortcut.
 If shortcut can't be resolved, any error message would be displayed.
 <para></para>
 This is usefull when the target path of a shortcut file is changed from a driveletter for example,
 then the shortcut file need to be resolved before trying to retrieve the target path.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="shortcutFile">
 The shortcut file to resolve.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Shortcuts.GetDescription(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns the description of a shortcut file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="shortcutFile">
 The shortcut file to retrieve the info.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Shortcuts.GetArguments(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns the Arguments of a shortcut file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="shortcutFile">
 The shortcut file to retrieve the info.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Shortcuts.GetFullPath(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns the path and filename of a shortcut file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="shortcutFile">
 The shortcut file to retrieve the info.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Shortcuts.GetWorkingDir(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns the working directory of a shortcut file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="shortcutFile">
 The shortcut file to retrieve the info.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Shortcuts.GetHotkey(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns the hotkey of a shortcut file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="shortcutFile">
 The shortcut file to retrieve the info.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Shortcuts.GetWindowStyle(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns the Window State of a shortcut file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="shortcutFile">
 The shortcut file to retrieve the info.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Shortcuts.GetIconLocation(System.String,System.Int32@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns the icon location of a shortcut file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="shortcutFile">
 The shortcut file to retrieve the info.
 </param>
 
 <param name="iconIndex">
 Optional Integer type variable to store the icon index.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Shortcuts.GetInfo(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves all the information about a shortcut file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="shortcutFile">
 The shortcut file to retrieve the info.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Shortcuts.CreateShortcut(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,Elektro.Core.IO.Enums.ShortcutHotkeyModifier,System.Windows.Forms.Keys,Elektro.Core.IO.Enums.ShortcutWindowState)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates a shortcut file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="filePath">
 The filepath to create the shortcut.
 </param>
 
 <param name="target">
 The target file or directory.
 </param>
 
 <param name="workingDirectory">
 The working directory os the shortcut.
 </param>
 
 <param name="description">
 The shortcut description.
 </param>
 
 <param name="arguments">
 The target file arguments.
 <para></para>
 This value only should be set when target is an executable file.
 </param>
 
 <param name="icon">
 The icon location of the shortcut.
 </param>
 
 <param name="iconIndex">
 The icon index of the icon file.
 </param>
 
 <param name="hotKeyModifier">
 The hotkey modifier(s) which should be used for the hotkey combination.
 </param>
 
 <param name="hotkeyAccesor">
 The key used in combination with the <paramref name="hotkeyModifier"/> for hotkey combination.
 </param>
 
 <param name="windowState">
 The window state for the target.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Shortcuts.CreateShortcut(Elektro.Core.IO.Types.ShortcutInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates a shortcut file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="shortcut">
 A <see cref="T:Elektro.Core.IO.Types.ShortcutInfo"/> instance that contains the shortcut parameters.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Shortcuts.ModifyShortcut(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,Elektro.Core.IO.Enums.ShortcutHotkeyModifier,System.Windows.Forms.Keys,Elektro.Core.IO.Enums.ShortcutWindowState)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Modifies the atributes of an existing shortcut file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="shortcutFile">
 The existing .lnk file to modify.
 </param>
 
 <param name="target">
 The target file or directory.
 </param>
 
 <param name="workingDirectory">
 The working directory os the shortcut.
 </param>
 
 <param name="description">
 The shortcut description.
 </param>
 
 <param name="arguments">
 The target file arguments.
 <para></para>
 This value only should be set when target is an executable file.
 </param>
 
 <param name="icon">
 The icon location of the shortcut.
 </param>
 
 <param name="iconIndex">
 The icon index of the icon file.
 </param>
 
 <param name="hotkeyModifier">
 The hotkey modifier(s) which should be used for the hotkey combination.
 </param>
 
 <param name="hotkeyAccesor">
 The key used in combination with the <paramref name="hotkeyModifier"/> for hotkey combination.
 </param>
 
 <param name="windowState">
 The window state for the target.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Shortcuts.CreateWord(System.Byte,System.Byte)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates a WORD value (16-Bit Unsigned Integer) from a LOBYTE and a HIBYTE.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="loByte">
 The low-order byte.
 </param>
 
 <param name="hiByte">
 The high-order byte.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting WORD value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Shortcuts.GetLoByte(System.UInt16)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the low-order byte of a WORD value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="word">
 The WORD value that contains the LOBYTE and the HIBYTE.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The LOBYTE value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Shortcuts.GetHiByte(System.UInt16)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the high-order byte of a WORD value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="word">
 The WORD value that contains the LOBYTE and the HIBYTE.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The HIBYTE value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Tools.Streams">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains <see cref="T:System.IO.Stream"/> related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Streams.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.IO.Tools.Streams"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Tools.Streams.GetFileStreamBufferSize(System.Int64)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Given a filesize, estimates the proper buffer size to boost the performance of a <see cref="T:System.IO.FileStream"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="filesize">
 The size, in bytes, of the data to be read or write by a <see cref="T:System.IO.FileStream"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The returned value is the proper buffer size, in bytes, 
 that should be set as <c>BufferSize</c> parameter when instancing a <see cref="T:System.IO.FileStream"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Types.EventArgs.DriveStatusChangedEventArgs">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains the event-data of a <see cref="E:Elektro.Core.IO.Types.DriveWatcher.DriveStatusChanged"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.DriveStatusChangedEventArgs.DeviceEvent">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the device event that occurred.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The drive info.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.DriveStatusChangedEventArgs.deviceEventsB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The device event that occurred.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.DriveStatusChangedEventArgs.DriveInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the drive info.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The drive info.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.DriveStatusChangedEventArgs.driveInfoB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The drive info.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.EventArgs.DriveStatusChangedEventArgs.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.IO.Types.EventArgs.DriveStatusChangedEventArgs"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.EventArgs.DriveStatusChangedEventArgs.#ctor(Elektro.Interop.Win32.Enums.DeviceEvents,System.IO.DriveInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.IO.Types.EventArgs.DriveStatusChangedEventArgs"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="driveInfo">
 The drive info.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Types.EventArgs.FileCopyProgressChangedEventArgs">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains the event-data of a <see cref="E:Elektro.Core.IO.Types.FileCopy.FileCopyProgressChanged"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.FileCopyProgressChangedEventArgs.Filesize">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the size, in bytes, of the source file being copied.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The size, in bytes, of the source file being copied.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.FileCopyProgressChangedEventArgs.filesizeB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The size, in bytes, of the source file being copied.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.FileCopyProgressChangedEventArgs.BytesRead">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the total amound of copied bytes.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The total amound of copied bytes.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.FileCopyProgressChangedEventArgs.bytesReadB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The total amound of copied bytes.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.FileCopyProgressChangedEventArgs.BytesRemaining">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the total amound of remaining bytes to copy.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The total amound of remaining bytes to copy.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.FileCopyProgressChangedEventArgs.Percentage">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the percentage of the copy operation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The percentage of the copy operation.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.EventArgs.FileCopyProgressChangedEventArgs.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.IO.Types.EventArgs.FileCopyProgressChangedEventArgs"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.EventArgs.FileCopyProgressChangedEventArgs.#ctor(System.Int64,System.Int64)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.IO.Types.EventArgs.FileCopyProgressChangedEventArgs"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="filesize">
 The size, in bytes, of the source file being copied.
 </param>
 
 <param name="bytesRead">
 The total amound of copied bytes.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Types.EventArgs.FileSplitterProgressChangedEventArgs">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains the event-data of a <see cref="E:Elektro.Core.IO.Types.FileSplitter.ProgressChanged"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.FileSplitterProgressChangedEventArgs.TotalProgress">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the total progress value. 
 <para></para>
 (From <c>0</c> to  <c>100</c>)
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The total progress value.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.FileSplitterProgressChangedEventArgs.totalProgressB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Baking field )
 The total progress value.
 <para></para>
 (From 0 to 100)
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.FileSplitterProgressChangedEventArgs.ChunkProgress">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the current chunk progress value.
 <para></para>
 (From 0 to 100)
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The current chunk progress value.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.FileSplitterProgressChangedEventArgs.chunkProgressB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The current chunk progress value.
 <para></para>
 (From 0 to 100)
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.FileSplitterProgressChangedEventArgs.ChunksToCreateOrMerge">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the amount of chunks to create or merge.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The amount of chunks to create or merge.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.FileSplitterProgressChangedEventArgs.chunksToCreateOrMergeB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Bacing field )
 The amount of chunks to create.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.FileSplitterProgressChangedEventArgs.ChunksCreatedOrMerged">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the amount of created or merged chunks.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The amount of created or merged chunks.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.FileSplitterProgressChangedEventArgs.chunksCreatedOrMergedB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The amount of created or merged chunks.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.EventArgs.FileSplitterProgressChangedEventArgs.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.IO.Types.EventArgs.FileSplitterProgressChangedEventArgs"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.EventArgs.FileSplitterProgressChangedEventArgs.#ctor(System.Double,System.Double,System.Int64,System.Int64)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.IO.Types.EventArgs.FileSplitterProgressChangedEventArgs"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="totalProgress">
 The total progress value.
 </param>
 
 <param name="chunkProgress">
 The current chunk progress value.
 </param>
 
 <param name="chunksToCreateOrMerge">
 The amount of chunks to create or merge.
 </param>
 
 <param name="chunksCreatedOrMerged">
 The amount of created or merged chunks.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Types.EventArgs.HotkeyPastePressedEventArgs">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains the event-data of a <see cref="F:Elektro.Core.IO.Types.KeyboardMonitor.HotkeyPastePressedEvent"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.HotkeyPastePressedEventArgs.DeviceInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the device info.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The device info.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.HotkeyPastePressedEventArgs.deviceInfoB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The device info.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.HotkeyPastePressedEventArgs.ClipboardData">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the clipboard data.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The clipboard data.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.HotkeyPastePressedEventArgs.clipboardDatab">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The clipboard data.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.EventArgs.HotkeyPastePressedEventArgs.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.IO.Types.EventArgs.HotkeyPastePressedEventArgs"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.EventArgs.HotkeyPastePressedEventArgs.#ctor(Elektro.Core.IO.Types.KeyboardDeviceInfo,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.IO.Types.EventArgs.HotkeyPastePressedEventArgs"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="deviceInfo">
 The device data.
 </param>
 
 <param name="clipboardData">
 The clipboard data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Types.EventArgs.KeyPressedEventArgs">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains the event-data of a <see cref="E:Elektro.Core.IO.Types.KeyboardMonitor.KeyPressed"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.KeyPressedEventArgs.DeviceInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the device info.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The device info.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.KeyPressedEventArgs.deviceInfoB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The device info.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.KeyPressedEventArgs.DeviceEvent">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the device event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The device event.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.KeyPressedEventArgs.deviceEventB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The device event.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.EventArgs.KeyPressedEventArgs.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.IO.Types.EventArgs.KeyPressedEventArgs"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.EventArgs.KeyPressedEventArgs.#ctor(Elektro.Core.IO.Types.KeyboardDeviceInfo,Elektro.Core.IO.Enums.DeviceEvent)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.IO.Types.EventArgs.KeyPressedEventArgs"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="deviceInfo">
 The device data.
 </param>
 
 <param name="deviceEvent">
 The device event.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Types.EventArgs.MouseButtonClickEventArgs">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains the event-data of a <see cref="E:Elektro.Core.IO.Types.MouseMonitor.MouseButtonClick"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.MouseButtonClickEventArgs.DeviceInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the device info.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The device info.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.MouseButtonClickEventArgs.deviceInfoB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The device info.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.MouseButtonClickEventArgs.DeviceEvent">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the device event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The device event.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.MouseButtonClickEventArgs.deviceEventB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The device event.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.MouseButtonClickEventArgs.MouseButton">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the mouse button.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The mouse button.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.MouseButtonClickEventArgs.mouseButtonB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The mouse button.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.EventArgs.MouseButtonClickEventArgs.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.IO.Types.EventArgs.MouseButtonClickEventArgs"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.EventArgs.MouseButtonClickEventArgs.#ctor(Elektro.Core.IO.Types.MouseDeviceInfo,Elektro.Core.IO.Enums.DeviceEvent,Elektro.Interop.Win32.Enums.RawMouseButtons)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.IO.Types.EventArgs.MouseButtonClickEventArgs"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="deviceInfo">
 The device data.
 </param>
 
 <param name="deviceEvent">
 The device event.
 </param>
 
 <param name="mouseButton">
 The mouse button.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Types.EventArgs.MouseButtonDoubleClickEventArgs">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains the event-data of a <see cref="E:Elektro.Core.IO.Types.MouseMonitor.MouseButtonDoubleClick"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.MouseButtonDoubleClickEventArgs.DeviceInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the device info.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The device info.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.MouseButtonDoubleClickEventArgs.deviceInfoB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The device info.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.MouseButtonDoubleClickEventArgs.DeviceEvent">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the device event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The device event.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.MouseButtonDoubleClickEventArgs.deviceEventB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The device event.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.MouseButtonDoubleClickEventArgs.MouseButton">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the mouse button.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The mouse button.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.MouseButtonDoubleClickEventArgs.mouseButtonB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The mouse button.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.EventArgs.MouseButtonDoubleClickEventArgs.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.IO.Types.EventArgs.MouseButtonDoubleClickEventArgs"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.EventArgs.MouseButtonDoubleClickEventArgs.#ctor(Elektro.Core.IO.Types.MouseDeviceInfo,Elektro.Core.IO.Enums.DeviceEvent,System.Windows.Forms.MouseButtons)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.IO.Types.EventArgs.MouseButtonDoubleClickEventArgs"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="deviceInfo">
 The device data.
 </param>
 
 <param name="deviceEvent">
 The device event.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Types.EventArgs.MouseMoveEventArgs">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains the event-data of a <see cref="E:Elektro.Core.IO.Types.MouseMonitor.MouseMove"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.MouseMoveEventArgs.DeviceInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the device info.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The device info.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.MouseMoveEventArgs.deviceInfoB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The device info.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.MouseMoveEventArgs.DeviceEvent">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the device event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The device event.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.MouseMoveEventArgs.deviceEventB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The device event.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.MouseMoveEventArgs.Position">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the mouse position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The mouse position.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.MouseMoveEventArgs.positionB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The mouse position.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.EventArgs.MouseMoveEventArgs.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.IO.Types.EventArgs.MouseMoveEventArgs"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.EventArgs.MouseMoveEventArgs.#ctor(Elektro.Core.IO.Types.MouseDeviceInfo,Elektro.Core.IO.Enums.DeviceEvent,System.Drawing.Point)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.IO.Types.EventArgs.MouseMoveEventArgs"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="deviceInfo">
 The device data.
 </param>
 
 <param name="deviceEvent">
 The device event.
 </param>
 
 <param name="position">
 The mouse position.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Types.EventArgs.MouseWheelScrollEventArgs">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains the event-data of a <see cref="E:Elektro.Core.IO.Types.MouseMonitor.MouseWheelScroll"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.MouseWheelScrollEventArgs.DeviceInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the device info.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The device info.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.MouseWheelScrollEventArgs.deviceInfoB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The device info.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.MouseWheelScrollEventArgs.DeviceEvent">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the device event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The device event.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.MouseWheelScrollEventArgs.deviceEventB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The device event.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.EventArgs.MouseWheelScrollEventArgs.WheelDirection">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the mouse-wheel direction.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The mouse-wheel direction.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.EventArgs.MouseWheelScrollEventArgs.wheelDirectionB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The mouse-wheel direction.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.EventArgs.MouseWheelScrollEventArgs.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.IO.Types.EventArgs.MouseWheelScrollEventArgs"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.EventArgs.MouseWheelScrollEventArgs.#ctor(Elektro.Core.IO.Types.MouseDeviceInfo,Elektro.Core.IO.Enums.DeviceEvent,Elektro.Core.IO.Enums.MouseWheelDirection)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.IO.Types.EventArgs.MouseWheelScrollEventArgs"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="deviceInfo">
 The device data.
 </param>
 
 <param name="deviceEvent">
 The device event.
 </param>
 
 <param name="wheelDirection">
 The mouse-wheel direction.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Types.DriveWatcher">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A device insertion and removal monitor.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Friend WithEvents DriveMon As New DriveWatcher
 
 ''' &lt;summary&gt;
 ''' Handles the &lt;see cref="DriveStatusChanged"/&gt; event of the &lt;see cref="DriveMon"/&gt; instance.
 ''' &lt;/summary&gt;
 Private Sub DriveMon_DriveStatusChanged(ByVal sender As Object, ByVal e As DriveStatusChangedEventArgs) _
 Handles DriveMon.DriveStatusChanged
 
     Select Case e.DeviceEvent
 
         Case DriveWatcher.DeviceEvents.Arrival
             Dim sb As New StringBuilder
             sb.AppendLine("New drive connected...'")
             sb.AppendLine(String.Format("Type......: {0}", e.DriveInfo.DriveType.ToString))
             sb.AppendLine(String.Format("Label.....: {0}", e.DriveInfo.VolumeLabel))
             sb.AppendLine(String.Format("Name......: {0}", e.DriveInfo.Name))
             sb.AppendLine(String.Format("Root......: {0}", e.DriveInfo.RootDirectory))
             sb.AppendLine(String.Format("FileSystem: {0}", e.DriveInfo.DriveFormat))
             sb.AppendLine(String.Format("Size......: {0} GB", (e.DriveInfo.TotalSize / (1024 ^ 3)).ToString("n1")))
             sb.AppendLine(String.Format("Free space: {0} GB", (e.DriveInfo.AvailableFreeSpace / (1024 ^ 3)).ToString("n1")))
             Console.WriteLine(sb.ToString)
 
         Case DriveWatcher.DeviceEvents.RemoveComplete
             Dim sb As New StringBuilder
             sb.AppendLine("Drive disconnected...'")
             sb.AppendLine(String.Format("Name: {0}", e.DriveInfo.Name))
             sb.AppendLine(String.Format("Root: {0}", e.DriveInfo.RootDirectory))
             Console.WriteLine(sb.ToString)
 
     End Select
 
 End Sub
 
 Private Sub StartMon_Click(ByVal sender As Object, ByVal e As EventArgs) _
 Handles Button_StartMon.Click
 
     Me.DriveMon.Start()
 
 End Sub
 
 Private Sub StopMon_Click(ByVal sender As Object, ByVal e As EventArgs) _
 Handles Button_StopMon.Click
 
     Me.DriveMon.Stop()
 
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.DriveWatcher.Drives">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the connected drives on this computer.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.DriveWatcher.IsRunning">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that determines whether the monitor is running.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.DriveWatcher.Handle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the handle for the <see cref="T:System.Windows.Forms.NativeWindow"/> that owns this <see cref="T:Elektro.Core.IO.Types.DriveWatcher"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The handle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Types.DriveWatcher.DeviceType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a computer device type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa363246%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.DriveWatcher.DeviceType.Logical">
 <summary>
 Logical volume.
 </summary>
</member>
<member name="F:Elektro.Core.IO.Types.DriveWatcher.events">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A list of event delegates.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Core.IO.Types.DriveWatcher.DriveStatusChanged">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when a drive is inserted, removed, or changed.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.DriveWatcher.OnDriveStatusChanged(Elektro.Core.IO.Types.EventArgs.DriveStatusChangedEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Raises <see cref="E:Elektro.Core.IO.Types.DriveWatcher.DriveStatusChanged"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:Elektro.Core.IO.Types.EventArgs.DriveStatusChangedEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.DriveWatcher.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of <see cref="T:Elektro.Interop.Win32.Types.DevBroadcastVolume"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.DriveWatcher.Start">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Starts monitoring.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.Exception">
 Monitor is already running.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.DriveWatcher.Stop">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Stops monitoring.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.Exception">
 Monitor is already stopped.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.DriveWatcher.GetDriveLetter(Elektro.Interop.Win32.Types.DevBroadcastVolume)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the drive letter stored in a <see cref="T:Elektro.Interop.Win32.Types.DevBroadcastVolume"/> structure.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="device">
 The <see cref="T:Elektro.Interop.Win32.Types.DevBroadcastVolume"/> structure containing the device mask.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The drive letter.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.DriveWatcher.WndProc(System.Windows.Forms.Message@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Invokes the default window procedure associated with this window to process windows messages.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="m">
 A <see cref="T:System.Windows.Forms.Message"/> that is associated with the current Windows message.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.DriveWatcher.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.DriveWatcher.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.DriveWatcher.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Types.FileCopy">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs asynchronous file-copy operations with support for cancellation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public Class Form1 : Inherits Form
 
     Friend WithEvents FileCopier As FileCopy
     Private fileCopyCancelToken As CancellationTokenSource
 
     Private Sub Button1_Click() Handles Button1.Click
 
         Me.StartCopy()
 
     End Sub
 
     Private Sub Button2_Click() Handles Button2.Click
 
         Me.CancelCopy()
 
     End Sub
 
     Private Sub StartCopy()
 
         ' Create a dummy file of 2 GB
         Using fs As New FileStream("C:\source file.ext", FileMode.CreateNew)
             fs.SetLength(2147483648)
         End Using
 
         Me.FileCopier = New FileCopy("C:\source file.ext")
 
         Me.fileCopyCancelToken =
             Me.FileCopier.CopyTo("C:\Target file.ext",
                                  bufferSize:=(CInt(Me.FileCopier.File.Length \ (1024 * 100)) + 1),
                                  overwrite:=True,
                                  deleteFileOnCancel:=False,
                                  cancelCallback:=AddressOf Me.FileCopier_CancelCallBack)
 
     End Sub
 
     Private Sub CancelCopy()
 
         ' Cancel the current file-copy operation.
         Me.FileCopier.CancelCopy(Me.fileCopyCancelToken)
 
     End Sub
 
     ''' &lt;summary&gt;
     ''' Callback that is called when the a file-copy operaton of the &lt;see cref="FileCopier"/&gt; is cancelled.
     ''' &lt;/summary&gt;
     Private Sub FileCopier_CancelCallBack()
 
         Me.Invoke(
             Sub()
                 Me.Label1.Text = "Canceled!"
                 Me.Label2.Text = "Canceled!"
                 Me.Label3.Text = "Canceled!"
                 Me.Label4.Text = "Canceled!"
             End Sub)
     End Sub
 
     ''' ----------------------------------------------------------------------------------------------------
     ''' &lt;summary&gt;
     ''' Handles the &lt;see cref="FileCopy.FileCopyProgressChanged"/&gt; event of the &lt;see cref="FileCopier"/&gt; instance.
     ''' &lt;/summary&gt;
     ''' ----------------------------------------------------------------------------------------------------
     ''' &lt;param name="sender"&gt;
     ''' The source of the event.
     ''' &lt;/param>
     ''' 
     ''' &lt;param name="e"&gt;
     ''' The &lt;see cref="FileCopyProgressChangedEventArgs"/&gt; instance containing the event data.
     ''' &lt;/param&gt;
     ''' ----------------------------------------------------------------------------------------------------
     Private Sub FileCopier_FileCopyProgressChanged(ByVal sender As Object, ByVal e As FileCopyProgressChangedEventArgs) _
     Handles FileCopier.FileCopyProgressChanged
 
         Me.Invoke(
             Sub()
                 Me.Label1.Text = String.Format("Size: {0} MB", (e.Filesize / 1024).ToString("n2"))
                 Me.Label2.Text = String.Format("Written: {0} MB", (e.BytesRead / 1024).ToString("n2"))
                 Me.Label3.Text = String.Format("Read: {0} MB", (e.BytesRemaining / 1024).ToString("n2"))
                 Me.Label4.Text = String.Format("Done: {0}%", e.Percentage.ToString("n2"))
             End Sub)
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.FileCopy.File">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the source file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The source file.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.FileCopy.fileB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The source file.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.FileCopy.events">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A list of event delegates.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Core.IO.Types.FileCopy.FileCopyProgressChanged">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when the progress of a file-copy operation has changed.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileCopy.OnValueChanged(Elektro.Core.IO.Types.EventArgs.FileCopyProgressChangedEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Raises <see cref="E:Elektro.Core.IO.Types.FileCopy.FileCopyProgressChanged"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:Elektro.Core.IO.Types.EventArgs.FileCopyProgressChangedEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileCopy.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.IO.Types.FileCopy"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileCopy.#ctor(System.IO.FileInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.IO.Types.FileCopy"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="file">
 A <see cref="T:System.IO.FileInfo"/> instance that contains the file info.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileCopy.#ctor(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.IO.Types.FileCopy"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The source filepath.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileCopy.CopyTo(System.String,System.Int32,System.Boolean,System.Boolean,System.Action)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronouslly copies the source file to the specified destination.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="targetFilepath">
 The target filepath.
 </param>
 
 <param name="bufferSize">
 The size, in bytes, of the internal <see cref="T:System.IO.FileStream"/> buffer that is used to copy.
 </param>
 
 <param name="overwrite">
 If set to <see langword="True"/>, overwrites any existing file, 
 otherwise, a <see cref="T:System.IO.IOException"/> exception is thrown.
 </param>
 
 <param name="deleteFileOnCancel">
 If set to <see langword="True"/>, deletes the target file if the copy operation was cancelled
 </param>
 
 <param name="cancelCallback">
 A encapsulated method that is called if the copy operation is cancelled.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.Threading.CancellationTokenSource"/> instance to cancel the file-copy task at any moment.
 <para></para>
 This value can be pass to the <see cref="M:Elektro.Core.IO.Types.FileCopy.CancelCopy(System.Threading.CancellationTokenSource)"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 File not found.;targetFilepath
 </exception>
 
 <exception cref="T:System.IO.IOException">
 Target file already exists.
 </exception>
 
 <exception cref="T:System.ArgumentException">
 Positive value is required.;bufferSize
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileCopy.CancelCopy(System.Threading.CancellationTokenSource)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Cancels a file-copy operation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="cancellationTokenSource">
 A <see cref="T:System.Threading.CancellationTokenSource"/> instance associateted to a file-copy task.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.OperationCanceledException">
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileCopy.IsCanceled(System.Threading.CancellationTokenSource)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified file-copy task was cancelled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="cancellationTokenSource">
 A <see cref="T:System.Threading.CancellationTokenSource"/> instance associateted to a file-copy task.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified file-copy task was cancelled; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.FileCopy.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileCopy.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileCopy.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Types.FileDater">
 ----------------------------------------------------------------------------------------------------
 <summary> 
 Preserve, modify, truncate, and/or restore the date attributes of a file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example that demonstrates how to save then restore the dates of a file.
 <code>
 Using fd As New FileDater("C:\File.txt")
     fd.Save(DateAttribute.Creation Or DateAttribute.Modification)
 
     File.AppendAllText("C:\File.txt", "Hello World!")
 
     fd.Restore(DateAttribute.Creation Or DateAttribute.Modification)
 End Using
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example that demonstrates how to save then restore the dates of a file that has changed their ubication.
 <code>
 Using fd As New FileDater("C:\File.txt")
 
     ' Preserve all the current dates of the file.
     fd.Save(DateAttribute.All)
 
     ' Print the saved dates.
     Debug.WriteLine(String.Format("Saved Creation    Date: {0}", fd.SavedDate(DateAttribute.Creation).ToString))
     Debug.WriteLine(String.Format("Saved Last-Access Date: {0}", fd.SavedDate(DateAttribute.Access).ToString))
     Debug.WriteLine(String.Format("Saved Last-Modify Date: {0}", fd.SavedDate(DateAttribute.Modification).ToString))
 
     ' Copy the file to other location.
     File.Copy(fd.File.FullName, "C:\New Testfile.tmp", overwrite:=True)
 
     ' Assign the new location in the FileDater instance.
     fd.SetFilepath("C:\New Testfile.tmp")
 
     ' Modify all the dates on the copied file.
     fd.Set(DateAttribute.All, Date.Parse("01/01/2015"))
 
     ' Restore all the previously saved dates on the copied file.
     fd.Restore(DateAttribute.All)
 
     ' Print the current dates of the copied file.
     Debug.WriteLine(String.Format("Saved Creation    Date: {0}", fd.File.CreationTime.ToString))
     Debug.WriteLine(String.Format("Saved Last-Access Date: {0}", fd.File.LastAccessTime.ToString))
     Debug.WriteLine(String.Format("Saved Last-Modify Date: {0}", fd.File.LastWriteTime.ToString))
 
 End Using
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.FileDater.savedCreationDateB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The saved creation date.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.FileDater.savedLastAccessDateB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The saved last-access date.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.FileDater.savedLastModifyDateB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The saved last-modify date
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.FileDater.File">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 A <see cref="T:System.IO.FileInfo"/> instance that contains the file info.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.FileDater.fileB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A <see cref="T:System.IO.FileInfo"/> instance that contains the file info.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.FileDater.SavedDateAttributes">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the type of the current saved dates.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.FileDater.savedDateAttributesB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The type of the current saved dates.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.FileDater.SavedDate(Elektro.Core.IO.Enums.DateAttribute)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a saved date.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="dateAttributes">
 The type of date to retrieve.
 </param>
 ----------------------------------------------------------------------------------------------------
 <value>
 The date.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileDater.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.IO.Types.FileDater"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileDater.#ctor(System.IO.FileInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.IO.Types.FileDater"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="file">
 A <see cref="T:System.IO.FileInfo"/> instance that contains the file info.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.Exception">
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileDater.#ctor(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.IO.Types.FileDater"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The filepath.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileDater.Save(Elektro.Core.IO.Enums.DateAttribute)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Preserves the specified dates of the file to restore them later at any time.
 <para></para>
 Note: Dates can be preserved again at any time.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="dateAttributes">
 The type of date(s) to preserve.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileDater.Restore(Elektro.Core.IO.Enums.DateAttribute)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Restores the specified saved dates on the file.
 <para></para>
 Note: Calling this method does not cause the removal of any saved date.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="dateAttributes">
 The type of date(s) to restore on the file.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 The specified date was not saved.;dateAttributes
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileDater.Set(Elektro.Core.IO.Enums.DateAttribute,System.DateTime)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the specified dates on the file.
 <para></para>
 Note: Calling this method does not cause the removal of any saved date.
 <para></para>
 After setting a date, must call once the <see cref="M:Elektro.Core.IO.Types.FileDater.Save(Elektro.Core.IO.Enums.DateAttribute)"/> method if want to save any date established.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="dateAttributes">
 The type of date(s) to set on the file.
 </param>
 
 <param name="date">
 The date.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileDater.Truncate(Elektro.Core.IO.Enums.DateAttribute)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Truncates the specified date(s) of the file to "01/01/1800 00:00:00".
 <para></para>
 Note: Calling this method does not cause the removal of any saved date.
 <para></para>
 After setting a date, must call once the <see cref="M:Elektro.Core.IO.Types.FileDater.Save(Elektro.Core.IO.Enums.DateAttribute)"/> method if want to save any date established.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="dateAttributes">
 The type of date(s) to truncate.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileDater.SetFilepath(System.IO.FileInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Causes this <see cref="T:Elektro.Core.IO.Types.FileDater"/> instance to assign a new location for the current file.
 <para></para>
 This could be useful if the saved dates should be restored in a file that has changed its name/ubication.
 <para></para>
 Note: Calling this method does not cause the removal of any saved date.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="file">
 A <see cref="T:System.IO.FileInfo"/> instance that contains the file info.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileDater.SetFilepath(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Causes this <see cref="T:Elektro.Core.IO.Types.FileDater"/> instance to assign a new location for the current file.
 <para></para>
 This could be useful if the saved dates should be restored in a file that has changed its name/ubication.
 <para></para>
 Note: Calling this method does not cause the removal of any saved date.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The file path.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileDater.GetSavedDate(Elektro.Core.IO.Enums.DateAttribute)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a saved date.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="dateAttributes">
 The type of date to retrieve.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The date.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.FileDater.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileDater.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileDater.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Types.Filesize">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Defines a filesize.
 <para></para>
 Provides methods to round or convert a filesize between different units of size.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example that performs a simple conversion between units of size.
 <code>
 Dim fs As New Filesize(1073741824, Filesize.SizeUnits.Byte)
 
 Dim b As Double = fs.Size(Filesize.SizeUnits.Byte)
 Dim kb As Double = fs.Size(Filesize.SizeUnits.KiloByte)
 Dim mb As Double = fs.Size(Filesize.SizeUnits.MegaByte)
 Dim gb As Double = fs.Size(Filesize.SizeUnits.GigaByte)
 Dim tb As Double = fs.Size(Filesize.SizeUnits.TeraByte)
 Dim pb As Double = fs.Size(Filesize.SizeUnits.PetaByte)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example that rounds a filesize in bytes, to its most approximated unit of size.
 <code>
 For Each sizeUnit As Filesize.SizeUnits In [Enum].GetValues(GetType(Filesize.SizeUnits))
 
     Dim fsize As New Filesize(sizeUnit, Filesize.SizeUnits.Byte)
 
     Dim stringFormat As String =
         String.Format("{0} Bytes rounded to {1} {2}.",
                       fsize.Size(Filesize.SizeUnits.Byte, CultureInfo.CurrentCulture.NumberFormat),
                       fsize.SizeRounded(decimalPrecision:=2, numberFormatInfo:=Nothing),
                       fsize.SizeUnitNameLong)
 
     Console.WriteLine(stringFormat)
 
 Next sizeUnit
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example that converts a Terabyte (1099511627776 Bytes) to other units of size.
 <code>
 Dim fsize As New Filesize(Filesize.SizeUnits.TeraByte, Filesize.SizeUnits.Byte)
 
 For Each sizeUnit As Filesize.SizeUnits In [Enum].GetValues(GetType(Filesize.SizeUnits))
 
     Dim stringFormat As String =
         String.Format("{0} Bytes equals to {1} {2}.",
                       fsize.Size(Filesize.SizeUnits.Byte, Nothing, CultureInfo.CurrentCulture.NumberFormat),
                       fsize.Size(sizeUnit, 2, CultureInfo.CurrentCulture.NumberFormat),
                       sizeUnit.ToString)
 
     Console.WriteLine(stringFormat)
 
 Next sizeUnit
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.Filesize.bytesB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The filesize, in Bytes.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.Filesize.Size(Elektro.Core.IO.Enums.SizeUnits)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the filesize, in the specified unit of size.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sizeUnit">
 The unit of size.
 </param>
 ----------------------------------------------------------------------------------------------------
 <value>
 The filesize.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.Filesize.Size(Elektro.Core.IO.Enums.SizeUnits,System.Int32,System.Globalization.NumberFormatInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the filesize, in the specified unit of size, using the specified numeric format.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sizeUnit">
 The unit of size.
 </param>
 
 <param name="numberFormatInfo">
 A custom <see cref="T:System.Globalization.NumberFormatInfo"/> format provider.
 </param>
 ----------------------------------------------------------------------------------------------------
 <value>
 The filesize.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.Filesize.SizeRounded">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the filesize, rounded using the most approximated unit of size.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The rounded filesize.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.Filesize.sizeRoundedB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The rounded value.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.Filesize.SizeRounded(System.Int32,System.Globalization.NumberFormatInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the filesize, rounded using the most approximated unit of size, with the specified decimal precision.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="decimalPrecision">
 The decimal precision.
 </param>
 
 <param name="numberFormatInfo">
 A <see cref="T:System.Globalization.NumberFormatInfo"/> format provider.
 </param>
 ----------------------------------------------------------------------------------------------------
 <value>
 The rounded value, with the specified decimal precision.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.Filesize.SizeUnit">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the <see cref="T:Elektro.Core.IO.Enums.SizeUnits"/> used to round the <see cref="P:Elektro.Core.IO.Types.Filesize.Size(Elektro.Core.IO.Enums.SizeUnits)"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The <see cref="T:Elektro.Core.IO.Enums.SizeUnits"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.Filesize.sizeUnitB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The <see cref="T:Elektro.Core.IO.Enums.SizeUnits"/> used to round the <see cref="P:Elektro.Core.IO.Types.Filesize.Size(Elektro.Core.IO.Enums.SizeUnits)"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.Filesize.SizeUnitNameShort">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the short name of the <see cref="T:Elektro.Core.IO.Enums.SizeUnits"/> used to round the <see cref="P:Elektro.Core.IO.Types.Filesize.Size(Elektro.Core.IO.Enums.SizeUnits)"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The short name of the <see cref="T:Elektro.Core.IO.Enums.SizeUnits"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.Filesize.sizeUnitNameShortB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The short name of the <see cref="T:Elektro.Core.IO.Enums.SizeUnits"/> used to round the <see cref="P:Elektro.Core.IO.Types.Filesize.Size(Elektro.Core.IO.Enums.SizeUnits)"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.Filesize.SizeUnitNameLong">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the long name of the <see cref="T:Elektro.Core.IO.Enums.SizeUnits"/> used to round the <see cref="P:Elektro.Core.IO.Types.Filesize.Size(Elektro.Core.IO.Enums.SizeUnits)"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The short long of the <see cref="T:Elektro.Core.IO.Enums.SizeUnits"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.Filesize.sizeUnitNameLongB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The long name of the <see cref="T:Elektro.Core.IO.Enums.SizeUnits"/> used to round the <see cref="P:Elektro.Core.IO.Types.Filesize.Size(Elektro.Core.IO.Enums.SizeUnits)"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.Filesize.#ctor(System.Double,Elektro.Core.IO.Enums.SizeUnits)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.IO.Types.Filesize"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="size">
 The filesize.
 </param>
 
 <param name="sizeUnit">
 The unit of size.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.Filesize.Convert(System.Double,Elektro.Core.IO.Enums.SizeUnits,Elektro.Core.IO.Enums.SizeUnits)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts the specified filesize to a different unit of size.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="size">
 The filesize.
 </param>
 
 <param name="fromUnit">
 The unit size to convert from.
 </param>
 
 <param name="toUnit">
 The unit size to convert to.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting value of the unit conversion.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.Filesize.GetType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the ddd<see cref="T:System.Type"/> of the current instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The exact runtime type of the current instance.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.Filesize.Equals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are considered equal.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the objects are considered equal; otherwise, <see langword="False"/>.
 <para></para>
 If both <paramref name="objA"/> and <paramref name="objB"/> are <see langword="Nothing"/>, 
 the method returns <see langword="True"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.Filesize.ReferenceEquals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are the same instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if <paramref name="objA"/> is the same instance as <paramref name="objB"/> 
 or if both are <see langword="Nothing"/>; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.Filesize.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a String that represents the current object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A string that represents the current object.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Types.FileSplitter">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Split or merge a file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Imports System.IO

 Public Class Form1 : Inherits Form
 
     Friend WithEvents Splitter As New FileSplitter("C:\File.ext") With {.BufferSize = .BufferSize}
     Friend WithEvents Merger As FileSplitter
 
     ' Splitter settings.
     Private ReadOnly chunkName As String = "File.Part"
     Private ReadOnly chunkExt As String = "fs"
 
     ' Some default chunk sizes to split a file.
     Private ReadOnly kilobyte As Integer = 1024
     Private ReadOnly megabyte As Integer = 1048576
     Private ReadOnly gigabyte As Integer = 1073741824
     Private ReadOnly halfFileSize As Long = CLng(Me.Splitter.File.Length / 2)
 
     ' The label controls that will display the progress.
     Friend LabelSplit1 As New Label, LabelSplit2 As New Label, LabelSplit3 As New Label
     Friend LabelMerge1 As New Label, LabelMerge2 As New Label, LabelMerge3 As New Label
 
     ' The button controls to start a split or merge operation.
     Friend WithEvents ButtonSplit As New Button, ButtonMerge As New Button
 
     Public Sub New()
 
         ' This call is required by the designer.
         Me.InitializeComponent()
 
         ' Set the controls properties.
         With Me.ButtonSplit
             .Text = "Split"
             .Font = New Font(Me.Font.FontFamily, 14.0F, FontStyle.Bold)
             .Size = New Size(200, 75)
             .Location = New Point(0, 0)
             .Cursor = Cursors.Hand
         End With
 
         With Me.ButtonMerge
             .Text = "Merge"
             .Font = New Font(Me.Font.FontFamily, 14.0F, FontStyle.Bold)
             .Size = New Size(200, 75)
             .Location = New Point(Me.ButtonSplit.Location.X + Me.ButtonSplit.Width, 0)
             .Cursor = Cursors.Hand
         End With
 
         With Me.LabelSplit1
             .Text = "Total Progress:"
             .AutoSize = True
             .Font = New Font(Me.Font.FontFamily, 9.0F, FontStyle.Regular)
             .Location = New Point(0, Me.ButtonSplit.Location.Y + Me.ButtonSplit.Height + 10)
         End With
 
         With Me.LabelSplit2
             .Text = "Chunk Progress:"
             .AutoSize = True
             .Font = New Font(Me.Font.FontFamily, 9.0F, FontStyle.Regular)
             .Location = New Point(0, Me.LabelSplit1.Location.Y + Me.LabelSplit1.Height)
         End With
 
         With Me.LabelSplit3
             .Text = "Chunk Count:"
             .AutoSize = True
             .Font = New Font(Me.Font.FontFamily, 9.0F, FontStyle.Regular)
             .Location = New Point(0, Me.LabelSplit2.Location.Y + Me.LabelSplit2.Height)
         End With
 
         With Me.LabelMerge1
             .Text = "Total Progress:"
             .AutoSize = True
             .Font = New Font(Me.Font.FontFamily, 9.0F, FontStyle.Regular)
             .Location = New Point(Me.ButtonMerge.Location.X, Me.ButtonMerge.Location.Y + Me.ButtonMerge.Height + 10)
         End With
 
         With Me.LabelMerge2
             .Text = "Chunk Progress:"
             .AutoSize = True
             .Font = New Font(Me.Font.FontFamily, 9.0F, FontStyle.Regular)
             .Location = New Point(Me.ButtonMerge.Location.X, Me.LabelMerge1.Location.Y + Me.LabelMerge1.Height)
         End With
 
         With Me.LabelMerge3
             .Text = "Chunk Count:"
             .AutoSize = True
             .Font = New Font(Me.Font.FontFamily, 9.0F, FontStyle.Regular)
             .Location = New Point(Me.ButtonMerge.Location.X, Me.LabelMerge2.Location.Y + Me.LabelMerge2.Height)
         End With
 
         ' Add the controls on the UI.
         Me.Controls.AddRange({Me.LabelSplit1, Me.LabelSplit2, Me.LabelSplit3,
                               Me.LabelMerge1, Me.LabelMerge2, Me.LabelMerge3,
                               Me.ButtonSplit, Me.ButtonMerge})
 
         ' Set the Form properties.
         With Me
             .Size = New Size(Me.ButtonSplit.Width + Me.ButtonMerge.Width + 20, 200)
             .FormBorderStyle = FormBorderStyle.FixedDialog
             .MaximizeBox = False
         End With
 
     End Sub
 
     Private Sub ButtonSplit_Click() Handles ButtonSplit.Click
 
         Me.ButtonSplit.Enabled = False
 
         Me.Splitter.Split(chunkSize:=Me.halfFileSize,
                           chunkName:=Me.chunkName,
                           chunkExt:=Me.chunkExt,
                           overwrite:=True,
                           deleteAfterSplit:=False)
 
         ' Or...
         'Me.splitter.Split(chunkCount:=2,
         '                  chunkName:=Me.chunkName,
         '                  chunkExt:=Me.chunkExt,
         '                  overwrite:=True,
         '                  deleteAfterSplit:=False)
 
     End Sub
 
     ''' &lt;summary&gt;
     ''' Handles the &lt;see cref="Button.Click"/&gt; event of the &lt;see cref="ButtonMerge"/&gt; control.
     ''' &lt;/summary&gt;
     Private Sub ButtonMerge_Click() Handles ButtonMerge.Click
 
         Me.ButtonMerge.Enabled = False
 
         Me.Merger = New FileSplitter("C:\File.Part.1.fs") With {.BufferSize = .BufferSize}
         Dim targetFileName As String = String.Format("{0}{1}{2}", Me.Merger.File.DirectoryName, "Merged", Me.Merger.File.Extension)
 
         Me.Merger.Merge(targetFile:=targetFileName,
                         overwrite:=True,
                         deleteChunksAfterMerged:=False)
 
     End Sub
 
     ''' &lt;summary&gt;
     ''' Handles the &lt;see cref="FileSplitter.ProgressChanged"/&gt; event of the &lt;see cref="Splitter"/&gt; instance.
     ''' &lt;/summary&gt;
     ''' &lt;param name="sender"&gt;
     ''' The source of the event.
     ''' &lt;/param&gt;
     ''' &lt;param name="e"&gt;
     ''' The &lt;see cref="FileSplitterProgressChangedEventArgs"/&gt; instance containing the event data.
     ''' &lt;/param&gt;
     Private Sub Splitter_ProgressChanged(ByVal sender As Object, ByVal e As FileSplitterProgressChangedEventArgs) _
     Handles Splitter.ProgressChanged
 
         Me.LabelSplit1.Text = String.Format("Total Progress: {0}%", e.TotalProgress.ToString("n1"))
         Me.LabelSplit2.Text = String.Format("Chunk Progress: {0}%", e.ChunkProgress.ToString("n1"))
         Me.LabelSplit3.Text = String.Format("Current  Chunk: {0} of {1}", CStr(e.ChunksCreatedOrMerged + 1), CStr(e.ChunksToCreateOrMerge))
         Application.DoEvents()
 
         If (e.TotalProgress = 100.0R) Then
             Me.ButtonSplit.Enabled = True
         End If
 
     End Sub
 
     ''' &lt;summary&gt;
     ''' Handles the &lt;see cref="FileSplitter.ProgressChanged"/&gt; event of the &lt;see cref="Merger"/&gt; instance.
     ''' &lt;/summary&gt;
     ''' &lt;param name="sender"&gt;
     ''' The source of the event.
     ''' &lt;/param&gt;
     ''' &lt;param name="e"&gt;
     ''' The &lt;see cref="FileSplitterProgressChangedEventArgs"/&gt; instance containing the event data.
     ''' &lt;/param&gt;
     Private Sub Merger_ProgressChanged(ByVal sender As Object, ByVal e As FileSplitterProgressChangedEventArgs) _
     Handles Merger.ProgressChanged
 
         Me.LabelMerge1.Text = String.Format("Total Progress: {0}%", e.TotalProgress.ToString("n1"))
         Me.LabelMerge2.Text = String.Format("Chunk Progress: {0}%", e.ChunkProgress.ToString("n1"))
         Me.LabelMerge3.Text = String.Format("Current  Chunk: {0} of {1}", CStr(e.ChunksCreatedOrMerged + 1), CStr(e.ChunksToCreateOrMerge))
         Application.DoEvents()
 
         If (e.TotalProgress = 100.0R) Then
             Me.ButtonMerge.Enabled = True
         End If
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.FileSplitter.File">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the file to split or merge.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.FileSplitter.fInfoB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The file to split or merge.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.FileSplitter.BufferSize">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the buffer-size used to split or merge, in Bytes.
 <para></para>
 Default value is: 524288 bytes (512 Kb).
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
    4096 Bytes (  4 Kb) This is the default Microsoft's FileStream implementation buffer size.
    8192 Bytes (  8 Kb)
   16384 Bytes ( 16 Kb)
   32768 Bytes ( 32 Kb)
   65536 Bytes ( 64 Kb)
  131072 Bytes (128 Kb)
  262144 Bytes (256 Kb)
  524288 Bytes (512 Kb)
 1048576 Bytes (  1 Mb)
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <value>
 The buffer-size.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.FileSplitter.events">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A list of event delegates.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Core.IO.Types.FileSplitter.ProgressChanged">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when the progress changes when splitting or merging a file.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileSplitter.OnProgressChanged(Elektro.Core.IO.Types.EventArgs.FileSplitterProgressChangedEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Raises <see cref="E:Elektro.Core.IO.Types.FileSplitter.ProgressChanged"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:Elektro.Core.IO.Types.EventArgs.FileSplitterProgressChangedEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileSplitter.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.IO.Types.FileSplitter"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileSplitter.#ctor(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.IO.Types.FileSplitter"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The path of the file to split or merge.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileSplitter.Split(System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Splits a file into the specified amount of chunks.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="chunkCount">
 The amount of chunks to generate.
 </param>
 
 <param name="chunkName">
 The name-format for the generated chunks.
 </param>
 
 <param name="chunkExt">
 The file-extension of the generated chunks.
 </param>
 
 <param name="overwrite">
 If set to <see langword="True"/>, any existing file will be overwritten if needed to create a chunk, 
 otherwise, an exception will be thrown.
 </param>
 
 <param name="deleteAfterSplit">
 If set to <see langword="True"/>, the source file will be deleted after a successful split operation.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.Exception">
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileSplitter.Split(System.Int64,System.String,System.String,System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Splits a file into chunks of the specified filesize.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="chunkSize">
 The size per chunk, in bytes.
 </param>
 
 <param name="chunkName">
 The name-format for the generated chunks.
 </param>
 
 <param name="chunkExt">
 The file-extension of the generated chunks.
 </param>
 
 <param name="overwrite">
 If set to <see langword="True"/>, any existing file will be overwritten if needed to create a chunk, 
 otherwise, an exception will be thrown.
 </param>
 
 <param name="deleteAfterSplit">
 If set to <see langword="True"/>, the source file will be deleted after a successful split operation.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 The specified source file doesn't exists.
 </exception>
 
 <exception cref="T:System.IO.IOException">
 File already exists.
 </exception>
 
 <exception cref="T:System.OverflowException">
 'chunkSize' value should be smaller than the source filesize.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileSplitter.Merge(System.String,System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Merges the chunks of a previously splitted file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="targetFile">
 The target filepath.
 </param>
 
 <param name="overwrite">
 If set to <see langword="True"/>, in case that the specified file in <paramref name="targetFile"/> exists it will be overwritten,
 otherwise, an exception will be thrown.
 </param>
 
 <param name="deleteChunksAfterMerged">
 If set to <see langword="True"/>, the chunks will be deleted after a successful merge operation.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 The specified source chunk file doesn't exists.
 </exception>
 
 <exception cref="T:System.IO.FileNotFoundException">
 Only one chunk file found, the last chunk file is missing.
 </exception>
 
 <exception cref="T:System.IO.IOException">
 The specified target file already exists.
 </exception>
 
 <exception cref="T:System.OverflowException">
 Unexpected chunk filesize-count detected, maybe one of the chunk files is corrupt?.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.FileSplitter.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileSplitter.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.FileSplitter.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Types.KeyboardDeviceInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Encapsulates the information about a keyboard event, including the device it originated with and what key was pressed.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.KeyboardDeviceInfo.Name">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the device name.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The device name.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.KeyboardDeviceInfo.Type">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the device type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The device type.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.KeyboardDeviceInfo.Handle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the device handle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The device handle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.KeyboardDeviceInfo.Description">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the device description.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The device description.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.KeyboardDeviceInfo.Source">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the source.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The source.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.KeyboardDeviceInfo.KeyNum">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the key number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The key.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.KeyboardDeviceInfo.Key">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the key.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The key.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.KeyboardDeviceInfo.Chars">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the characters.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The characters.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.KeyboardDeviceInfo.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.IO.Types.KeyboardDeviceInfo"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Types.KeyboardMonitor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the raw input from keyboard devices.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public NotInheritable Class Form1 : Inherits Form
 
     Friend WithEvents KeyLogger As New KeyboardMonitor(Me)
 
     Public Sub New()
 
         Me.InitializeComponent()
 
         ' Set keyboard layout to the default culture, in my case 'es-ES'.
         Me.KeyLogger.Language = InputLanguage.DefaultInputLanguage.Culture.Name
 
         ' Handle text pasting operations (Ctrl+V).
         Me.KeyLogger.HandlePastes = True
 
         ' Avoid raising KeyPressed event for non-relevant keys for this app example: 
         ' Left/Right Shift, Alt, AltGr, CapsLock, NumLock, and Left/Right Win key.
         Me.KeyLogger.IgnoredKeys = {Keys.ShiftKey, Keys.Menu, Keys.CapsLock, Keys.NumLock, Keys.LWin, Keys.RWin}
 
         ' Me.keyLogger.IgnoredChars = {"^"c}
         ' Me.keyLogger.IgnoredCharsComparer = EqualityComparer(Of Char).Default
 
         ' Me.keyLogger.IgnoredStrings = {"^^"}
         ' Me.keyLogger.IgnoredStringsComparer = StringComparer.OrdinalIgnoreCase
 
         ' Enable the keylogger.
         Me.KeyLogger.Enabled = True 
 
     End Sub
 
     Private Sub KeyLogger_KeyPressed(ByVal sender As Object, ByVal e As KeyPressedEventArgs) _
     Handles KeyLogger.KeyPressed
 
         Me.Label1.Text = String.Format("Device Handle: {0}", e.DeviceInfo.Handle.ToString)
         Me.Label2.Text = String.Format("Device Type: {0}", e.DeviceInfo.Type)
         Me.Label3.Text = String.Format("Device Name: {0}", e.DeviceInfo.Name.Replace("&amp;", "&amp;&amp;"))
         Me.Label4.Text = String.Format("Device Description: {0}", e.DeviceInfo.Description)
         Me.Label5.Text = String.Format("Device Key: System.Windows.Forms.Keys.{0}", e.DeviceInfo.Key.ToString)
         Me.Label6.Text = String.Format("Devices Count: {0}", Me.KeyLogger.DeviceCount.ToString)
 
         Select Case e.DeviceInfo.Key
 
             Case Keys.Enter
                 e.DeviceInfo.Chars = ControlChars.CrLf &amp; "{ENTER}"
 
             Case Keys.Back
                 e.DeviceInfo.Chars = "{BACKSPACE}"
 
             Case Keys.ControlKey
                 e.DeviceInfo.Chars = "{CTRL}"
 
             Case Else
                 ' ...
 
         End Select
 
         Me.TextBox1.Text = e.DeviceInfo.Chars
         Me.TextBox2.AppendText(e.DeviceInfo.Chars)
 
     End Sub
 
     Private Sub KeyLogger_HotkeyPastePressed(ByVal sender As Object, ByVal e As HotkeyPastePressedEventArgs) _
     Handles KeyLogger.HotkeyPastePressed
 
         Me.TextBox2.AppendText("{INIT_PASTE}" &amp; e.ClipboardData &amp; "{END_PASTE}")
 
     End Sub
 
     Private Sub Button_Clean_Click(sender As Object, e As EventArgs) _
     Handles Button1.Click
 
         Me.TextBox2.Clear()
 
     End Sub
 
     Private Sub Button_Dispose_Click(ByVal sender As Object, ByVal e As EventArgs) _
     Handles Button2.Click
 
         If Me.KeyLogger IsNot Nothing Then
             Me.KeyLogger.Dispose()
         End If
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.KeyboardMonitor.deviceList">
 ----------------------------------------------------------------------------------------------------
 <summary>
 List of devices. 
 <para></para>
 Key: An <see cref="T:System.IntPtr"/> that points to the device handle.
 <para></para>
 Value: The associated <see cref="T:Elektro.Core.IO.Types.KeyboardDeviceInfo"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.KeyboardMonitor.FappCommandMask">
 ----------------------------------------------------------------------------------------------------
 <summary>
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.KeyboardMonitor.OwnerWindow">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the window that owns this <see cref="T:Elektro.Core.IO.Types.KeyboardMonitor"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The window.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.KeyboardMonitor.ownerWindowB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The window that owns this <see cref="T:Elektro.Core.IO.Types.KeyboardMonitor"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.KeyboardMonitor.Handle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the handle for the window that owns this <see cref="T:Elektro.Core.IO.Types.KeyboardMonitor"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The handle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.KeyboardMonitor.DeviceCount">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the amount of keyboard devices.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The amount of keyboard devices.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.KeyboardMonitor.deviceCountB">
 <summary>
 ( Backing Field )
 The amount of keyboard devices.
 </summary>
</member>
<member name="P:Elektro.Core.IO.Types.KeyboardMonitor.Language">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the keyboard language.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The keyboard language.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.KeyboardMonitor.languageB">
 <summary>
 ( Backing Field )
 The keyboard language.
 </summary>
</member>
<member name="P:Elektro.Core.IO.Types.KeyboardMonitor.CurrentCulture">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the keyboard culture.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The keyboard culture.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.KeyboardMonitor.KeyboardLayoutID">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the keyboard layout Identifier.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The keyboard layout Identifier.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.KeyboardMonitor.KeyboardLayoutHandle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the keyboard layout handle (HKL).
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The keyboard layout handle (HKL).
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.KeyboardMonitor.IgnoredKeys">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a collection of <see cref="T:System.Windows.Forms.Keys"/> to ignore from raising the <see cref="E:Elektro.Core.IO.Types.KeyboardMonitor.KeyPressed"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The collection of <see cref="T:System.Windows.Forms.Keys"/> to ignore.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.KeyboardMonitor.IgnoredChars">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a collection of <see cref="T:System.Char"/> to ignore from raising the <see cref="E:Elektro.Core.IO.Types.KeyboardMonitor.KeyPressed"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The collection of <see cref="T:System.Char"/> to ignore.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.KeyboardMonitor.IgnoredCharsComparer">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the comparison behavior for <see cref="P:Elektro.Core.IO.Types.KeyboardMonitor.IgnoredChars"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The comparison behavior for <see cref="P:Elektro.Core.IO.Types.KeyboardMonitor.IgnoredChars"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.KeyboardMonitor.IgnoredStrings">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a collection of <see cref="T:System.String"/> to ignore from raising the <see cref="E:Elektro.Core.IO.Types.KeyboardMonitor.KeyPressed"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The collection of <see cref="T:System.String"/> to ignore.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.KeyboardMonitor.IgnoredStringsComparer">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the comparison behavior for <see cref="P:Elektro.Core.IO.Types.KeyboardMonitor.IgnoredStrings"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The comparison behavior for <see cref="P:Elektro.Core.IO.Types.KeyboardMonitor.IgnoredStrings"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.KeyboardMonitor.HandlePastes">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value that determines whether a paste operation (Ctrl+V) should be handled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 A value that determines whether a paste operation (Ctrl+V) should be handled.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.KeyboardMonitor.Enabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value that determines whether the keylogger is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 A value that determines whether the keylogger is enabled.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.KeyboardMonitor.enabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value that determines whether the keylogger is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Core.IO.Types.KeyboardMonitor.KeyPressed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when a key is pressed.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Core.IO.Types.KeyboardMonitor.HotkeyPastePressed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when a paste hotkey is pressed (<c>Ctrl</c>+<c>V</c>).
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.KeyboardMonitor.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.IO.Types.KeyboardMonitor"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.KeyboardMonitor.#ctor(System.Windows.Forms.IWin32Window)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.IO.Types.KeyboardMonitor"/> class.
 <para></para>
 Caling this constructor causes to registers the raw input devices for the calling window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="window">
 The window that will listen for device events.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ApplicationException">
 Failed to register raw input device(s).
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.KeyboardMonitor.RegisterDevices">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Registers the keyboard devices for RAW input.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ApplicationException">
 Failed to register raw input device(s).
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.KeyboardMonitor.GetDevice(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines what type of device triggered a <see cref="F:Elektro.Interop.Win32.Enums.WindowsMessages.WM_Input"/> message.
 <para></para>
 ( Used in the <see cref="M:Elektro.Core.IO.Types.KeyboardMonitor.ProcessInputCommand(System.Windows.Forms.Message)"/> method ).
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="lParam">
 The lParam from a <see cref="F:Elektro.Interop.Win32.Enums.WindowsMessages.WM_Input"/> message.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:Elektro.Core.IO.Enums.DeviceEvent"/> enumeration value.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.NotImplementedException">
 Unrecognized <see cref="T:Elektro.Interop.Win32.Enums.GetDeviceLparam"/> enumeration value
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.KeyboardMonitor.GetDeviceType(Elektro.Interop.Win32.Enums.DeviceType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts a <see cref="F:Elektro.Interop.Win32.Types.RawInputDeviceList.Type"/> value to a string describing the device type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="deviceType">
 A <see cref="F:Elektro.Interop.Win32.Types.RawInputDeviceList.Type"/> value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A string representation of the input value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.KeyboardMonitor.EnumerateDevices">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Iterates through the list provided by <see cref="M:Elektro.Interop.Win32.NativeMethods.GetRawInputDeviceList(System.IntPtr,System.UInt32@,System.UInt32)"/>,
 counting keyboard devices and adding them to <see cref="F:Elektro.Core.IO.Types.KeyboardMonitor.deviceList"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The number of keyboard devices found.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.KeyboardMonitor.ReadRegistry(System.String,System.Boolean@,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reads the Registry to retrieve a friendly description of the device, and determine whether it is a keyboard.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="nameID">
 The device name identifier to search for, 
 as provided by <see cref="M:Elektro.Interop.Win32.NativeMethods.GetRawInputDeviceInfo(System.IntPtr,Elektro.Interop.Win32.Enums.GetRawInputDeviceInfoCommand,System.IntPtr,System.UInt32@)"/> function.
 </param>
 
 <param name="isKeyboard">
 A reffered variable that determines whether the device's class is "Keyboard".
 </param>
 
 <param name="deviceType">
 The device type.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The device description stored in the registry entry's DeviceDesc value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.KeyboardMonitor.GetCharsFromKeys(System.Windows.Forms.Keys,System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the characters from keys.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="key">
 The key.
 </param>
 
 <param name="shift">
 The state of <see cref="F:System.Windows.Forms.Keys.ShiftKey"/>, <see langword="True"/> if enabled.
 </param>
 
 <param name="altGr">
 The state of <see cref="F:System.Windows.Forms.Keys.Menu"/>, <see langword="True"/> if enabled.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The characters.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.KeyboardMonitor.ProcessInputCommand(System.Windows.Forms.Message)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Processes <see cref="F:Elektro.Interop.Win32.Enums.WindowsMessages.WM_Input"/> messages to retrieve information about any keyboard events that occur.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="message">
 The <see cref="F:Elektro.Interop.Win32.Enums.WindowsMessages.WM_Input"/> message to process.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.KeyboardMonitor.WndProc(System.Windows.Forms.Message@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Invokes the default window procedure associated with this window to process windows messages.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="m">
 A <see cref="T:System.Windows.Forms.Message"/> that is associated with the current Windows message.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.KeyboardMonitor.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.KeyboardMonitor.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.KeyboardMonitor.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Types.MouseDeviceInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Encapsulates the information about a mouse event, including the device it originated with and what button was clicke.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.MouseDeviceInfo.Name">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the device name.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The device name.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.MouseDeviceInfo.Type">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the device type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The device type.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.MouseDeviceInfo.Handle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the device handle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The device handle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.MouseDeviceInfo.Description">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the device description.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The device description.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.MouseDeviceInfo.Source">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the source.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The source.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.MouseDeviceInfo.Position">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the mouse position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The mouse position.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.MouseDeviceInfo.Button">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the mouse button.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The mouse button.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseDeviceInfo.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.IO.Types.MouseDeviceInfo"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Types.MouseMonitor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the raw input from mouse devices.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public NotInheritable Class Form1 : Inherits Form
 
     Friend WithEvents MouseMon As New MouseMonitor(Me)
 
     Private Sub Form1_Shown(ByVal sender As Object, ByVal e As EventArgs) _
     Handles MyBase.Shown
 
         Me.MouseMon.WorkingArea = SystemInformation.VirtualScreen
         Me.MouseMon.SuppressMouseUpEventWhenDoubleClick = False
         Me.MouseMon.Enabled = True
 
     End Sub
 
     ''' ----------------------------------------------------------------------------------------------------
     ''' &lt;summary&gt;
     ''' Handles the &lt;see cref="MouseMonitor.MouseMove"/&gt; event of the &lt;see cref="MouseMon"/&gt; instance.
     ''' &lt;/summary&gt;
     ''' ----------------------------------------------------------------------------------------------------
     ''' &lt;param name="sender"&gt;
     ''' The source of the event.
     ''' &lt;/param&gt;
     ''' 
     ''' &lt;param name="e"&gt;
     ''' The &lt;see cref="MouseMoveEventArgs"/&gt; instance containing the event data.
     ''' &lt;/param&gt;
     ''' ----------------------------------------------------------------------------------------------------
     Private Sub MouseMon_MouseMove(ByVal sender As Object, ByVal e As MouseMoveEventArgs) _
     Handles MouseMon.MouseMove
 
         Console.WriteLine(String.Format("Mouse moved to: {0}", e.Position.ToString))
 
     End Sub
 
     ''' ----------------------------------------------------------------------------------------------------
     ''' &lt;summary&gt;
     ''' Handles the &lt;see cref="MouseMonitor.MouseButtonClick"/&gt; event of the &lt;see cref="MouseMon"/&gt; instance.
     ''' &lt;/summary&gt;
     ''' ----------------------------------------------------------------------------------------------------
     ''' &lt;param name="sender"&gt;
     ''' The source of the event.
     ''' &lt;/param&gt;
     ''' 
     ''' &lt;param name="e"&gt;
     ''' The &lt;see cref="MouseButtonClickEventArgs"/&gt; instance containing the event data.
     ''' &lt;/param&gt;
     ''' ----------------------------------------------------------------------------------------------------
     Private Sub MouseMon_MouseButtonClick(ByVal sender As Object, ByVal e As MouseButtonClickEventArgs) _
     Handles MouseMon.MouseButtonClick
 
         Console.WriteLine(String.Format("Mouse Button Click: {0,-10} at: {1}", e.MouseButton.ToString, e.DeviceInfo.Position.ToString))
 
     End Sub
 
     ''' ----------------------------------------------------------------------------------------------------
     ''' &lt;summary&gt;
     ''' Handles the &lt;see cref="MouseMonitor.MouseButtonDoubleClick"/&gt; event of the &lt;see cref="MouseMon"/&gt; instance.
     ''' &lt;/summary&gt;
     ''' ----------------------------------------------------------------------------------------------------
     ''' &lt;param name="sender"&gt;
     ''' The source of the event.
     ''' &lt;/param&gt;
     ''' 
     ''' &lt;param name="e"&gt;
     ''' The &lt;see cref="MouseButtonDoubleClickEventArgs"/&gt; instance containing the event data.
     ''' &lt;/param&gt;
     ''' ----------------------------------------------------------------------------------------------------
     Private Sub MouseMon_MouseButtonDoubleClick(ByVal sender As Object, ByVal e As MouseButtonDoubleClickEventArgs) _
     Handles MouseMon.MouseButtonDoubleClick
 
         Console.WriteLine(String.Format("Mouse Button Double-Click: {0,-5} at: {1}", e.MouseButton.ToString, e.DeviceInfo.Position.ToString))
 
     End Sub
 
     ''' ----------------------------------------------------------------------------------------------------
     ''' &lt;summary&gt;
     ''' Handles the &lt;see cref="MouseMonitor.MouseWheelScroll"/&gt; event of the &lt;see cref="MouseMon"/&gt; instance.
     ''' &lt;/summary&gt;
     ''' ----------------------------------------------------------------------------------------------------
     ''' &lt;param name="sender"&gt;
     ''' The source of the event.
     ''' &lt;/param&gt;
     ''' 
     ''' &lt;param name="e"&gt;
     ''' The &lt;see cref="MouseWheelScrollEventArgs"/&gt; instance containing the event data.
     ''' &lt;/param&gt;
     ''' ----------------------------------------------------------------------------------------------------
     Private Sub MouseMon_MouseWheelScroll(ByVal sender As Object, ByVal e As MouseWheelScrollEventArgs) _
     Handles MouseMon.MouseWheelScroll
 
         Console.WriteLine(String.Format("Mouse wheel scrolled to: {0}", e.WheelDirection.ToString))
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseMonitor.deviceList">
 ----------------------------------------------------------------------------------------------------
 <summary>
 List of devices. 
 <para></para>
 Key: An <see cref="T:System.IntPtr"/> that points to the device handle.
 <para></para>
 Value: The associated <see cref="T:Elektro.Core.IO.Types.MouseDeviceInfo"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseMonitor.FappCommandMask">
 ----------------------------------------------------------------------------------------------------
 <summary>
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseMonitor.lastMousePosition">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Keeps track of the last mouse position
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseMonitor.clickTimeButton">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Keeps track of the double-click time for the last mouse button.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.MouseMonitor.OwnerWindow">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the window that owns this <see cref="T:Elektro.Core.IO.Types.MouseMonitor"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The window.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseMonitor.ownerWindowB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The window that owns this <see cref="T:Elektro.Core.IO.Types.MouseMonitor"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.MouseMonitor.Handle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the handle for the window that owns this <see cref="T:Elektro.Core.IO.Types.MouseMonitor"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The handle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.MouseMonitor.DeviceCount">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the amount of mouse devices.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The amount of mouse devices.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseMonitor.deviceCountB">
 <summary>
 ( Backing Field )
 The amount of mouse devices.
 </summary>
</member>
<member name="P:Elektro.Core.IO.Types.MouseMonitor.Enabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value that determines whether the mouselogger is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 A value that determines whether the mouselogger is enabled.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseMonitor.enabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value that determines whether the mouselogger is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.MouseMonitor.WorkingArea">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the screen's working area on which to notify about mouse events.
 <para></para>
 The events fired by this <see cref="T:Elektro.Core.IO.Types.MouseMonitor"/> will be restricted to the bounds of the specified rectangle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The screen's working area on which to notify about mouse events.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseMonitor.workingareaB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The screen's working area on which to notify about mouse events.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.MouseMonitor.SuppressMouseButtonUpEventWhenDoubleClick">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ** ONLY FOR TESTING PURPOSES **
 <para></para>
 Gets or sets a value indicating whether to suppress the last <c>MouseUp</c> event of when a double-click occurs.
 <para></para>
 
 If this value is set to <see langword="True"/>, the application will send the events in this order for a Double-Click:
 <para></para>
 <c>MouseDown</c>, <c>MouseUp</c>, <c>MouseDown</c>, <c>MouseDoubleClick</c>
 <para></para>
 
 If this value is set to <see langword="False"/>, the application will send the events in this order for a Double-Click:
 <c>MouseDown</c>, <c>MouseUp</c>, <c>MouseDown</c>, <c>MouseUp</c>, <c>MouseDoubleClick</c>
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if MouseUp event is suppressed; <see langword="False"/> otherwise.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Core.IO.Types.MouseMonitor.MouseMove">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when the mouse moves.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Core.IO.Types.MouseMonitor.MouseButtonClick">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when a mouse button is clicked.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Core.IO.Types.MouseMonitor.MouseButtonDoubleClick">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when a mouse button is clicked twice producing a double-click.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Core.IO.Types.MouseMonitor.MouseWheelScroll">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when the mouse wheel scrolls up or down.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseMonitor.#ctor(System.Windows.Forms.IWin32Window)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.IO.Types.MouseMonitor"/> class.
 <para></para>
 Caling this constructor causes to registers the raw input devices for the calling window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="window">
 The window that will listen for device events.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ApplicationException">
 Failed to register raw input device(s).
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseMonitor.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.IO.Types.MouseMonitor"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseMonitor.RegisterDevices">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Registers the mouse devices for RAW input.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ApplicationException">
 Failed to register raw input device(s).
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseMonitor.GetDevice(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines what type of device triggered a <see cref="F:Elektro.Interop.Win32.Enums.WindowsMessages.WM_Input"/> message.
 <para></para>
 ( Used in the <see cref="M:Elektro.Core.IO.Types.MouseMonitor.ProcessInputCommand(System.Windows.Forms.Message)"/> method ).
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="lParam">
 The lParam from a <see cref="F:Elektro.Interop.Win32.Enums.WindowsMessages.WM_Input"/> message.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:Elektro.Core.IO.Enums.DeviceEvent"/> enumeration value.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.NotImplementedException">
 Unrecognized <see cref="T:Elektro.Interop.Win32.Enums.GetDeviceLparam"/> enumeration value
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseMonitor.GetDeviceType(Elektro.Interop.Win32.Enums.DeviceType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts a <see cref="F:Elektro.Interop.Win32.Types.RawInputDeviceList.Type"/> value to a string describing the device type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="deviceType">
 A <see cref="F:Elektro.Interop.Win32.Types.RawInputDeviceList.Type"/> value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A string representation of the input value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseMonitor.EnumerateDevices">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Iterates through the list provided by <see cref="M:Elektro.Interop.Win32.NativeMethods.GetRawInputDeviceList(System.IntPtr,System.UInt32@,System.UInt32)"/>,
 counting mouse devices and adding them to <see cref="F:Elektro.Core.IO.Types.MouseMonitor.deviceList"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The number of mouse devices found.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseMonitor.ReadRegistry(System.String,System.Boolean@,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reads the Registry to retrieve a friendly description of the device, and determine whether it is a mmouse.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="nameID">
 The device name identifier to search for, 
 as provided by <see cref="M:Elektro.Interop.Win32.NativeMethods.GetRawInputDeviceInfo(System.IntPtr,Elektro.Interop.Win32.Enums.GetRawInputDeviceInfoCommand,System.IntPtr,System.UInt32@)"/> function.
 </param>
 
 <param name="isMouse">
 A reffered variable that determines whether the device's class is "Mouse".
 </param>
 
 <param name="deviceType">
 The device type.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The device description stored in the registry entry's DeviceDesc value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseMonitor.ProcessInputCommand(System.Windows.Forms.Message)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Processes <see cref="F:Elektro.Interop.Win32.Enums.WindowsMessages.WM_Input"/> messages to retrieve information about any mouse events that occur.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="message">
 The <see cref="F:Elektro.Interop.Win32.Enums.WindowsMessages.WM_Input"/> message to process.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ApplicationException">
 Received unknown input. Possibly an unknown device.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseMonitor.ConvertRawMouseButtonToMouseButton(Elektro.Interop.Win32.Enums.RawMouseButtons)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts a <see cref="T:Elektro.Interop.Win32.Enums.RawMouseButtons"/> value to <see cref="T:System.Windows.Forms.MouseButtons"/> value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="mouseButton">
 The mouse button.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Windows.Forms.MouseButtons"/> value.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 mouseButton
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseMonitor.WndProc(System.Windows.Forms.Message@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Invokes the default window procedure associated with this window to process windows messages.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="m">
 A <see cref="T:System.Windows.Forms.Message"/> that is associated with the current Windows message.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseMonitor.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseMonitor.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseMonitor.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Types.MouseRecorder">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Record and play the mouse events (Macros)
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseRecorder.coordinatesList">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The recorded mouse coordenates.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseRecorder.clicksDictionary">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The recorded mouse clicks.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseRecorder._RecordTimer">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The timer to record the mouse events.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseRecorder.clickCount">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Button click count to record/play clicks.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseRecorder.threadMousePlayVar">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Thread to play the mouse actions.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseRecorder.lastClickStateLeft">
 ----------------------------------------------------------------------------------------------------
 <summary>
 GetAsyncKeyState buttons status.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseRecorder.lastClickStateRight">
 ----------------------------------------------------------------------------------------------------
 <summary>
 GetAsyncKeyState buttons status.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseRecorder.lastClickStateMiddle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 GetAsyncKeyState buttons status.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.MouseRecorder.MouseSpeed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the speed of recording/playing the mouse actions.
 <para></para>
 Default value is <c>30</c>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The mouse speed.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.MouseRecorder.IsPlaying">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the status of the current mouse play.
 <para></para>
 <see langword="False"/> = Mouse macro is playing.
 <para></para>
 <see langword="True"/> = Mouse macro is done.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseRecorder.isPlayingB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backinf field )
 Gets the status of the current mouse play.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseRecorder.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.IO.Types.MouseRecorder"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseRecorder.Record">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Starts recording the mouse actions over the screen.
 <para></para>
 It records the position of the mouse and left/right button clicks.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseRecorder.Stop">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Stop recording the mouse actions.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseRecorder.Play">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reproduce the mouse actions.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseRecorder.ThreadMousePlay">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Thread used for reproduce the mouse actions.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseRecorder.RecordTimer_Tick(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Timer.Tick"/> event of the <see cref="P:Elektro.Core.IO.Types.MouseRecorder.RecordTimer"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Core.IO.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseRecorder.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseRecorder.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseRecorder.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Types.ShortcutInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Stores information about a shortcut file.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.ShortcutInfo.ShortcutFile">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the full path of the shortcut file.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.ShortcutInfo.Description">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the comment/description.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.ShortcutInfo.Arguments">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the target arguments.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.ShortcutInfo.Target">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the target.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.ShortcutInfo.WorkingDir">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the working directory.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.ShortcutInfo.Icon">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the icon location.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.ShortcutInfo.IconIndex">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the icon index.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.ShortcutInfo.Hotkey">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the hotkey combination, represented in Hexadecimal.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.ShortcutInfo.HotkeyModifier">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the hotkey modifiers.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.ShortcutInfo.HotkeyAccesor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the hotkey Combination.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.ShortcutInfo.WindowState">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the window state.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.ShortcutInfo.IsFile">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value that indicates whether the target is a file.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.ShortcutInfo.IsDirectory">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value that indicates whether the target is a directory.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.ShortcutInfo.DriveLetter">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the target drive letter.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.ShortcutInfo.DirectoryName">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the target directory name.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.ShortcutInfo.FileName">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the target filename.
 <para></para>
 (File extension is not included in name)
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.ShortcutInfo.FileExtension">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the target file extension.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.ShortcutInfo.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.IO.Types.ShortcutInfo"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.IO.Types.MouseHook">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A low level mouse hook that processes mouse input events.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseHook.mouseHook">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handle to the hook procedure.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseHook.mouseHookDelegate">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The mouse hook delegate.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseHook.lastMousePosition">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Keeps track of the last mouse position
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseHook.clickTimeButton">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Keeps track of the double-click time for the last mouse button.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.MouseHook.IsInstalled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value indicating whether the Hook is installed.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseHook.isInstalledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the Hook is installed.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.MouseHook.IsEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value indicating whether the Hook is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseHook.isEnabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the Hook is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.MouseHook.SuppressMouseButtonUpEventWhenDoubleClick">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ** ONLY FOR TESTING PURPOSES **
 <para></para>
 Gets or sets a value indicating whether to suppress the last <c>MouseUp</c> event of when a double-click occurs.
 <para></para>
 
 If this value is set to <see langword="True"/>, the application will send the events in this order for a Double-Click:
 <para></para>
 <c>MouseDown</c>, <c>MouseUp</c>, <c>MouseDown</c>, <c>MouseDoubleClick</c>
 <para></para>
 
 If this value is set to <see langword="False"/>, the application will send the events in this order for a Double-Click:
 <c>MouseDown</c>, <c>MouseUp</c>, <c>MouseDown</c>, <c>MouseUp</c>, <c>MouseDoubleClick</c>
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if MouseUp event is suppressed; <see langword="False"/> otherwise.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.IO.Types.MouseHook.WorkingArea">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the screen's working area on which to notify about mouse events.
 <para></para>
 The events fired by this <see cref="F:Elektro.Core.IO.Types.MouseHook.mouseHook"/> will be restricted to the bounds of the specified rectangle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The screen's working area on which to notify about mouse events.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseHook.workingareaB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The screen's working area on which to notify about mouse events.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Core.IO.Types.MouseHook.MouseMove">
 <summary>
 Occurs when the mouse moves.
 </summary>
</member>
<member name="E:Elektro.Core.IO.Types.MouseHook.MouseButtonClick">
 <summary>
 Occurs when a mouse button is pressed or released.
 </summary>
</member>
<member name="E:Elektro.Core.IO.Types.MouseHook.MouseButtonDoubleClick">
 <summary>
 Occurs when the mouse performs a double-click on a button.
 <para></para>
 A double click is considered as: (MouseButtonDown + MouseButtonUp) * 2
 </summary>
</member>
<member name="E:Elektro.Core.IO.Types.MouseHook.MouseWheel">
 <summary>
 Occurs when the mouse wheel is moved up or down.
 </summary>
</member>
<member name="M:Elektro.Core.IO.Types.MouseHook.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="F:Elektro.Core.IO.Types.MouseHook.mouseHook"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseHook.Install">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Installs the Mouse Hook, then start processing messages to fire events.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseHook.Uninstall">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Uninstalls the Mouse Hook and free all resources, then stop processing messages to fire events.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseHook.Disable">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Temporally disables the Mouse Hook events.
 <para></para>
 To re-enable the events, call the <see cref="M:Elektro.Core.IO.Types.MouseHook.Enable"/> method.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseHook.Enable">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Enables the Mouse Hook events.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseHook.LowLevelMouseProc(System.Int32,System.IntPtr,System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Processes the mouse windows messages and raises it's corresponding events.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms644986%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="nCode">
 A code the hook procedure uses to determine how to process the message. 
 <para></para>
 If <paramref name="nCode"/> is less than zero, 
 the hook procedure must pass the message to the <see cref="M:Elektro.Interop.Win32.NativeMethods.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,Elektro.Interop.Win32.Types.KeyboardLowLevelHookStruct@)"/> function 
 without further processing and should return the value returned by <see cref="M:Elektro.Interop.Win32.NativeMethods.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,Elektro.Interop.Win32.Types.KeyboardLowLevelHookStruct@)"/>. 
 </param>
 
 <param name="wParam">
 The identifier of the mouse message.
 </param>
 
 <param name="lParam"> A pointer to an <see cref="T:Elektro.Interop.Win32.Types.MouseLowLevelHookStruct"/> structure.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If <paramref name="nCode"/> is less than zero, 
 the hook procedure must return the value returned by <see cref="M:Elektro.Interop.Win32.NativeMethods.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,Elektro.Interop.Win32.Types.KeyboardLowLevelHookStruct@)"/>.
 <para></para>
 If <paramref name="nCode"/> is greater than or equal to zero, and the hook procedure did not process the message,
 it is highly recommended that you call <see cref="M:Elektro.Interop.Win32.NativeMethods.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,Elektro.Interop.Win32.Types.KeyboardLowLevelHookStruct@)"/> and return the value it returns;
 otherwise, other applications that have installed <see cref="F:Elektro.Interop.Win32.Enums.HookType.MouseLL"/> hooks will not receive hook notifications
 and may behave incorrectly as a result.
 <para></para>
 If the hook procedure processed the message,
 it may return a non-zero value to prevent the system from passing the 
 message to the rest of the hook chain or the target window procedure.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.IO.Types.MouseHook.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseHook.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseHook.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.IO.Types.MouseHook.Finalize">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.RegEx.Tools.RegExUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains RegEx related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.RegEx.Tools.RegExUtil.Patterns">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A class that exposes common RegEx patterns.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.RegEx.Tools.RegExUtil.Patterns.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.Text.RegEx.Tools.RegExUtil.Patterns"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.RegEx.Tools.RegExUtil.Patterns.Url">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A pattern that matches an URL.
 <para></para>
 
 For Example:
 <para></para>
 <c>http://url</c> or <c>ftp://url</c>
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.RegEx.Tools.RegExUtil.Patterns.HtmlTag">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A pattern that matches the content of an Html enclosed tag.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.RegEx.Tools.RegExUtil.Patterns.Ipv4">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A pattern that matches an IPv4 address.
 <para></para>
 
 For Example:
 <para></para>
 <c>127.0.0.1</c>
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.RegEx.Tools.RegExUtil.Patterns.Ipv6">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A pattern that matches an IPv6 address.
 <para></para>
 
 For Example:
 <para></para>
 <c>FE80:0000:0000:0000:0202:B3FF:FE1E:8329</c>
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.RegEx.Tools.RegExUtil.Patterns.EMail">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A pattern that matches an e-mail address.
 <para></para>
 
 For Example:
 <para></para>
 <c>local@domain.com</c>
 
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.RegEx.Tools.RegExUtil.Patterns.SafeText">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A pattern that matches lower and upper case letters and all digits.
 <para></para>
 
 For Example:
 <para></para>
 
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.RegEx.Tools.RegExUtil.Patterns.CreditCard">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A pattern that matches a valid credit card number, VISA or also a passport.
 <para></para>
 
 For Example:
 <para></para>
 
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.RegEx.Tools.RegExUtil.Patterns.USzip">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A pattern that matches an United States zip code with optional dash-four.
 <para></para>
 
 For Example:
 <para></para>
 
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.RegEx.Tools.RegExUtil.Patterns.USphone">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A pattern that matches an United States phone number with or without dashes.
 <para></para>
 
 For Example:
 <para></para>
 
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.RegEx.Tools.RegExUtil.Patterns.USstate">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A pattern that matches a 2 letter United States state abbreviations.
 <para></para>
 
 For Example:
 <para></para>
 
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.RegEx.Tools.RegExUtil.Patterns.USssn">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A pattern that matches a 9 digit United States social security number with dashes.
 <para></para>
 
 For Example:
 <para></para>
 
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.RegEx.Tools.RegExUtil.Patterns.Hex">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A pattern that matches Hexadecimal values.
 <para></para>
 
 For Example:
 <para></para>
 <c>#a3c113</c>
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.RegEx.Tools.RegExUtil.Patterns.Phone">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A pattern that matches a Phone number.
 <para></para>
 
 Number in the following form: <c>(###) ###-####</c>
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.RegEx.Tools.RegExUtil.Patterns.AlphabeticText">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A pattern that matches alphabetic text.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.RegEx.Tools.RegExUtil.Patterns.AlphanumericText">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A pattern that matches Alphanumeric text.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.RegEx.Tools.RegExUtil.Patterns.NumericText">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A pattern that matches numeric text, integer or decimal.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.RegEx.Tools.RegExUtil.Patterns.YoutubeUrl">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A pattern that matches a Youtube Url.
 <para></para>
 
 For Example:
 <para></para>
 <c>https://www.youtube.com/watch?v=Hzmn4-vtl5M&amp;feature=em-uploademail</c> 
 <para></para>
 <c>http://www.youtube.com/attribution_link?a=Od7TH6HFkco&amp;u=/watch?v%3DHzmn4-vtl5M%26feature%3Dem-uploademail</c>
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.RegEx.Tools.RegExUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.Text.RegEx.Tools.RegExUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.RegEx.Tools.RegExUtil.GetMatchesPositions(System.Text.RegularExpressions.Regex,System.String,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a friendlly collection of all the RegEx matches being at the specified group index, and their matches positions.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Sub Test()
 
     Dim regExpr As New Regex("Dog(s)?", RegexOptions.IgnoreCase)
 
     Dim text As String = "One Dog!, Two Dogs!, three Dogs!"
     RichTextBox1.Text = text
 
     Dim matchesPos As IEnumerable(Of MatchPositionInfo) = GetMatchesPositions(regExpr, text, groupIndex:=0)
 
     For Each matchPos As MatchPositionInfo In matchesPos
 
         Console.WriteLine(text.Substring(matchPos.StartIndex, matchPos.Length))
 
         With RichTextBox1
             .SelectionStart = matchPos.StartIndex
             .SelectionLength = matchPos.Length
             .SelectionBackColor = Color.IndianRed
             .SelectionColor = Color.WhiteSmoke
             .SelectionFont = New Font(RichTextBox1.Font.Name, RichTextBox1.Font.SizeInPoints, FontStyle.Bold)
         End With
 
     Next matchPos
 
     With RichTextBox1
         .SelectionStart = 0
         .SelectionLength = 0
     End With
 
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="regEx">
 The RegEx pattern.
 </param>
 
 <param name="text">
 The text where to test the RegEx.
 </param>
 
 <param name="groupIndex">
 The group index of the successful matches.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the RegEx matches and their positions.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.RegEx.Tools.RegExUtil.GetMatchesPositions(System.Text.RegularExpressions.Regex,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a friendlly collection of all the RegEx matches being at group index Zero, and their matches positions.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Sub Test()
 
     Dim regExpr As New Regex("Dog(s)?", RegexOptions.IgnoreCase)
 
     Dim text As String = "One Dog!, Two Dogs!, three Dogs!"
     RichTextBox1.Text = text
 
     Dim matchesPos As IEnumerable(Of MatchPositionInfo) = GetMatchesPositions(regExpr, text)
 
     For Each matchPos As MatchPositionInfo In matchesPos
 
         Console.WriteLine(text.Substring(matchPos.StartIndex, matchPos.Length))
 
         With RichTextBox1
             .SelectionStart = matchPos.StartIndex
             .SelectionLength = matchPos.Length
             .SelectionBackColor = Color.IndianRed
             .SelectionColor = Color.WhiteSmoke
             .SelectionFont = New Font(RichTextBox1.Font.Name, RichTextBox1.Font.SizeInPoints, FontStyle.Bold)
         End With
 
     Next matchPos
 
     With RichTextBox1
         .SelectionStart = 0
         .SelectionLength = 0
     End With
 
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="regEx">
 The RegEx pattern.
 </param>
 
 <param name="text">
 The text where to test the matches.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the RegEx matches and their positions.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Text.RegEx.Tools.RegExUtil.ReservedRegexOperators">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the reserved RegEx operators.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim reservedChars As String = New String(ReservedRegexOperators)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The reserved RegEx operators.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.RegEx.Tools.RegExUtil.ValidateExpression(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Validates the specified regular expression.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim success As Boolean = ValidateExpression("[0-9]++") ' False
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="expr">
 The regular expression.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if pattern validation success, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.RegEx.Extensions.Char.Escape">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Char"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.RegEx.Extensions.Char.Escape.EscapeRegEx(System.Char)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Escapes any RegEx reserved character in the source <see cref="T:System.Char"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Char"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.RegEx.Extensions.String.Escape">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.RegEx.Extensions.String.Escape.EscapeRegEx(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Escapes any RegEx reserved characters contained in a <see cref="T:System.String"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim unescaped As String = "(Hello.World)?"
 Dim escaped As String = unescaped.EscapeRegEx()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.RegEx.Extensions.String.Escape.UnescapeRegEx(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Unescapes any RegEx reserved characters contained in a <see cref="T:System.String"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim escaped As String = "\(Hello\.World\)\?"
 Dim unescaped As String = escaped.UnescapeRegEx()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.RegEx.Types.MatchPositionInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Encapsulates a text value captured by a RegEx, with its start/end position index.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Sub Test()
 
     Dim regExpr As New Regex("Dog(s)?", RegexOptions.IgnoreCase)
 
     Dim text As String = "One Dog!, Two Dogs!, three Dogs!"
     RichTextBox1.Text = text
 
     Dim matchesPos As IEnumerable(Of MatchPositionInfo) = GetMatchesPositions(regExpr, text, groupIndex:=0)
 
     For Each matchPos As MatchPositionInfo In matchesPos
 
         Console.WriteLine(text.Substring(matchPos.StartIndex, matchPos.Length))
 
         With RichTextBox1
             .SelectionStart = matchPos.StartIndex
             .SelectionLength = matchPos.Length
             .SelectionBackColor = Color.IndianRed
             .SelectionColor = Color.WhiteSmoke
             .SelectionFont = New Font(RichTextBox1.Font.Name, RichTextBox1.Font.SizeInPoints, FontStyle.Bold)
         End With
 
     Next matchPos
 
     With RichTextBox1
         .SelectionStart = 0
         .SelectionLength = 0
     End With
 
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Text.RegEx.Types.MatchPositionInfo.Text">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the text value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The text value.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.RegEx.Types.MatchPositionInfo.textB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The text value.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Text.RegEx.Types.MatchPositionInfo.StartIndex">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the start index.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The start index.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.RegEx.Types.MatchPositionInfo.startIndexB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The start index.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Text.RegEx.Types.MatchPositionInfo.EndIndex">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the end index.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The end index.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.RegEx.Types.MatchPositionInfo.endIndexB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The end index.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Text.RegEx.Types.MatchPositionInfo.Length">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the matched text length.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The matched text length.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.RegEx.Types.MatchPositionInfo.#ctor(System.String,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Text.RegEx.Types.MatchPositionInfo"/> structure.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text value.
 </param>
 
 <param name="startIndex">
 The start index.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.RegEx.Types.MatchPositionInfo.GetType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the ddd<see cref="T:System.Type"/> of the current instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The exact runtime type of the current instance.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.RegEx.Types.MatchPositionInfo.Equals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are considered equal.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the objects are considered equal; otherwise, <see langword="False"/>.
 <para></para>
 If both <paramref name="objA"/> and <paramref name="objB"/> are <see langword="Nothing"/>, 
 the method returns <see langword="True"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.RegEx.Types.MatchPositionInfo.ReferenceEquals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are the same instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if <paramref name="objA"/> is the same instance as <paramref name="objB"/> 
 or if both are <see langword="Nothing"/>; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.RegEx.Types.MatchPositionInfo.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a String that represents the current object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A string that represents the current object.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Enums.StringCase">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a string case.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Enums.StringCase.LowerCase">
 <summary>
 LowerCase
 <para></para>
 
 [Example]
 <para></para>
 Input : ABCDEF
 <para></para>
 Output: abcdef
 </summary>
</member>
<member name="F:Elektro.Core.Text.Enums.StringCase.UpperCase">
 <summary>
 UpperCase.
 <para></para>
 
 [Example]
 <para></para>
 Input : abcdef
 <para></para>
 Output: ABCDEF
 </summary>
</member>
<member name="F:Elektro.Core.Text.Enums.StringCase.TitleCase">
 <summary>
 TitleCase.
 <para></para>
 
 [Example]
 <para></para>
 Input : abcdef
 <para></para>
 Output: Abcdef
 </summary>
</member>
<member name="F:Elektro.Core.Text.Enums.StringCase.WordCase">
 <summary>
 WordCase.
 <para></para>
 
 [Example]
 <para></para>
 Input : abc def
 <para></para>
 Output: Abc Def
 </summary>
</member>
<member name="F:Elektro.Core.Text.Enums.StringCase.CamelCaseLower">
 <summary>
 CamelCase (With first letter to LowerCase).
 <para></para>
 
 [Example]
 <para></para>
 Input : ABC DEF
 <para></para>
 Output: abcDef
 </summary>
</member>
<member name="F:Elektro.Core.Text.Enums.StringCase.CamelCaseUpper">
 <summary>
 CamelCase (With first letter to UpperCase).
 <para></para>
 
 [Example]
 <para></para>
 Input : ABC DEF
 <para></para>
 Output: AbcDef
 </summary>
</member>
<member name="F:Elektro.Core.Text.Enums.StringCase.MixedTitleCaseLower">
 <summary>
 MixedCase (With first letter to LowerCase).
 <para></para>
 
 [Example]
 <para></para>
 Input : ab cd ef
 <para></para>
 Output: aB Cd eF
 </summary>
</member>
<member name="F:Elektro.Core.Text.Enums.StringCase.MixedTitleCaseUpper">
 <summary>
 MixedCase (With first letter to UpperCase).
 <para></para>
 
 [Example]
 <para></para>
 Input : ab cd ef
 <para></para>
 Output: Ab cD Ef
 </summary>
</member>
<member name="F:Elektro.Core.Text.Enums.StringCase.MixedWordCaseLower">
 <summary>
 MixedCase (With first letter of each word to LowerCase).
 <para></para>
 
 [Example]
 <para></para>
 Input : ab cd ef
 <para></para>
 Output: aB cD eF
 </summary>
</member>
<member name="F:Elektro.Core.Text.Enums.StringCase.MixedWordCaseUpper">
 <summary>
 MixedCase (With first letter of each word to UpperCase).
 <para></para>
 
 [Example]
 <para></para>
 Input : ab cd ef
 <para></para>
 Output: Ab Cd Ef
 </summary>
</member>
<member name="F:Elektro.Core.Text.Enums.StringCase.ToggleCase">
 <summary>
 ToggleCase.
 <para></para>
 
 [Example]
 <para></para>
 Input : abc def ghi
 <para></para>
 Output: aBC dEF gHI
 </summary>
</member>
<member name="F:Elektro.Core.Text.Enums.StringCase.DuplicateChars">
 <summary>
 Duplicates the characters.
 <para></para>
 
 [Example]
 <para></para>
 Input : Hello World!
 <para></para>
 Output: HHeelllloo  WWoorrlldd!!
 </summary>
</member>
<member name="F:Elektro.Core.Text.Enums.StringCase.AlternateChars">
 <summary>
 Alternates the characters.
 <para></para>
 
 [Example]
 <para></para>
 Input : Hello World!
 <para></para>
 Output: hELLO wORLD!
 </summary>
</member>
<member name="T:Elektro.Core.Text.Enums.StringDirection">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies the direction to read a String.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Enums.StringDirection.Left">
 <summary>
 Read a string from the left to right.
 </summary>
</member>
<member name="F:Elektro.Core.Text.Enums.StringDirection.Right">
 <summary>
 Read a string from right to left.
 </summary>
</member>
<member name="T:Elektro.Core.Text.Enums.TextDirection">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a text direction to iterate the content of a textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Enums.TextDirection.Top">
 <summary>
 From top to bottom.
 </summary>
</member>
<member name="F:Elektro.Core.Text.Enums.TextDirection.Bottom">
 <summary>
 From bottom to top.
 </summary>
</member>
<member name="T:Elektro.Core.Text.Extensions.Char.Is">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Char"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.Char.Is.IsDiacritic(System.Char)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a character is diacritic or else contains a diacritical mark.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox("á"c.IsDiacritic)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source character.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if character is diacritic or contains a diacritical mark, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.Char.Is.IsHexadecimal(System.Char)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a character is a Hexadecimal character.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox("F"c.IsHexadecimal)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source character.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if character is a Hexadecimal character, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.Char.Repeating">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Char"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.Char.Repeating.Repeat(System.Char,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns the source character repeated the specified amount of times.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "A"c.Repeat(2)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source character.
 </param>
 
 <param name="count">
 The amount of times to repeat.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.SecureString.Append">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Security.SecureString"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.SecureString.Append.AppendChars(System.Security.SecureString,System.Char[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Appends the specified character to the end of the source <see cref="T:System.Security.SecureString"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim secStr As New SecureString
 secStr.AppendChars("qwerty".ToCharArray())
 
 MessageBox.Show(secStr.ToUnsecureString())
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Security.SecureString"/>.
 </param>
 
 <param name="chars">
 The characters to append.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.SecureString.Append.AppendString(System.Security.SecureString,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Appends a string to the end of the source <see cref="T:System.Security.SecureString"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim secStr As New SecureString
 secStr.AppendString("qwerty")
 
 MessageBox.Show(secStr.ToUnsecureString())
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Security.SecureString"/>.
 </param>
 
 <param name="str">
 The string to append.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.SecureString.TypeConversion">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Security.SecureString"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.SecureString.TypeConversion.ToUnsecureString(System.Security.SecureString)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts a <see cref="T:System.Security.SecureString"/> to a common <see cref="T:System.String"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim secStr As New SecureString
 With secStr
     .AppendChar("q"c)
     .AppendChar("q"c)
     .AppendChar("w"c)
     .AppendChar("e"c)
     .AppendChar("r"c)
     .AppendChar("t"c)
     .AppendChar("y"c)
 End With
 
 MessageBox.Show(secStr.ToUnsecureString())
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Security.SecureString"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.String"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.StringBuilder.Append">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="N:Elektro.Core.Text.Extensions.StringBuilder"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.StringBuilder.Append.AppendFormatLine(System.Text.StringBuilder,System.String,System.Object[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Appends the string returned by processing a composite format string, 
 which contains zero or more format items, to this instance.
 <para></para>
 Each format item is replaced by the string representation of a corresponding argument in a parameter array.
 <para></para>
 Finally, appends the default line terminator to the end of the <see cref="T:System.Text.StringBuilder"/> object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim sb As New StringBuilder
 sb.AppendFormatLine("{0} {1} {2} {3}", "arg1", "arg2", "arg3", "etc...")
 
 MessageBox.Show(sb.ToString())
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source character.
 </param>
 
 <param name="format">
 A composite format string.
 </param>
 
 <param name="args">
 An array of objects to format.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A reference to this instance with format appended.
 <para></para>
 Each format item in format is replaced by the string representation of the corresponding object argument.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.StringBuilder.Append.AppendFormatLine(System.Text.StringBuilder,System.IFormatProvider,System.String,System.Object[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Appends the string returned by processing a composite format string, 
 which contains zero or more format items, to this instance.
 <para></para>
 Each format item is replaced by the string representation of a corresponding argument in a parameter array 
 using a specified format provider.
 <para></para>
 Finally, appends the default line terminator to the end of the <see cref="T:System.Text.StringBuilder"/> object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim sb As New StringBuilder
 sb.AppendFormatLine(CultureInfo.CurrentCulture, "{0} {1} {2} {3}", "arg1", "arg2", "arg3", "etc...")
 
 MessageBox.Show(sb.ToString())
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source character.
 </param>
 
 <param name="provider">
 An object that supplies culture-specific formatting information.
 </param>
 
 <param name="format">
 A composite format string.
 </param>
 
 <param name="args">
 An array of objects to format.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A reference to this instance with format appended.
 <para></para>
 Each format item in format is replaced by the string representation of the corresponding object argument.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.StringBuilder.Append.AppendFormatLine(System.Text.StringBuilder,System.String,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Appends the string returned by processing a composite format string, 
 which contains zero or more format items, to this instance.
 <para></para>
 Each format item is replaced by the string representation of a single argument.
 <para></para>
 Finally, appends the default line terminator to the end of the <see cref="T:System.Text.StringBuilder"/> object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim sb As New StringBuilder
 sb.AppendFormatLine("{0}", "arg0")
 
 MessageBox.Show(sb.ToString())
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source character.
 </param>
 
 <param name="format">
 A composite format string.
 </param>
 
 <param name="arg0">
 An object to format.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A reference to this instance with format appended.
 <para></para>
 Each format item in format is replaced by the string representation of <paramref name="arg0"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.StringBuilder.Append.AppendFormatLine(System.Text.StringBuilder,System.String,System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Appends the string returned by processing a composite format string, 
 which contains zero or more format items, to this instance.
 <para></para>
 Each format item is replaced by the string representation of either of two arguments.
 <para></para>
 Finally, appends the default line terminator to the end of the <see cref="T:System.Text.StringBuilder"/> object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim sb As New StringBuilder
 sb.AppendFormatLine("{0} {1}", "arg0", "arg1")
 
 MessageBox.Show(sb.ToString())
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source character.
 </param>
 
 <param name="format">
 A composite format string.
 </param>
 
 <param name="arg0">
 The first  object to format.
 </param>
 
 <param name="arg1">
 The second object to format.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A reference to this instance with format appended.
 <para></para>
 Each format item in format is replaced by the string representation of the corresponding object argument.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.StringBuilder.Append.AppendFormatLine(System.Text.StringBuilder,System.String,System.Object,System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Appends the string returned by processing a composite format string, 
 which contains zero or more format items, to this instance.
 <para></para>
 Each format item is replaced by the string representation of either of three arguments.
 <para></para>
 Finally, appends the default line terminator to the end of the <see cref="T:System.Text.StringBuilder"/> object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim sb As New StringBuilder
 sb.AppendFormatLine("{0} {1} {2}", "arg0", "arg1", "arg2")
 
 MessageBox.Show(sb.ToString())
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source character.
 </param>
 
 <param name="format">
 A composite format string.
 </param>
 
 <param name="arg0">
 The first  object to format.
 </param>
 
 <param name="arg1">
 The second object to format.
 </param>
 
 <param name="arg2">
 The third object to format.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A reference to this instance with format appended.
 <para></para>
 Each format item in format is replaced by the string representation of the corresponding object argument.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.Contains">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Contains.Contains(System.String,System.String,System.StringComparison)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a value indicating whether the specified string occurs within this string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = "Hello World".Contains("WORLD", StringComparison.OrdinalIgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="value">
 The <see cref="T:System.String"/> to find.
 </param>
 
 <param name="comparisonType">
 One of the enumeration values that determines how this string and value are compared.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified string occurs within this string; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Contains.ContainsAll(System.String,System.Collections.Generic.IEnumerable{System.String})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source string contains all the specified strings.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = "Hello World!".ContainsAll({"Hello", "World"})
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="values">
 A collection of strings to find.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 values
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the source string contains all the specified strings; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Contains.ContainsAll(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source string contains all the specified strings.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = "Hello World!".ContainsAll({"hello", "world"}, StringComparison.OrdinalIgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="values">
 A collection of strings to find.
 </param>
 
 <param name="comparisonType">
 One of the enumeration values that determines how this string and value are compared.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 values
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the source string contains all the specified strings; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Contains.ContainsAny(System.String,System.Collections.Generic.IEnumerable{System.String})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source string contains any of the specified strings.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = "Hello World!".ContainsAny({"Hello", "World"})
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="values">
 A collection of strings to find.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 values
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the source string contains any of the specified strings; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Contains.ContainsAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source string contains any of the specified strings.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = "Hello World!".ContainsAny({"hello", "world"}, StringComparison.OrdinalIgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="values">
 A collection of strings to find.
 </param>
 
 <param name="comparisonType">
 One of the enumeration values that determines how this string and value are compared.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 values
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the source string contains any of the specified strings; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.Delimiting">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Delimiting.Delimit(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Delimits once a string by the given delimiter.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MessageBox.Show("You are welcome to my party tomorrow!".Delimit("to"))
 MessageBox.Show("You are welcome to my party tomorrow!".Delimit("to", RegexOptions.RightToLeft))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="delimiter">
 The delimiter string.
 </param>
 
 <param name="options">
 The <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The delimited string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Delimiting.Delimit(System.String,System.String,System.Int32,System.Text.RegularExpressions.RegexOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Delimits once a string by the given delimiter.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MessageBox.Show("You are welcome to my party tomorrow!".Delimit("to"))
 MessageBox.Show("You are welcome to my party tomorrow!".Delimit("a", 1, RegexOptions.RightToLeft))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="delimiter">
 The delimiter string.
 </param>
 
 <param name="count">
 The delimiter occurrence count.
 </param>
 
 <param name="options">
 The <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The delimited string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Delimiting.Delimit(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Delimits once a string by the given two delimiters.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MessageBox.Show("You are welcome to my party tomorrow!".Delimit("to", "party"))
 MessageBox.Show("You are welcome to my party tomorrow!".Delimit("tomorrow", "welcome", RegexOptions.RightToLeft))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="delimiterA">
 The first delimiter string.
 </param>
 
 <param name="delimiterB">
 The last delimiter string.
 </param>
 
 <param name="options">
 The <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The delimited string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Delimiting.Delimit(System.String,System.String,System.String,System.Int32,System.Text.RegularExpressions.RegexOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Delimits once a string by the given two delimiters.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MessageBox.Show("You are welcome to my party tomorrow!".Delimit("o", "tomorrow", 1))
 MessageBox.Show("You are welcome to my party tomorrow!".Delimit("o", "Y", 1, RegexOptions.RightToLeft))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="delimiterA">
 The first delimiter string.
 </param>
 
 <param name="delimiterB">
 The last delimiter string.
 </param>
 
 <param name="count">
 The <paramref name="delimiterA"/> occurrence count.
 </param>
 
 <param name="options">
 The <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The delimited string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Delimiting.InternalDelimit(System.String,System.String,System.String,System.Int32,System.Text.RegularExpressions.RegexOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Delimits once a string by the given two delimiters.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MessageBox.Show("You are welcome to my party tomorrow!".Delimit("o", "tomorrow", 1))
 MessageBox.Show("You are welcome to my party tomorrow!".Delimit("o", "Y", 1, RegexOptions.RightToLeft))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="delimiterA">
 The first delimiter string.
 </param>
 
 <param name="delimiterB">
 The last delimiter string.
 </param>
 
 <param name="count">
 The <paramref name="delimiterA"/> occurrence count.
 </param>
 
 <param name="options">
 The <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The delimited string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.Diacritics">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Diacritics.HasDiacritics(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a string contains diacritic characters.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox("Pingüino".HasDiacritics)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source string.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if strin contains diacritic characters; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Diacritics.NormalizeDiacritics(System.String,System.Text.NormalizationForm)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts the diacritic characters in a String to an equivalent normalized character of English alphabet.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MessageBox.Show("áéíóú àèìòù äëïöü ñÑ çÇ".ConvertDiacritics(normalization:=NormalizationForm.FormKD))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source string.
 </param>
 
 <param name="normalization">
 The type of Unicode character normalization to perform.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The formated string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.EndsWith">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.EndsWith.EndsWithAny(System.String,System.Collections.Generic.IEnumerable{System.String})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the end of the specified string matches any of the specified strings.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim isMatch As Boolean = "Hello World!".EndsWithAny({"Hello", "World"})
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="values">
 A collection of strings to match.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 values
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the end of the specified string matches any of the specified strings; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.EndsWith.EndsWithAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the end of the specified string matches any of the specified strings.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim isMatch As Boolean = "Hello World!".EndsWithAny({"hello", "world"}, StringComparison.OrdinalIgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="values">
 A collection of strings to match.
 </param>
 
 <param name="comparisonType">
 One of the enumeration values that determines how this string and value are compared.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 values
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the end of the specified string matches any of the specified strings; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.EndsWith.EnsureEndsWith(System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the end of the source string matches the specified string.
 <para></para>
 If does not, it appends the specified string at the end of the source string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "Hello ".EnsureEndsWith("world.")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="value">
 The string to match.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 value
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the end of the source string matches the specified string; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.EndsWith.EnsureEndsWith(System.String,System.String,System.StringComparison)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the end of the source string matches the specified string.
 <para></para>
 If does not, it appends the specified string at the end of the source string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "Hello ".EnsureEndsWith("world.", StringComparison.OrdinalIgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="value">
 The string to match.
 </param>
 
 <param name="comparisonType">
 One of the enumeration values that determines how this string and value are compared.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 value
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the end of the source string matches the specified string; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.Equals">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Equals.EqualsAny(System.String,System.Collections.Generic.IEnumerable{System.String})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified string equals to any of the specified strings.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim isEquals As Boolean = "Hello World!".EqualsAny({"Hello World!", "Hello!"}, StringComparison.OrdinalIgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="values">
 A collection of strings to match.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 values
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified string equal to any of the specified strings; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Equals.EqualsAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified string equal to any of the specified strings.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim isEquals As Boolean = "Hello World!".EqualsAny({"Hello World!", "Hello!"}, StringComparison.OrdinalIgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="values">
 A collection of strings to match.
 </param>
 
 <param name="comparisonType">
 One of the enumeration values that determines how this string and value are compared.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 values
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified string equal to any of the specified strings; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Equals.EnsureEquals(System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source string equals to the specified string.
 <para></para>
 If does not, it replaces the source string for the specified string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "Hello".EnsureEquals("H3ll0")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="value">
 The string to match.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 value
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the source string equals to the specified string; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Equals.EnsureEquals(System.String,System.String,System.StringComparison)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source string equals to the specified string.
 <para></para>
 If does not, it replaces the source string for the specified string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "Hello".EnsureEquals("H3ll0", StringComparison.OrdinalIgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="value">
 The string to match.
 </param>
 
 <param name="comparisonType">
 One of the enumeration values that determines how this string and value are compared.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 value
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the source string equals to the specified string; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.Escape">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Escape.UnescapeUnicode(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts any unicode escape sequence in the specified string to its corresponding unicode characters.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "\u0048\u0065\u006C\u006C\u006F".UnescapeUnicode()
 
 MessageBox.Show(str)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source string.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.Expand">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Expand.ExpandBlankSpace(System.String,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Expands the white-spaces and tabulations of a string by adding more whitespaces.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MessageBox.Show("Hello World".ExpandBlankSpace(10))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source string.
 </param>
 
 <param name="count">
 The amount of times to repeat the white-space character.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The expanded string.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 Value bigger than 0 is required.;count
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Expand.ExpandBlankSpace(System.String,System.Char,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Expands the white-spaces and tabulations of a string by adding the specified separator char.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MessageBox.Show("Hello World".ExpandBlankSpace(" "c, 10))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source string.
 </param>
 
 <param name="separator">
 The character used to expand the white-spaces and tabulations.
 </param>
 
 <param name="count">
 The amount of times to repeat the separator character.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The expanded string.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 Value bigger than 0 is required.;count
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Expand.ExpandChars(System.String,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Expands the characters of a String by adding more white-spaces.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MessageBox.Show("Hello World".ExpandChars(2))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source string.
 </param>
 
 <param name="count">
 The amount of times to repeat the white-space character.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The expanded string.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 Value bigger than 0 is required.;count
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Expand.ExpandChars(System.String,System.Char,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Expands the characters of a String by adding the specified separator char.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MessageBox.Show("Hello World".ExpandChars(" "c, 2))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source string.
 </param>
 
 <param name="separator">
 The character used to expand the characters.
 </param>
 
 <param name="count">
 The amount of times to repeat the separator character.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The expanded string.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 Value bigger than 0 is required.;count
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Expand.ExpandVariables(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Replaces the name of each environment variable embedded in the specified string with 
 the string equivalent of the value of the variable.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MessageBox.Show("%HomeDrive%\Users\%UserName%\%Fake-Var%\".ExpandVariables)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source string.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The expanded string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.GroupingInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.GroupingInfo.GetGroupingInfo(System.String,System.Collections.Generic.List{Elektro.Core.Text.Types.GroupingCharsInfo})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets info about the grooupings of a String.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Private Sub Test()
 
     Dim source As String() =
         {
             "This is (good)",
             "This (is ({good}))",
             "This is good",
             "This is (bad))",
             "This is (bad",
             "This is bad)",
             "This is bad)("
         }
 
     Dim groupingCharList As New List(Of GroupingCharsInfo) From
         {
             New GroupingCharsInfo(apertureChar:="("c, closureChar:=")"c),
             New GroupingCharsInfo(apertureChar:="{"c, closureChar:="}"c),
             New GroupingCharsInfo(apertureChar:="["c, closureChar:="]"c)
         }
 
     For Each str As String In source
 
         Dim info As GroupingInfo = str.GetGroupingInfo(groupingCharList)
 
         Dim sb As New System.Text.StringBuilder
         With sb
 
             .AppendLine(String.Format("Input String: {0}", info.Source))
             .AppendLine()
 
             .Append("Grouping Characters: ")
             For Each charInfo As GroupingCharsInfo In groupingCharList
                 .Append(String.Format("{0}{1} ", charInfo.Aperture, charInfo.Closure))
             Next charInfo
             .AppendLine()
 
             .AppendLine(String.Format("String has closed agrupations?: {0}", info.HasClosedGroups))
             .AppendLine(String.Format("String has opened agrupations?: {0}", info.HasOpenGroups))
             .AppendLine()
 
             .AppendLine(String.Format("Closed Agrupations Count: {0}", info.GroupsClosedCount))
             .AppendLine(String.Format("Opened Agrupations Count: {0}", info.GroupsOpenCount))
             .AppendLine()
 
             .AppendLine("Closed Agrupations Indexes:")
             For Each item As KeyValuePair(Of Integer, Integer) In info.GroupsClosedPositions
                 .AppendLine(String.Format("Start: {0}, End: {1}", CStr(item.Key), CStr(item.Value)))
             Next item
             .AppendLine()
 
             .AppendLine(String.Format("Opened Agrupations Indexes: {0}",
                                       String.Join(", ", info.GroupsOpenPositions)))
 
         End With
 
         MessageBox.Show(sb.ToString, "Agrupations Information",
                         MessageBoxButtons.OK, MessageBoxIcon.Information)
 
     Next str
 
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source String.
 </param>
 
 <param name="groupingChars">
 The grouping chars.
 
 If this value is <see langword="Nothing"/>, the default grouping characters are used instead. 
 
 The default grouping characters are: "()", "{}" and "[]".
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:Elektro.Core.Text.Extensions.String.GroupingInfo"/> object that contains the grouping info.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 groupingChars
 </exception>
 
 <exception cref="T:System.ArgumentException">
 An aperture character cannot be the same as a closure character.;groupingChars
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.FindIndexOf">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.FindIndexOf.IndexOfRegEx(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reports the zero-based index of the first occurrence of the specified string in this instance, 
 using a regular expression.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim indexOf As Integer = 
     "Hello World!".IndexOfRegEx("\sWorld", regexOptions:=RegexOptions.IgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="findExpression">
 The <see cref="N:Elektro.Core.Text.RegEx"/> find expression.
 </param>
 
 <param name="regexOptions">
 The <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 findExpression
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index position of value if that string is found, or -1 if it is not. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.FindIndexOf.IndexOfRegEx(System.String,System.String,System.Int32,System.Text.RegularExpressions.RegexOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reports the zero-based index of the first occurrence of the specified string in this instance, 
 using a regular expression.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim indexOf As Integer = 
     "Hello World!".IndexOfRegEx("\sWorld", startIndex:=0, regexOptions:=RegexOptions.IgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="findExpression">
 The <see cref="N:Elektro.Core.Text.RegEx"/> find expression.
 </param>
 
 <param name="startIndex">
 The search starting position.
 </param>
 
 <param name="regexOptions">
 The <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 findExpression
 </exception>
 
 <exception cref="T:System.ArgumentOutOfRangeException">
 startIndex
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index position of value if that string is found, or -1 if it is not. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.FindIndexOf.IndexOfRegEx(System.String,System.String,System.Int32,System.Int32,System.Text.RegularExpressions.RegexOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reports the zero-based index of the first occurrence of the specified string in this instance, 
 using a regular expression.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim indexOf As Integer = 
     "Hello World!".IndexOfRegEx("^H$", startIndex:=0, count:=1, regexOptions:=RegexOptions.IgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="findExpression">
 The <see cref="N:Elektro.Core.Text.RegEx"/> find expression.
 </param>
 
 <param name="startIndex">
 The search starting position.
 </param>
 
 <param name="count">
 The number of character positions to examine.
 </param>
 
 <param name="regexOptions">
 The <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 findExpression
 </exception>
 
 <exception cref="T:System.ArgumentOutOfRangeException">
 startIndex or count
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index position of value if that string is found, or -1 if it is not. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.FindIndexOf.IndexOfAnyRegEx(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.RegularExpressions.RegexOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reports the zero-based index of the first occurrence in this instance of 
 any <see cref="N:Elektro.Core.Text.RegEx"/> expression in a specified array. 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim Dim indexOfAny As Integer = 
     "Hello World!".IndexOfAnyRegEx({"\s", "[\!]"}, regexOptions:=RegexOptions.IgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="findExpressions">
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing one or more <see cref="N:Elektro.Core.Text.RegEx"/> expression to find.
 </param>
 
 <param name="regexOptions">
 The <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 findExpressions
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index position of the first occurrence in 
 this instance where any regular expression in <paramref name="findExpressions"/> was found; 
 or -1 if no expression in <paramref name="findExpressions"/> was found.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.FindIndexOf.IndexOfAnyRegEx(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Text.RegularExpressions.RegexOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reports the zero-based index of the first occurrence in this instance of 
 any <see cref="N:Elektro.Core.Text.RegEx"/> expression in a specified array. 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim Dim indexOfAny As Integer = 
     "Hello World!".IndexOfAnyRegEx({"\s", "[\!]"}, startIndex:=0, regexOptions:=RegexOptions.IgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="findExpressions">
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing one or more <see cref="N:Elektro.Core.Text.RegEx"/> expression to find.
 </param>
 
 <param name="startIndex">
 The search starting position.
 </param>
 
 <param name="regexOptions">
 The <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 findExpressions
 </exception>
 
 <exception cref="T:System.ArgumentOutOfRangeException">
 startIndex
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index position of the first occurrence in 
 this instance where any regular expression in <paramref name="findExpressions"/> was found; 
 or -1 if no expression in <paramref name="findExpressions"/> was found.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.FindIndexOf.IndexOfAnyRegEx(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.Text.RegularExpressions.RegexOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reports the zero-based index of the first occurrence in this instance of 
 any <see cref="N:Elektro.Core.Text.RegEx"/> expression in a specified array. 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim Dim indexOfAny As Integer = 
     "Hello World!".IndexOfAnyRegEx({"\s", "[\!]"}, startIndex:=0, count:=6, regexOptions:=RegexOptions.IgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="findExpressions">
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing one or more <see cref="N:Elektro.Core.Text.RegEx"/> expression to find.
 </param>
 
 <param name="startIndex">
 The search starting position.
 </param>
 
 <param name="count">
 The number of character positions to examine.
 </param>
 
 <param name="regexOptions">
 The <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 findExpressions
 </exception>
 
 <exception cref="T:System.ArgumentOutOfRangeException">
 startIndex or count
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index position of the first occurrence in 
 this instance where any regular expression in <paramref name="findExpressions"/> was found; 
 or -1 if no expression in <paramref name="findExpressions"/> was found.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.FindIndexOf.LastIndexOfRegEx(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reports the zero-based index position of the last occurrence of a specified string within this instance,
 using a regular expression.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim lastIndexOf As Integer = 
     "Hello World!".LastIndexOfRegEx("\s", regexOptions:=RegexOptions.IgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="findExpression">
 The <see cref="N:Elektro.Core.Text.RegEx"/> find expression.
 </param>
 
 <param name="regexOptions">
 The <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 findExpression
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index position of value if that string is found, or -1 if it is not found.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.FindIndexOf.LastIndexOfRegEx(System.String,System.String,System.Int32,System.Text.RegularExpressions.RegexOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reports the zero-based index position of the last occurrence of a specified string within this instance,
 using a regular expression.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim lastIndexOf As Integer = 
     "Hello World!".LastIndexOfRegEx("\s", startIndex:=0, regexOptions:=RegexOptions.IgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="findExpression">
 The <see cref="N:Elektro.Core.Text.RegEx"/> find expression.
 </param>
 
 <param name="startIndex">
 The search starting position.
 </param>
 
 <param name="regexOptions">
 The <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 findExpression
 </exception>
 
 <exception cref="T:System.ArgumentOutOfRangeException">
 startIndex
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index position of value if that string is found, or -1 if it is not found.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.FindIndexOf.LastIndexOfRegEx(System.String,System.String,System.Int32,System.Int32,System.Text.RegularExpressions.RegexOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reports the zero-based index position of the last occurrence of a specified string within this instance,
 using a regular expression.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim lastIndexOf As Integer = 
     "Hello World!".LastIndexOfRegEx("\s", startIndex:=0, count:=6, regexOptions:=RegexOptions.IgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="findExpression">
 The <see cref="N:Elektro.Core.Text.RegEx"/> find expression.
 </param>
 
 <param name="startIndex">
 The search starting position.
 </param>
 
 <param name="count">
 The number of character positions to examine.
 </param>
 
 <param name="regexOptions">
 The <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 findExpression
 </exception>
 
 <exception cref="T:System.ArgumentOutOfRangeException">
 startIndex or count
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index position of value if that string is found, or -1 if it is not found.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.FindIndexOf.LastIndexOfAnyRegEx(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.RegularExpressions.RegexOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reports the zero-based index of the last occurrence in this instance of 
 any <see cref="N:Elektro.Core.Text.RegEx"/> expression in a specified array. 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim Dim lastIndexOfAny As Integer = 
     "Hello World!".LastIndexOfAnyRegEx({"\s", "o"c}, regexOptions:=RegexOptions.IgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="findExpressions">
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing one or more <see cref="N:Elektro.Core.Text.RegEx"/> expression to find.
 </param>
 
 <param name="regexOptions">
 The <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 findExpressions
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index position of the last occurrence in 
 this instance where any regular expression in <paramref name="findExpressions"/> was found; 
 or -1 if no expression in <paramref name="findExpressions"/> was found.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.FindIndexOf.LastIndexOfAnyRegEx(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Text.RegularExpressions.RegexOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reports the zero-based index of the last occurrence in this instance of 
 any <see cref="N:Elektro.Core.Text.RegEx"/> expression in a specified array. 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim Dim lastIndexOfAny As Integer = 
     "Hello World!".LastIndexOfAnyRegEx({"\s", "o"c}, startIndex:=0, regexOptions:=RegexOptions.IgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="findExpressions">
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing one or more <see cref="N:Elektro.Core.Text.RegEx"/> expression to find.
 </param>
 
 <param name="startIndex">
 The search starting position.
 </param>
 
 <param name="regexOptions">
 The <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 findExpressions
 </exception>
 
 <exception cref="T:System.ArgumentOutOfRangeException">
 startIndex
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index position of the last occurrence in 
 this instance where any regular expression in <paramref name="findExpressions"/> was found; 
 or -1 if no expression in <paramref name="findExpressions"/> was found.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.FindIndexOf.LastIndexOfAnyRegEx(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.Text.RegularExpressions.RegexOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reports the zero-based index of the last occurrence in this instance of 
 any <see cref="N:Elektro.Core.Text.RegEx"/> expression in a specified array. 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim Dim lastIndexOfAny As Integer = 
     "Hello World!".LastIndexOfAnyRegEx({"\s", "o"c}, startIndex:=0, count:=6, regexOptions:=RegexOptions.IgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="findExpressions">
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing one or more <see cref="N:Elektro.Core.Text.RegEx"/> expression to find.
 </param>
 
 <param name="startIndex">
 The search starting position.
 </param>
 
 <param name="count">
 The number of character positions to examine.
 </param>
 
 <param name="regexOptions">
 The <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 findExpressions
 </exception>
 
 <exception cref="T:System.ArgumentOutOfRangeException">
 startIndex or count
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index position of the last occurrence in 
 this instance where any regular expression in <paramref name="findExpressions"/> was found; 
 or -1 if no expression in <paramref name="findExpressions"/> was found.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.FindIndexOf.InternalIndexOfRegEx(System.String,System.String,System.Int32,System.Int32,System.Text.RegularExpressions.RegexOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reports the zero-based index of the first occurrence of the specified string in this instance, 
 using a regular expression.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim indexOf As Integer = 
     "Hello World!".IndexOfRegEx("^H$", startIndex:=0, count:=1, regexOptions:=RegexOptions.IgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="findExpression">
 The <see cref="N:Elektro.Core.Text.RegEx"/> find expression.
 </param>
 
 <param name="startIndex">
 The search starting position.
 </param>
 
 <param name="count">
 The number of character positions to examine.
 </param>
 
 <param name="regexOptions">
 The <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index position of value if that string is found, or -1 if it is not. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.FindIndexOf.InternalIndexOfAnyRegEx(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.Text.RegularExpressions.RegexOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reports the zero-based index of the first occurrence in this instance of 
 any <see cref="N:Elektro.Core.Text.RegEx"/> expression in a specified array. 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim Dim indexOfAny As Integer = 
     "Hello World!".IndexOfAnyRegEx({"\s", "[\!]"}, startIndex:=0, count:=6, regexOptions:=RegexOptions.IgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="findExpressions">
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing one or more <see cref="N:Elektro.Core.Text.RegEx"/> expression to find.
 </param>
 
 <param name="startIndex">
 The search starting position.
 </param>
 
 <param name="count">
 The number of character positions to examine.
 </param>
 
 <param name="regexOptions">
 The <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index position of the first occurrence in 
 this instance where any regular expression in <paramref name="findExpressions"/> was found; 
 or -1 if no expression in <paramref name="findExpressions"/> was found.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.FindIndexOf.InternalLastIndexOfRegEx(System.String,System.String,System.Int32,System.Int32,System.Text.RegularExpressions.RegexOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reports the zero-based index position of the last occurrence of a specified string within this instance,
 using a regular expression.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim lastIndexOf As Integer = 
     "Hello World!".LastIndexOfRegEx("\s", startIndex:=0, count:=6, regexOptions:=RegexOptions.IgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="findExpression">
 The <see cref="N:Elektro.Core.Text.RegEx"/> find expression.
 </param>
 
 <param name="startIndex">
 The search starting position.
 </param>
 
 <param name="count">
 The number of character positions to examine.
 </param>
 
 <param name="regexOptions">
 The <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index position of value if that string is found, or -1 if it is not found.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.FindIndexOf.InternalLastIndexOfAnyRegEx(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.Text.RegularExpressions.RegexOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reports the zero-based index of the last occurrence in this instance of 
 any <see cref="N:Elektro.Core.Text.RegEx"/> expression in a specified array. 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim Dim lastIndexOfAny As Integer = 
     "Hello World!".LastIndexOfAnyRegEx({"\s", "o"c}, startIndex:=0, count:=6, regexOptions:=RegexOptions.IgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="findExpressions">
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing one or more <see cref="N:Elektro.Core.Text.RegEx"/> expression to find.
 </param>
 
 <param name="startIndex">
 The search starting position.
 </param>
 
 <param name="count">
 The number of character positions to examine.
 </param>
 
 <param name="regexOptions">
 The <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The zero-based index position of the last occurrence in 
 this instance where any regular expression in <paramref name="findExpressions"/> was found; 
 or -1 if no expression in <paramref name="findExpressions"/> was found.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.Is">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Is.IsAlphabetic(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a string is alphabetic.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = "qwerty".IsAlphabetic()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source string.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if string is alphabetic, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Is.IsAlphanumeric(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a string is alphanumeric (it should contain at least 1 letter and 1 number).
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = "qwerty123".IsAlphanumeric()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source string.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if string is alphanumeric, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Is.IsNumeric(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a string is numeric.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = "123456789".IsNumeric()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source string.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if string is numeric, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Is.IsNumericOf``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a string is numeric of specified <see cref="T:System.Type"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = "123456789".IsNumericOf(Of Short)()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The numeric <see cref="T:System.Type"/>
 </typeparam>
 
 <param name="sender">
 The source string.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if string is numeric of the specified <see cref="T:System.Type"/>, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 The specified DataType is not numeric;T
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Is.IsValueOf``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a string is a valid value of the specified <see cref="T:System.Type"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox("White".IsValueOf(Of Color))
 MsgBox("A".IsValueOf(Of Keys))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The <see cref="T:System.Type"/>
 </typeparam>
 
 <param name="sender">
 The source string.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if string is a valid value of specified <see cref="T:System.Type"/>; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Is.IsPalindrome(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified string is palindrome.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward or forward.
 <para></para>
 Allowances may be made for adjustments to capital letters, punctuation, and word dividers.
 <para></para>
 For more info, see Wikipedia: <see href="https://en.wikipedia.org/wiki/Palindrome"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim isPalindrome As Boolean = StringIsPalindrome("A man, a plan, a canal, Panama!")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified string is palindrome; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Is.IsHexadecimal(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a string is a Hexadecimal string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox("0xFFFFF".IsHexadecimal())
 MsgBox("FFFFF".IsHexadecimal())
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source character.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the string is a Hexadecimal string, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Is.IsCaseOf(System.String,Elektro.Core.Text.Enums.StringCase)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines wheter a String is written in the specified string case.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MessageBox.Show("HELLO WORLD".IsCaseOf(StringCase.UpperCase))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source string.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if String is written in the specified string case, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 sender
 </exception>
 
 <exception cref="T:System.NotImplementedException">
 This function does not support the specified string case.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Is.IsLikeAny(System.String,System.String[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source string matches any of the specified patterns.
 <para></para>
 The specified pattern can contain exactly the characters to match, or it can contain meta characters, 
 using the wildcard characters.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = "Hello World".IsLikeAny({"hello world", "Hello World"})
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="patterns">
 A collection of the string patterns to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the source string matches any of the specified patterns;
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.Measurement">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Measurement.Measure(System.String,System.Drawing.Font)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Provides the <see cref="T:Elektro.Core.Text.Extensions.String.Size"/>, in pixels, of the specified text when drawn with the specified font.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim pxSize As Size = "Hello World!".Measure(New Font("Lucida Console", 12))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The <see cref="T:Elektro.Core.Text.Extensions.String.Size"/>, in pixels, of the specified text when drawn with the specified font.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.Occurrences">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Occurrences.OccurrencesOf(System.String,System.Char)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Counts the occurences of the specified character in an String.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox("Hello world!".OccurrencesOf("o"c))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="character">
 The character to find.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The amount of occurences of the specified character.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Occurrences.OccurrencesOf(System.String,System.Char,System.StringComparison)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Counts the occurences of the specified character in an String.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox("Hello world!".OccurrencesOf("o"c, StringComparison.Ordinal))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="character">
 The character to find.
 </param>
 
 <param name="stringComparison">
 The string-case rules to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The amount of occurences of the specified character.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Occurrences.OccurrencesOf(System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Counts the occurences of the specified string in the source <see cref="T:System.String"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox("Hello world!".OccurrencesOf("ll"))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="value">
 The String to find.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The amount of occurences of the specified String.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Occurrences.OccurrencesOf(System.String,System.String,System.StringComparison)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Counts the occurences of the specified string in the source <see cref="T:System.String"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox("Hello world!".OccurrencesOf("ll", StringComparison.Ordinal))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="value">
 The string to find.
 </param>
 
 <param name="stringComparison">
 The string-case rules to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The amount of occurences of the specified string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.Padding">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Padding.PadBoth(System.String,System.Int32,System.Char)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a new string that center-aligns the characters in the source string by 
 padding them on the left and the right with a specified Unicode character, 
 for a specified total length.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "1234".PadBoth(8, "x"c)
 
 MessageBox.Show(str)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="width">
 The number of characters in the resulting string, 
 equal to the number of original characters plus any additional padding characters.
 </param>
 
 <param name="paddingChar">
 A Unicode padding character.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.String"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.Pluralizing">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Pluralizing.Pluralize(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns the plural form of the specified singular word, in English language.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "I have tomato".Pluralize()
 
 MessageBox.Show(str)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="singular">
 The singular word, in English language.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting word.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Pluralizing.Pluralize(System.String,System.Globalization.CultureInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns the plural form of the specified singular word, in the specified language.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "I have tomato".Pluralize(CultureInfo.GetCultureInfo("en-US"))
 
 MessageBox.Show(str)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="singular">
 The singular word.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting word.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.Quotes">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Quotes.WithQuotes(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a copy of the source string enclosed in quotes at the beginning and the end of the string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "C:\Path With Spaces".WithQuotes()
 
 MessageBox.Show(str)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A copy of the source string enclosed in quotes at the beginning and the end of the string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Quotes.WithDoubleQuotes(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a copy of the source string enclosed in double-quotes at the beginning and the end of the string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "C:\Path With Spaces".WithDoubleQuotes()
 
 MessageBox.Show(str)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A copy of the source string enclosed in double-quotes at the beginning and the end of the string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.Randomizing">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Extensions.String.Randomizing.rand">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A <see cref="T:System.Random"/> instance to generate random secuences of numbers.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Randomizing.Randomize(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Randomizes a String.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim unrandomized As String = "Hello World"
 Dim randomized As String = unrandomized.Randomize()
 
 MessageBox.Show(randomized)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source String.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The randomized String.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Randomizing.Randomize(System.String,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Randomizes a String.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim unrandomized As String = "Hello World"
 Dim randomized As String = unrandomized.Randomize(3)
 
 MessageBox.Show(randomized)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source String.
 </param>
 
 <param name="length">
 The length of the randomized String.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The randomized String.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 Value bigger than 0 is required.;length
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.Removing">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Removing.RemoveEnd(System.String,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a new string in which a specified number of characters in the current <see cref="T:System.String"/>
 ending at a specified position have been deleted.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "Hello World".RemoveEnd(2)
 
 MessageBox.Show(str)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="source">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="length">
 The number of characters to delete.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.String"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Removing.RemoveEnd(System.String,System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a new string in which a specified number of characters in the current <see cref="T:System.String"/>
 ending at a specified position have been deleted.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "Hello World".RemoveEnd(2, 2)
 
 MessageBox.Show(str)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="source">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="startIndex">
 The zero-based position to begin deleting characters.
 </param>
 
 <param name="length">
 The number of characters to delete.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.String"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.Renaming">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Renaming.Rename(System.String,Elektro.Core.Text.Enums.StringCase)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Renames a string to the specified StringCase.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "Hello World".Rename(StringCase.UpperCase)
 
 MessageBox.Show(str)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="stringCase">
 The <see cref="T:Elektro.Core.Text.Enums.StringCase"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The renamed string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.Repeating">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Repeating.Repeat(System.String,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns the source string repeated the specified amount of times.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "Hello World!".Repeat(2)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="count">
 The amount of times to repeat.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 value
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.Replacing">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Replacing.ReplaceRegEx(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a new string in which all occurrences of the specified string in the current instance 
 are replaced with another specified using a regular expression.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "Hello World!".ReplaceRegEx("world", "kitty", RegexOptions.IgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="findWhat">
 The <see cref="N:Elektro.Core.Text.RegEx"/> find expression.
 </param>
 
 <param name="regexOptions">
 The <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 findWhat
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Replacing.Replace(System.String,System.String,System.String,System.StringComparison)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a new string in which all occurrences of the specified strings in the current instance 
 are replaced with another specified using the specified string comparison type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "Hello World!".Replace("world", "kitty", StringComparison.OrdinalIgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="findWhat">
 The string to match.
 </param>
 
 <param name="comparisonType">
 One of the enumeration values that specifies how the strings will be compared.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 findWhat
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Replacing.ReplaceAll(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a new string in which all occurrences of the specified strings in the current instance 
 are replaced with another specified string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "Hello World!".Replace({"o", " ", "!"}, "_", StringComparison.OrdinalIgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="findWhat">
 A collection of strings to match.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 findWhat
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Replacing.ReplaceAll(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.StringComparison)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a new string in which all occurrences of the specified strings in the current instance 
 are replaced with another specified string using the specified string comparison type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "Hello World!".Replace({"o", " ", "!"}, "_", StringComparison.OrdinalIgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="findWhat">
 A collection of strings to match.
 </param>
 
 <param name="comparisonType">
 One of the enumeration values that specifies how the strings will be compared.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 findWhat
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Replacing.ReplaceAllRegex(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Text.RegularExpressions.RegexOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a new string in which all occurrences of the specified strings in the current instance 
 are replaced with another specified string using a regular expression.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "Hello World!".ReplaceAllRegex({"\s", "\!"}, "_", RegexOptions.IgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="findWhat">
 A collection of <see cref="N:Elektro.Core.Text.RegEx"/> expressions to match.
 </param>
 
 <param name="regexOptions">
 The <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 findWhat
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Replacing.InternalReplace(System.String,System.String,System.String,System.StringComparison,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Replaces text using the specified string comparison type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 Original source: 
 <see href="http://www.codeproject.com/Articles/10890/Fastest-C-Case-Insenstive-String-Replace?msg=1835929#xx1835929xx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "Hello World!".Replace("world", "kitty", StringComparison.OrdinalIgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="findWhat">
 The <see cref="N:Elektro.Core.Text.RegEx"/> find expression.
 </param>
 
 <param name="comparisonType">
 The string comparison type.
 </param>
 
 <param name="stringBuilderCapacity">
 The initial buffer size of the <see cref="N:Elektro.Core.Text.Extensions.StringBuilder"/>.
 This parameter is reserved for testing purposes.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The replaced string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.Reversing">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Reversing.Reverse(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Inverts the order of the characters in a String.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "Hello World".Reverse()
 
 MessageBox.Show(str)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MessageBox.Show("Test".Reverse)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source string.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The reversed String.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.Rotation">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Rotation.Rotate(System.String,Elektro.Core.Text.Enums.StringDirection,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Rotates the position of the characters in a String.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "Hello World".Rotate(StringDirection.Right, 1)
 
 MessageBox.Show(str)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source String.
 </param>
 
 <param name="direction">
 A <see cref="T:Elektro.Core.Text.Enums.StringDirection"/> that determines the rotation direction.
 </param>
 
 <param name="positions">
 The amount of character positions to rotate.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The rotated String.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 Value bigger than 0 is required.;positions
 </exception>
 
 <exception cref="T:System.ArgumentOutOfRangeException">
 Value smaller than the source string length is required.;positions
 </exception>
 
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 direction
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.Singularizing">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Singularizing.Singularize(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns the singular form of the specified plural word, in English language.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "I have tomatoes".Pluralize()
 
 MessageBox.Show(str)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="plural">
 The plural word, in English language.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting word.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Singularizing.Singularize(System.String,System.Globalization.CultureInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns the singular form of the specified plural word, in the specified language.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "I have tomatoes".Pluralize(CultureInfo.GetCultureInfo("en-US"))
 
 MessageBox.Show(str)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="plural">
 The plural word.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting word.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.Size">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Size.SizeInMemory(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the size, in bytes, that occupies a string in memory.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox("Test".SizeInMemory)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The size, in bytes.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Size.SizeInFile(System.String,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the size, in bytes, of how much a string will occupy when written to a file using the specified <see cref="T:System.Text.Encoding"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox("Test".SizeInFile(Encoding.Default))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="enc">
 The <see cref="T:System.Text.Encoding"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The size, in bytes.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Size.SizeInFile(System.String,System.Text.Encoding,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the size, in bytes, of how much a string will occupy when written to a file using the specified <see cref="T:System.Text.Encoding"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox("Test".SizeInFile(Encoding.UTF8, sumByteOrderMark:=True))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="enc">
 The <see cref="T:System.Text.Encoding"/>.
 </param>
 
 <param name="sumByteOrderMark">
 If <see langword="True"/>, takes into account the BOM (Byte Order Mark) in the resulting value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The size, in bytes.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Size.InternalSizeInFile(System.String,System.Text.Encoding,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the size, in bytes, of how much a string will occupy when written to a file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox("Test".SizeInFile(Encoding.UTF8, sumByteOrderMark:=True))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="enc">
 The <see cref="T:System.Text.Encoding"/>.
 </param>
 
 <param name="sumByteOrderMark">
 If <see langword="True"/>, takes into account the BOM (Byte Order Mark) in the resulting value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The size, in bytes.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.Split">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Split.SplitByLength(System.String,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Split a String into parts of the specified length.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim parts As IEnumerable(Of String) = "Hello World".SplitByLength(2)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source String.
 </param>
 
 <param name="length">
 The length.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the parts of the splitted striing.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 Value bigger than 0 is required.;length
 </exception>
 
 <exception cref="T:System.ArgumentOutOfRangeException">
 Value smaller than the source string length is required.;length
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Split.SplitByPosition(System.String,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Split a String into two parts by the specified character position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim parts As IEnumerable(Of String) = "Hello World".SplitByPosition(4)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source String.
 </param>
 
 <param name="position">
 The starting character position where to split.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the parts of the splitted striing.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 Value bigger than 0 is required.;position
 </exception>
 
 <exception cref="T:System.ArgumentOutOfRangeException">
 Value smaller than the source string length is required.;position
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.StartsWith">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.StartsWith.StartsWithAny(System.String,System.Collections.Generic.IEnumerable{System.String})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the beginning of the specified string matches any of the specified strings.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim isMatch As Boolean = "Hello World!".StartsWithAny({"Hello", "World"})
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="values">
 A collection of strings to match.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 values
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the beginning of the specified string matches any of the specified strings; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.StartsWith.StartsWithAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the beginning of the specified string matches any of the specified strings.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim isMatch As Boolean = "Hello World!".StartsWithAny({"hello", "world"}, StringComparison.OrdinalIgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="values">
 A collection of strings to match.
 </param>
 
 <param name="comparisonType">
 One of the enumeration values that determines how this string and value are compared.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 values
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the beginning of the specified string matches any of the specified strings; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.StartsWith.EnsureStartsWith(System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the beginning of the source string matches the specified string.
 <para></para>
 If does not, it inserts the specified string at the beginning of the source string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "World".EnsureStartsWith("Hello ")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="value">
 The string to match.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 value
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the beginning of the source string matches the specified string; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.StartsWith.EnsureStartsWith(System.String,System.String,System.StringComparison)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the beginning of the source string matches the specified string.
 <para></para>
 If does not, it inserts the specified string at the beginning of the source string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "World".EnsureStartsWith("Hello ", StringComparison.OrdinalIgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="value">
 The string to match.
 </param>
 
 <param name="comparisonType">
 One of the enumeration values that determines how this string and value are compared.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 value
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the beginning of the source string matches the specified string; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.Substring">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Substring.SubstringEnd(System.String,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves a substring from the source <see cref="T:System.String"/>.
 <para></para>
 The substring starts at the end of the string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "Hello World".SubstringEnd(2)
 
 MessageBox.Show(str)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="source">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="length">
 The number of characters in the substring.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting substring.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.Substring.SubstringEnd(System.String,System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves a substring from the source <see cref="T:System.String"/>.
 <para></para>
 The substring starts at the end of the string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "Hello World".SubstringEnd(2, 2)
 
 MessageBox.Show(str)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="source">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="startIndex">
 The zero-based starting character position of the substring.
 </param>
 
 <param name="length">
 The number of characters in the substring.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting substring.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Extensions.String.TypeConversion">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.TypeConversion.ToByteArray(System.String,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts a string to a Byte array.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MessageBox.Show(String.Join(", ", "Test".ToByteArray(Encoding.ASCII)))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source string.
 </param>
 
 <param name="enc">
 The <see cref="T:System.Text.Encoding"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The bytes.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Extensions.String.TypeConversion.ToSecureString(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts the source <see cref="T:System.String"/> to a <see cref="T:System.Security.SecureString"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim secstr As SecureString = "PASSWORD".ToSecureString()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 value
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Security.SecureString"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Tools.StringUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains String related utilties.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.StringUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.Text.Tools.StringUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Tools.StringUtil.rand">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A <see cref="T:System.Random"/> instance to generate random secuences of numbers.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.StringUtil.GenerateRandomString(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates a random alpha-numeric string of the specified length.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = GenerateRandomString(10)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="length">
 The target string length.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.StringUtil.GenerateRandomString(System.Char[],System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates a random string of the specified length using the specified characters.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = GenerateRandomString("ABCDEFGHIJKLMNOPQRSTUVWXYZ".ToCharArray(), 10)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="charSet">
 The character set.
 </param>
 
 <param name="length">
 The target string length.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting string.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 charSet
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.StringUtil.GenerateRandomString(System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates a random alpha-numeric string within the specified string-length range.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = GenerateRandomString(minLength:=3, maxLength:=5)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="minLength">
 The minimum string length.
 </param>
 
 <param name="maxLength">
 The maximum string length.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting string.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 charSet
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.StringUtil.GenerateRandomString(System.Char[],System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates a random string within the specified string-length range using the specified characters.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = GenerateRandomString("ABCDEFGHIJKLMNOPQRSTUVWXYZ".ToCharArray(), minLength:=3, maxLength:=5)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="charSet">
 The character set.
 </param>
 
 <param name="minLength">
 The minimum string length.
 </param>
 
 <param name="maxLength">
 The maximum string length.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting string.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 charSet
 </exception>
 
 <exception cref="T:System.ArgumentOutOfRangeException">
 minLength;Value bigger than 0 is required.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.StringUtil.GenerateWhiteSpacedString(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates a white-spaced string with the specified length.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim s As String = GetWhiteSpacedString(10)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="length">
 The white-space length.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The white-spaced string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Tools.Textfiles">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains text-files related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.Text.Tools.Textfiles"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.CheckEncoding(System.Text.Encoding@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Checks the referenced <see cref="T:System.Text.Encoding"/> value, if the value is <see langword="Nothing"/>, 
 then sets the value as <see cref="P:System.Text.Encoding.Default"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="refEncoding">
 The <see cref="T:System.Text.Encoding"/> referenced value.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.CheckFilePath(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Checks the specified filepath, if the filepath doesn't exists, then throws a <see cref="T:System.IO.FileNotFoundException"/> exception.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The filepath.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 File not found.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.Contains(System.String,System.String,System.Collections.Generic.IEqualityComparer{System.String},System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source textfile contains the specified string.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim contains As Boolean = Contains("C:\file.txt", "Hello World!", StringComparer.OrdinalIgnoreCase)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <code>True</code> if the value is found, otherwise, <code>False</code>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.CountAllLines(System.String,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the total amount of lines of the source textfile.
 </summary>   
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lineCount As Integer = CountAllLines("C:\file.txt", Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A value that contains the total amount of lines of the source textfile.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.CountBlanktLines(System.String,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the total amount of blank lines of the source textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lineCount As Integer = CountBlanktLines("C:\file.txt", Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A value that contains the total amount of blank lines of the source textfile.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.CountNonBlanktLines(System.String,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the total amount of non-blank lines of the source textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lineCount As Integer = CountNonBlanktLines("C:\file.txt", Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A value that contains the total amount of non-blank lines of the source textfile.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.GetEncoding(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines the <see cref="T:System.Text.Encoding"/> of the source textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim encoding As Encoding = GetEncoding("C:\file.txt")
 Dim encodingName As String = GetEncoding("C:\file.txt").WebName
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the encoding can be detected, the return value is the detected <see cref="T:System.Text.Encoding"/>,
 if the encoding can't be detected, the return value is <see cref="P:System.Text.Encoding.Default"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.GetLine(System.String,System.Int32,Elektro.Core.Text.Enums.TextDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the specified line number from the source textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim line As String = GetLine("C:\file.txt", 5, Textfiles.TextDirection.Top, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="lineNumber">
 The index of the line to get.
 </param>
 
 <param name="textDirection">
 The text direction.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 lineNumber
 </exception>
 
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 textDirection
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.String"/> that contains the text of the obtained line.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.GetLines(System.String,System.Collections.Generic.IEnumerable{System.Int32},Elektro.Core.Text.Enums.TextDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the specified line numbers from the source textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lines As IEnumerable(Of String) = GetLines("C:\file.txt", {1, 2, 3}, Textfiles.TextDirection.Top, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="lineNumbers">
 The indexes of the lines to get.
 </param>
 
 <param name="textDirection">
 The text direction.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 lineNumbers
 </exception>
 
 <exception cref="T:System.ArgumentException">
 The specified line number collection has duplicated values.;lineNumbers
 </exception>
 
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 textDirection
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the text of the obtained lines.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.InsertLines(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.String},Elektro.Core.Text.Enums.TextDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Inserts the specified text-lines in the given line number of the source textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lines As IEnumerable(Of String) = InsertLines("C:\old file.txt", "C:\new file.txt", 5, {"Text"}, Textfiles.TextDirection.Top, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>   

 <param name="lineNumber">
 The start index of the line to insert.
 </param>
 
 <param name="textCol">
 The text-line to insert.
 </param>
 
 <param name="textDirection">
 The text direction.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 lineNumber
 </exception>
 
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 textDirection
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the textfile lines with the inserted lines.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.InsertLine(System.String,System.Int32,System.String,Elektro.Core.Text.Enums.TextDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Inserts the specified text-line in the given line number of the source textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lines As IEnumerable(Of String) = InsertLine("C:\old file.txt", "C:\new file.txt", 5, "Text", Textfiles.TextDirection.Top, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>   

 <param name="lineNumber">
 The start index of the line to insert.
 </param>
 
 <param name="text">
 The text-line to insert.
 </param>
 
 <param name="textDirection">
 The text direction.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 lineNumber
 </exception>
 
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 textDirection
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the textfile lines with the inserted line.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.InsertLines(System.String,System.String,System.Int32,System.Collections.Generic.IEnumerable{System.String},Elektro.Core.Text.Enums.TextDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Inserts the specified text-lines in the given line number of the source textfile,
 then writes the result in the target textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 InsertLines("C:\old file.txt", "C:\new file.txt", 5, {"Text"}, Textfiles.TextDirection.Top, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>   

 <param name="targetFilepath">
 The target textfile path.
 </param>
 
 <param name="lineNumber">
 The start index of the line to insert.
 </param>
 
 <param name="textCol">
 The text-lines to insert.
 </param>
 
 <param name="textDirection">
 The text direction.
 </param>
 
 <param name="enc">
 The file encoding used to read/write the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.InsertLine(System.String,System.String,System.Int32,System.String,Elektro.Core.Text.Enums.TextDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Inserts the specified text-line in the given line number of the source textfile,
 then writes the result in the target textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 InsertLine("C:\old file.txt", "C:\new file.txt", 5, "Text", Textfiles.TextDirection.Top, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>   

 <param name="targetFilepath">
 The target textfile path.
 </param>
 
 <param name="lineNumber">
 The start index of the line to insert.
 </param>
 
 <param name="line">
 The text-line to insert.
 </param>
 
 <param name="textDirection">
 The text direction.
 </param>
 
 <param name="enc">
 The file encoding used to read/write the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Tools.Textfiles.rand">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A <see cref="T:System.Random"/> instance to generate random secuences of numbers.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.Randomize(System.String,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Randomizes the lines of the source textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lines As IEnumerable(Of String) = Randomize("C:\file.txt", Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the randomized lines.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.Randomize(System.String,System.String,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Randomizes the lines of the source textfile, 
 then writes the result in the target textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Randomize("C:\old file.txt", "C:\new file.txt", Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>   

 <param name="targetFilepath">
 The target textfile path.
 </param>
 
 <param name="enc">
 The file encoding used to read/write the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.RemoveLines(System.String,System.Collections.Generic.IEnumerable{System.Int32},Elektro.Core.Text.Enums.TextDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes the specified line numbers in the source textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lines As IEnumerable(Of String) = RemoveLines("C:\file.txt", {1, 2, 3}, Textfiles.TextDirection.Top, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>   

 <param name="lineNumbers">
 The indexes of the lines to remove.
 </param>
 
 <param name="textDirection">
 The text direction.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the textfile lines less the removed lines.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.RemoveLine(System.String,System.Int32,Elektro.Core.Text.Enums.TextDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes the specified line number in the source textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lines As IEnumerable(Of String) = RemoveLine("C:\file.txt", 5, Textfiles.TextDirection.Top, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>   

 <param name="lineNumber">
 The index of the line to remove.
 </param>
 
 <param name="textDirection">
 The text direction.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the textfile lines less the removed line.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.RemoveLines(System.String,System.String,System.Collections.Generic.IEnumerable{System.Int32},Elektro.Core.Text.Enums.TextDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes the specified line numbers in the source textfile,
 then writes the result in the target textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 RemoveLines("C:\old file.txt", "C:\new file.txt", {1, 2, 3}, Textfiles.TextDirection.Top, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>   

 <param name="targetFilepath">
 The target textfile path.
 </param> 

 <param name="lineNumbers">
 The index of the lines to remove.
 </param>
 
 <param name="textDirection">
 The text direction.
 </param>
 
 <param name="enc">
 The file encoding used to read/write the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.RemoveLine(System.String,System.String,System.Int32,Elektro.Core.Text.Enums.TextDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes the specified line number in the source textfile,
 then writes the result in the target textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 RemoveLine("C:\old file.txt", "C:\new file.txt", 5, TextDirection.Top, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>   

 <param name="targetFilepath">
 The target textfile path.
 </param> 

 <param name="lineNumber">
 The index of the line to remove.
 </param>
 
 <param name="textDirection">
 The text direction.
 </param>
 
 <param name="enc">
 The file encoding used to read/write the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.ReplaceLines(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.String},Elektro.Core.Text.Enums.TextDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Replaces the specified line numbers in the source textfile with the given text-lines.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lines As IEnumerable(Of String) = ReplaceLines("C:\file.txt", {1, 2, 3}, {"Hello", "World"}, Textfiles.TextDirection.Top, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="lineNumbers">
 The index of the lines to replace.
 </param>
 
 <param name="textCol">
 The text-lines to replace.
 </param>
 
 <param name="textDirection">
 The text direction.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 lineNumbers
 </exception>
 
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 textDirection
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the textfile lines with the replaced lines.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.ReplaceLines(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,Elektro.Core.Text.Enums.TextDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Replaces the specified line numbers in the source textfile with the given text-line.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lines As IEnumerable(Of String) = ReplaceLines("C:\file.txt", {1, 2, 3}, "Text", Textfiles.TextDirection.Top, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="lineNumbers">
 The index of the lines to replace.
 </param>
 
 <param name="text">
 The text-line to replace.
 </param>
 
 <param name="textDirection">
 The text direction.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 lineNumbers
 </exception>
 
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 textDirection
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the textfile lines with the replaced lines.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.ReplaceLine(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.String},Elektro.Core.Text.Enums.TextDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Replaces the specified line number in the source textfile with the given text-lines.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lines As IEnumerable(Of String) = ReplaceLine("C:\file.txt", 5, {"Text"}, Textfiles.TextDirection.Top, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="lineNumber">
 The index of the line to replace.
 </param>
 
 <param name="textCol">
 The text-lines to replace.
 </param>
 
 <param name="textDirection">
 The text direction.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 lineNumber
 </exception>
 
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 textDirection
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the textfile lines with the replaced lines.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.ReplaceLine(System.String,System.Int32,System.String,Elektro.Core.Text.Enums.TextDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Replaces the specified line number in the source textfile with the given text-line.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lines As IEnumerable(Of String) = ReplaceLine("C:\file.txt", 5, "Text", Textfiles.TextDirection.Top, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>   

 <param name="lineNumber">
 The index of the line to replace.
 </param>
 
 <param name="text">
 The text-line to replace.
 </param>
 
 <param name="textDirection">
 The text direction.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the textfile lines with the replaced line.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.ReplaceLines(System.String,System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.String},Elektro.Core.Text.Enums.TextDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Replaces the specified line numbesr in the source textfile with the given text-line,
 then writes the result in the target textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 ReplaceLines("C:\old file.txt", "C:\new file.txt", {1, 2, 3}, {"Hello", "World"}, Textfiles.TextDirection.Top, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>

 <param name="targetFilepath">
 The target textfile path.
 </param>
 
 <param name="lineNumbers">
 The index of the lines to replace.
 </param>
 
 <param name="textCol">
 The text-lines to replace.
 </param>
 
 <param name="textDirection">
 The text direction.
 </param>
 
 <param name="enc">
 The file encoding used to read/write the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.ReplaceLines(System.String,System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,Elektro.Core.Text.Enums.TextDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Replaces the specified line numbesr in the source textfile with the given text-line,
 then writes the result in the target textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 ReplaceLines("C:\old file.txt", "C:\new file.txt", {1, 2, 3}, "Text", Textfiles.TextDirection.Top, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>

 <param name="targetFilepath">
 The target textfile path.
 </param>
 
 <param name="lineNumbers">
 The index of the lines to replace.
 </param>
 
 <param name="text">
 The text-line to replace.
 </param>
 
 <param name="textDirection">
 The text direction.
 </param>
 
 <param name="enc">
 The file encoding used to read/write the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.ReplaceLine(System.String,System.String,System.Int32,System.Collections.Generic.IEnumerable{System.String},Elektro.Core.Text.Enums.TextDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Replaces the specified line number in the source textfile with the given text-lines,
 then writes the result in the target textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 ReplaceLine("C:\old file.txt", "C:\new file.txt", 5, "Text", Textfiles.TextDirection.Top, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>   

 <param name="targetFilepath">
 The target textfile path.
 </param>
 
 <param name="lineNumber">
 The index of the line to replace.
 </param>
 
 <param name="textCol">
 The text-lines to replace.
 </param>
 
 <param name="textDirection">
 The text direction.
 </param>
 
 <param name="enc">
 The file encoding used to read/write the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.ReplaceLine(System.String,System.String,System.Int32,System.String,Elektro.Core.Text.Enums.TextDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Replaces the specified line number in the source textfile with the given text-line,
 then writes the result in the target textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 ReplaceLine("C:\old file.txt", "C:\new file.txt", 5, "Text", Textfiles.TextDirection.Top, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>   

 <param name="targetFilepath">
 The target textfile path.
 </param>
 
 <param name="lineNumber">
 The index of the line to replace.
 </param>
 
 <param name="line">
 The text-line to replace.
 </param>
 
 <param name="textDirection">
 The text direction.
 </param>
 
 <param name="enc">
 The file encoding used to read/write the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.Reverse(System.String,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reverses the lines of the source textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lines As IEnumerable(Of String) = Reverse("C:\file.txt", Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the reversed lines.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.Reverse(System.String,System.String,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reverses the lines of the source textfile, 
 then writes the result in the target textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Reverse("C:\old file.txt", "C:\new file.txt", Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>   

 <param name="targetFilepath">
 The target textfile path.
 </param>
 
 <param name="enc">
 The file encoding used to read/write the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.SkipLines(System.String,System.Int32,Elektro.Core.Text.Enums.TextDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Skips the specified amount of lines in the source textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lines As IEnumerable(Of String) = SkipLines("C:\file.txt", 5, Textfiles.TextDirection.Top, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="amountOfLines">
 The amount of lines to skip.
 </param>
 
 <param name="textDirection">
 The text direction.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 amountOfLines
 </exception>
 
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 textDirection
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the non-skipped lines.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.SkipLines(System.String,System.String,System.Int32,Elektro.Core.Text.Enums.TextDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Skips the specified amount of lines in the source textfile,
 then writes the result in the target textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 SkipLines("C:\old file.txt", "C:\new file.txt", 5, Textfiles.TextDirection.Top, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>   

 <param name="targetFilepath">
 The target textfile path.
 </param>
 
 <param name="amountOfLines">
 The amount of lines to skip.
 </param>
 
 <param name="textDirection">
 The text direction.
 </param>
 
 <param name="enc">
 The file encoding used to read/write the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.Sort(System.String,System.ComponentModel.ListSortDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sorts the lines of the source textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lines As IEnumerable(Of String) = Sort("C:\file.txt", ListSortDirection.Ascending, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="sortDirection">
 The sorting direction.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 sortDirection
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the sorted lines.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.SortBy``1(System.String,System.ComponentModel.ListSortDirection,System.Func{System.String,``0},System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sorts the lines of the source textfile by evaluating the result of the given condition.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lines As IEnumerable(Of String) = SortBy("C:\file.txt", ListSortDirection.Ascending, Function(line As String) line.EndsWith("5"), Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="sortDirection">
 The sorting direction.
 </param>
 
 <param name="sortExpr">
 The sorting expression to evaluate.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 sortDirection
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the sorted lines.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.Sort(System.String,System.String,System.ComponentModel.ListSortDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sorts the lines of the source textfile,
 then writes the result in the target textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Sort("C:\old file.txt", "C:\new file.txt", ListSortDirection.Ascending, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>   

 <param name="targetFilepath">
 The target textfile path.
 </param>
 
 <param name="sortDirection">
 The sorting direction.
 </param>
 
 <param name="enc">
 The file encoding used to read/write the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.SortBy``1(System.String,System.String,System.ComponentModel.ListSortDirection,System.Func{System.String,``0},System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sorts the lines of the source textfile by evaluating the result of the given condition.
 then writes the result in the target textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 SortBy("C:\old file.txt", "C:\new file.txt", ListSortDirection.Ascending, Function(line As String) line.EndsWith("5"), Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="targetFilepath">
 The target textfile path.
 </param>
 
 <param name="sortDirection">
 The sorting direction.
 </param>
 
 <param name="sortExpr">
 The sorting expression to evaluate.
 </param>
 
 <param name="enc">
 The file encoding used to read/write the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.Split(System.String,System.Char[],System.StringSplitOptions,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Splits the source textfile by the specified characters.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lines As IEnumerable(Of String) = Split("C:\file.txt", {" "c}, StringSplitOptions.RemoveEmptyEntries, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="characters">
 The characters that delimits the split.
 </param>
 
 <param name="splitOptions">
 The split behavior option.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the splitted lines.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.Split(System.String,System.Char,System.StringSplitOptions,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Splits the source textfile by the specified character.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lines As IEnumerable(Of String) = Split("C:\file.txt", " "c, StringSplitOptions.RemoveEmptyEntries, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="character">
 The character that delimits the split.
 </param>
 
 <param name="splitOptions">
 The split behavior option.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the splitted lines.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.Split(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringSplitOptions,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Splits the source textfile by the specified strings.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lines As IEnumerable(Of String) = Split("C:\file.txt", {"Hello World"}, StringSplitOptions.RemoveEmptyEntries, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="strCol">
 The strings that delimits the split.
 </param>
 
 <param name="splitOptions">
 The split behavior option.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the splitted lines.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.Split(System.String,System.String,System.StringSplitOptions,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Splits the source textfile by the specified string.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lines As IEnumerable(Of String) = Split("C:\file.txt", "Hello World", StringSplitOptions.RemoveEmptyEntries, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="str">
 The string that delimits the split.
 </param>
 
 <param name="splitOptions">
 The split behavior option.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the splitted lines.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.SplitByLines(System.String,System.Int32,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Splits the source textfile by the specified amount of lines.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim parts As IEnumerable(Of IEnumerable(Of String)) = SplitByLines("C:\file.txt", 2, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="amountOfLines">
 The amount of lines.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the splitted parts.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.TakeLines(System.String,System.Int32,Elektro.Core.Text.Enums.TextDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Takes the specified amount of lines from the source textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lines As IEnumerable(Of String) = TakeLines("C:\file.txt", 5, Textfiles.TextDirection.Top, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="amountOfLines">
 The amount of lines to take.
 </param>
 
 <param name="textDirection">
 The text direction.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 amountOfLines
 </exception>
 
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 textDirection
 </exception>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the taken lines.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.TakeLines(System.String,System.String,System.Int32,Elektro.Core.Text.Enums.TextDirection,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Takes the specified amount of lines from the source textfile, 
 then writes the result in the target textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 TakeLines("C:\old file.txt", "C:\new file.txt", 5, Textfiles.TextDirection.Top, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>   

 <param name="targetFilepath">
 The target textfile path.
 </param>
 
 <param name="amountOfLines">
 The amount of lines to take.
 </param>
 
 <param name="textDirection">
 The text direction.
 </param>
 
 <param name="enc">
 The file encoding used to read/write the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.Trim(System.String,System.Char[],System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Trims the specified chars in the lines of the source textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lines As IEnumerable(Of String) = Trim("C:\file.txt", {" "c, ControlChars.NullChar}, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="trimChars">
 The characters to trim from lines.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the trimmed lines.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.TrimStart(System.String,System.Char[],System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Trims the specified chars from the start of the lines of the source textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lines As IEnumerable(Of String) = TrimStart("C:\file.txt", {" "c, ControlChars.NullChar}, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="trimChars">
 The characters to trim from lines.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the trimmed lines.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.TrimEnd(System.String,System.Char[],System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Trims the specified chars from the end of the lines of the source textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Dim lines As IEnumerable(Of String) = TrimEnd("C:\file.txt", {" "c, ControlChars.NullChar}, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="trimChars">
 The characters to trim from lines.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the trimmed lines.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.Trim(System.String,System.String,System.Char[],System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Trims the specified chars in the lines of the source textfile,
 then writes the result in the target textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 Trim("C:\old file.txt", "C:\new file.txt", {" "c, ControlChars.NullChar}, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="targetFilepath">
 The target textfile path.
 </param>
 
 <param name="trimChars">
 The characters to trim from lines.
 </param>
 
 <param name="enc">
 The file encoding used to read/write the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.TrimStart(System.String,System.String,System.Char[],System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Trims the specified chars from the start of the lines of the source textfile,
 then writes the result in the target textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 TrimStart("C:\old file.txt", "C:\new file.txt", {" "c, ControlChars.NullChar}, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="targetFilepath">
 The target textfile path.
 </param>
 
 <param name="trimChars">
 The characters to trim from lines.
 </param>
 
 <param name="enc">
 The file encoding used to read/write the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Tools.Textfiles.TrimEnd(System.String,System.String,System.Char[],System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Trims the specified chars from the end of the lines of the source textfile,
 then writes the result in the target textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------     
 <example> This is a code example.
 <code>
 TrimEnd("C:\old file.txt", "C:\new file.txt", {" "c, ControlChars.NullChar}, Encoding.Default)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sourceFilepath">
 The source textfile path.
 </param>
 
 <param name="targetFilepath">
 The target textfile path.
 </param>
 
 <param name="trimChars">
 The characters to trim from lines.
 </param>
 
 <param name="enc">
 The file encoding used to read/write the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Types.FixedLengthString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Defines a <see cref="T:System.String"/> with a fixed length.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim fixedStr As New FixedLengthString("", 10)
 MessageBox.Show(String.Format("""{0}""", fixedStr.ValueFixed)) ' Result: "          "
 
 fixedStr.ValueUnfixed = "12345"
 MessageBox.Show(String.Format("""{0}""", fixedStr.ValueFixed)) ' Result: "1245      "
 
 fixedStr.ValueUnfixed = "1234567890abc"
 MessageBox.Show(String.Format("""{0}""", fixedStr.ValueFixed)) ' Result: "1234567890"
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Text.Types.FixedLengthString.FixedLength">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the fixed string length.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The fixed string length.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Types.FixedLengthString.fixedLengthB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The fixed string length.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Text.Types.FixedLengthString.PaddingChar">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the padding character thath fills the string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The padding character thath fills the string.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Types.FixedLengthString.paddingCharB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The padding character thath fills the string.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Text.Types.FixedLengthString.ValueUnfixed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the unmodified string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The unmodified string.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Types.FixedLengthString.valueUnfixedB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The unmodified string.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Text.Types.FixedLengthString.ValueFixed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the fixed string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The fixed string.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.FixedLengthString.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.Text.Types.FixedLengthString"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.FixedLengthString.#ctor(System.String,System.Int32,System.Char)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Text.Types.FixedLengthString"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="value">
 The string value.
 </param>
 
 <param name="fixedLength">
 The fixed string length.
 </param>
 
 <param name="paddingChar">
 The padding character thath fills the string.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.FixedLengthString.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a <see cref="T:System.String"/> that represents this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.String"/> that represents this instance.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.FixedLengthString.FixLength(System.String,System.Int32,System.Char)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Fixes the length of the specified string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="value">
 The string value.
 </param>
 
 <param name="fixedLength">
 The fixed string length.
 </param>
 
 <param name="paddingChar">
 The padding character thath fills the string.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The fixed-length string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Types.GroupingCharsInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Defines the characters used for an aperture and closure of an string.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Text.Types.GroupingCharsInfo.Aperture">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the aperture char.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The aperture char.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Types.GroupingCharsInfo.apertureB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The aperture char.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Text.Types.GroupingCharsInfo.Closure">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the closure char.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The closure char.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Types.GroupingCharsInfo.closureB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The closure char.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.GroupingCharsInfo.#ctor(System.Char,System.Char)">
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Text.Types.GroupingCharsInfo"/> class.
 </summary>
 <param name="apertureChar">
 The aperture character.
 </param>
 
 <param name="closureChar">
 The closure character.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.GroupingCharsInfo.GetType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the ddd<see cref="T:System.Type"/> of the current instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The exact runtime type of the current instance.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.GroupingCharsInfo.Equals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are considered equal.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the objects are considered equal; otherwise, <see langword="False"/>.
 <para></para>
 If both <paramref name="objA"/> and <paramref name="objB"/> are <see langword="Nothing"/>, 
 the method returns <see langword="True"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.GroupingCharsInfo.ReferenceEquals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are the same instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if <paramref name="objA"/> is the same instance as <paramref name="objB"/> 
 or if both are <see langword="Nothing"/>; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.GroupingCharsInfo.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a String that represents the current object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A string that represents the current object.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Types.GroupingInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Defines the info about enclosed and opened groups of chars in a String.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Text.Types.GroupingInfo.Source">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the source string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The source string.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Types.GroupingInfo.sourceB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The source string.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Text.Types.GroupingInfo.GroupingChars">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the grouping characters.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The grouping characters.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Types.GroupingInfo.groupingCharsB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The grouping characters.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Text.Types.GroupingInfo.HasClosedGroups">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that determines whether the source string contains enclosed groups.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 A value that determines whether the source string contains enclosed groups.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Types.GroupingInfo.hasClosedGroupsB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value that determines whether the source string contains enclosed groups.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Text.Types.GroupingInfo.HasOpenGroups">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that determines whether the source string contains open groups.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 A value that determines whether the source string contains open groups.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Types.GroupingInfo.hasOpenGroupsB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value that determines whether the source string contains open groups.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Text.Types.GroupingInfo.GroupsClosedCount">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the amount of enclosed groups.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The amount of enclosed groups.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Types.GroupingInfo.groupsClosedCountB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The amount of enclosed groups.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Text.Types.GroupingInfo.GroupsOpenCount">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the amount of open groups.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The amount of open groups.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Types.GroupingInfo.groupsOpenCountB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The amount of open groups.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Text.Types.GroupingInfo.GroupsClosedPositions">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the positions in the string of the enclosed groups.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The positions in the string of the enclosed groups.
 </value>
</member>
<member name="F:Elektro.Core.Text.Types.GroupingInfo.groupsClosedPositionsB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The positions in the string of the enclosed groups.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Text.Types.GroupingInfo.GroupsOpenPositions">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the positions in the string of the open groups.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The positions in the string of the open groups.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Types.GroupingInfo.groupsOpenPositionsB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The positions in the string of the open groups.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.GroupingInfo.#ctor(System.String,System.Collections.Generic.List{Elektro.Core.Text.Types.GroupingCharsInfo},System.Boolean,System.Boolean,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.List{System.Int32})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Text.Types.GroupingInfo"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="source">
 The source string.
 </param>
 
 <param name="groupingChars">
 The grouping characters.
 </param>
 
 <param name="hasClosedGroups">
 A value that determines whether the source string contains enclosed groups.
 </param>
 
 <param name="hasOpenGroups">
 A value that determines whether the source string contains open groups.
 </param>
 
 <param name="groupsClosedCount">
 The amount of enclosed groups.
 </param>
 
 <param name="groupsOpenCount">
 The amount of open groups.
 </param>
 
 <param name="groupsClosedPositions">
 The positions in the string of the enclosed groups.
 </param>
 
 <param name="groupsOpenPositions">
 The positions in the string of the open groups.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.GroupingInfo.GetType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the ddd<see cref="T:System.Type"/> of the current instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The exact runtime type of the current instance.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.GroupingInfo.Equals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are considered equal.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the objects are considered equal; otherwise, <see langword="False"/>.
 <para></para>
 If both <paramref name="objA"/> and <paramref name="objB"/> are <see langword="Nothing"/>, 
 the method returns <see langword="True"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.GroupingInfo.ReferenceEquals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are the same instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if <paramref name="objA"/> is the same instance as <paramref name="objB"/> 
 or if both are <see langword="Nothing"/>; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.GroupingInfo.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a String that represents the current object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A string that represents the current object.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Types.TexfileLines">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Defines a <see cref="T:System.Collections.Generic.List`1"/> that contains the text-lines of a textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Using txtFile As New TextfileStream("C:\file.txt", Encoding.Default)
 
     Dim txtLines As TextfileStream.TexfileLines = txtFile.Lines
 
     txtLines.Add("  Hello World!  ")
     txtLines.Trim({" "c})
     txtLines.Randomize()
 
     Dim lineIndex As Integer
     Dim lineCount As Integer = txtFile.Lines.Count
     Dim textFormat As String =
         String.Join(ControlChars.NewLine,
                     From line As String In txtFile.Lines
                     Select String.Format("{0}: {1}",
                            Interlocked.Increment(lineIndex).ToString(New String("0"c, lineCount.ToString.Length)), line))
 
     Console.WriteLine(String.Format("Filepath.......: {0}", txtFile.Filepath))
     Console.WriteLine(String.Format("Blank lines....: {0}", txtLines.CountBlank))
     Console.WriteLine(String.Format("Non-blank lines: {0}", txtLines.CountNonBlank))
     Console.WriteLine(String.Format("Lines..........: {0}", Environment.NewLine + textFormat))
 
 End Using
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Types.TexfileLines.rand">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A <see cref="T:System.Random"/> instance to generate random secuences of numbers.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Text.Types.TexfileLines.CountBlank">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the number of blank elements actually contained in the <see cref="T:System.Collections.Generic.List`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The number of blank elements actually contained in the <see cref="T:System.Collections.Generic.List`1"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Text.Types.TexfileLines.CountNonBlank">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the number of non-blank elements actually contained in the <see cref="T:System.Collections.Generic.List`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The number of non-blank elements actually contained in the <see cref="T:System.Collections.Generic.List`1"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.TexfileLines.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.Text.Types.TexfileLines"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.TexfileLines.#ctor(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.Text.Types.TexfileLines"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text content.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.TexfileLines.#ctor(System.Collections.Generic.IEnumerable{System.String})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Text.Types.TexfileLines"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="lines">
 The text lines.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.TexfileLines.Randomize">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Randomizes the elements of this <see cref="T:Elektro.Core.Text.Types.TexfileLines"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.TexfileLines.RemoveAt(System.Collections.Generic.IEnumerable{System.Int32})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes the elements at the specified indexes of this <see cref="T:Elektro.Core.Text.Types.TexfileLines"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="indexes">
 The zero-based indexes of the elements to remove.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 indexes
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.TexfileLines.Trim(System.Char[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes all leading and trailing occurrences of a set of characters from all the elements of this <see cref="T:Elektro.Core.Text.Types.TexfileLines"/>.
 </summary>  
 ----------------------------------------------------------------------------------------------------
 <param name="trimChars">
 An array of Unicode characters to remove.
 <para></para>
 If <paramref name="trimChars"/> is <see langword="Nothing"/> or an empty array, 
 Unicode white-space characters are removed instead.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.TexfileLines.TrimStart(System.Char[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes all leading occurrences of a set of characters from all the elements of this <see cref="T:Elektro.Core.Text.Types.TexfileLines"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="trimChars">
 An array of Unicode characters to remove.
 <para></para>
 If <paramref name="trimChars"/> is <see langword="Nothing"/> or an empty array, 
 Unicode white-space characters are removed instead.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.TexfileLines.TrimEnd(System.Char[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes all trailing occurrences of a set of characters from all the elements of this <see cref="T:Elektro.Core.Text.Types.TexfileLines"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="trimChars">
 An array of Unicode characters to remove.
 <para></para>
 If <paramref name="trimChars"/> is <see langword="Nothing"/> or an empty array, 
 Unicode white-space characters are removed instead.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Text.Types.TextfileStream">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reads and manages the contents of a textfile.
 It encapsulates an underliying <see cref="P:Elektro.Core.Text.Types.TextfileStream.FileStream"/> to access the file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Using txtFile As New TextfileStream("C:\File.txt", Encoding.Default)
 
     With txtFile
         .Lock()
         .Lines.Add("Test")
         .Lines(0) = "Hello World!"
         .Save()
         .Unlock()
     End With
 
     Dim lineIndex As Integer
     Dim lineCount As Integer = txtFile.Lines.Count
     Dim textFormat As String =
         String.Join(ControlChars.NewLine,
                     From line As String In txtFile.Lines
                     Select String.Format("{0}: {1}",
                     Interlocked.Increment(lineIndex).ToString(New String("0"c, lineCount.ToString.Length)), line))
 
     Console.WriteLine(String.Format("FilePath: {0}", txtFile.Filepath))
     Console.WriteLine(String.Format("Encoding: {0}", txtFile.Encoding.WebName))
     Console.WriteLine(String.Format("Lines   : {0}", Environment.NewLine + textFormat))
 
 End Using
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Text.Types.TextfileStream.Filepath">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the textfile path.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The textfile path.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Types.TextfileStream.filepathB">
 <summary>
 (Backing field) 
 The textfile path.
 </summary>
</member>
<member name="P:Elektro.Core.Text.Types.TextfileStream.Encoding">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the textfile <see cref="P:Elektro.Core.Text.Types.TextfileStream.Encoding"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The textfile <see cref="P:Elektro.Core.Text.Types.TextfileStream.Encoding"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Types.TextfileStream.encodingB">
 <summary>
 (Backing field) 
 The textfile <see cref="P:Elektro.Core.Text.Types.TextfileStream.Encoding"/>.
 </summary>
</member>
<member name="P:Elektro.Core.Text.Types.TextfileStream.Lines">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the textfile lines.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The textfile lines.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Types.TextfileStream.linesB">
 <summary>
 (Backing field) 
 The textfile lines.
 </summary>
</member>
<member name="P:Elektro.Core.Text.Types.TextfileStream.FileStream">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the <see cref="P:Elektro.Core.Text.Types.TextfileStream.FileStream"/> instance that exposes a <see cref="T:System.IO.Stream"/> around the textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The <see cref="P:Elektro.Core.Text.Types.TextfileStream.FileStream"/> instance.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Types.TextfileStream.fileStreamB">
 <summary>
 (Backing Field) 
 The <see cref="P:Elektro.Core.Text.Types.TextfileStream.FileStream"/> instance that exposes a <see cref="T:System.IO.Stream"/> around the textfile.
 </summary>
</member>
<member name="P:Elektro.Core.Text.Types.TextfileStream.FileHandle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> object that represents the operating system file handle of the textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 A <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> object that represents the operating system file handle of the textfile.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.TextfileStream.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.Text.Types.TextfileStream"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.TextfileStream.#ctor(System.String,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Text.Types.TextfileStream"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The textfile path.
 <para></para>
 If the path doesn't exists, the file will be created.
 </param>
 
 <param name="enc">
 The file encoding used to read the textfile.
 <para></para>
 If <paramref name="enc"/> value is <see langword="Nothing"/>, an attempt to detect the encoding will be realized, 
 if the attempt to detect the file encoding fails, then <see cref="P:System.Text.Encoding.Default"/> will be used.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.FileNotFoundException">
 File not found.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.TextfileStream.Lock">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents other processes from reading or writing to the textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.TextfileStream.Unlock">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Allows access by other processes to read or write to a textfile that was previously locked.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.TextfileStream.Close">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.TextfileStream.Save(System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Save the lines of the current textfile, in the current textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 Note that the <see cref="M:Elektro.Core.Text.Types.TextfileStream.Save(System.String,System.Text.Encoding)"/> method should be called to apply any realized changes in the lines of the textfile 
 before disposing the current <see cref="T:Elektro.Core.Text.Types.TextfileStream"/> instance.
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="enc">
 The file encoding used to write the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.TextfileStream.Save(System.String,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Save the lines of the current textfile, in the target textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The target filepath where to save the text.
 </param>
 
 <param name="enc">
 The file encoding used to write the textfile.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.TextfileStream.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a <see cref="T:System.String"/> that represents this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.String"/> that represents this instance.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.TextfileStream.GetEncoding">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines the <see cref="P:Elektro.Core.Text.Types.TextfileStream.Encoding"/> of the current textfile.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the encoding can be detected, the return value is the detected <see cref="P:Elektro.Core.Text.Types.TextfileStream.Encoding"/>,
 if the encoding can't be detected, the return value is <see cref="P:System.Text.Encoding.Default"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Text.Types.TextfileStream.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.TextfileStream.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Text.Types.TextfileStream.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Types.AestheticList`1">
 ----------------------------------------------------------------------------------------------------
 <summary>
 This is a class to consume for aesthetic purposes.
 <para></para>
 A default (emptyness) class that inherits from <see cref="T:System.Collections.Generic.List`1"/>, with these base members hidden:
 <para></para>
 <see cref="M:System.Object.GetHashCode"/>, <see cref="M:System.Object.GetType"/>, 
 <see cref="M:System.Object.Equals(System.Object)"/>, <see cref="M:System.Object.Equals(System.Object,System.Object)"/>,
 <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>, <see cref="M:System.Object.ToString"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticList`1.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Types.AestheticList`1"/> class 
 is empty and has the default initial capacity.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticList`1.#ctor(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Types.AestheticList`1"/> class 
 is empty and has the specified initial capacity.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="capacity">
 The number of elements that the new list can initially store.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Types.AestheticList`1"/> class 
 that contains elements copied from the specified collection 
 and has sufficient capacity to accommodate the number of elements copied.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="collection">
 The collection whose elements are copied to the new list.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticList`1.GetHashCode">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Serves as a hash function for a particular type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticList`1.GetType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the <see cref="T:System.Type"/> of the current instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The exact runtime type of the current instance.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticList`1.Equals(System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="obj">
 Another object to compare to.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified <see cref="T:System.Object"/> is equal to this instance; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticList`1.Equals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are considered equal.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the objects are considered equal; otherwise, <see langword="False"/>.
 <para></para>
 If both <paramref name="objA"/> and <paramref name="objB"/> are <see langword="Nothing"/>, 
 the method returns <see langword="True"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticList`1.ReferenceEquals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are the same instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if <paramref name="objA"/> is the same instance as <paramref name="objB"/> 
 or if both are <see langword="Nothing"/>; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticList`1.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a String that represents the current object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A string that represents the current object.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Types.AestheticForm">
 ----------------------------------------------------------------------------------------------------
 <summary>
 This is a class to consume for aesthetic purposes.
 <para></para>
 A default (emptyness) class that inherits from <see cref="T:System.Windows.Forms.Form"/>, with these base members hidden:
 <para></para>
 <see cref="M:System.Object.GetHashCode"/>, <see cref="M:System.Object.GetType"/>, 
 <see cref="M:System.Object.Equals(System.Object)"/>, <see cref="M:System.Object.Equals(System.Object,System.Object)"/>,
 <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>, <see cref="M:System.Windows.Forms.Form.ToString"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticForm.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Types.AestheticForm"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticForm.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a String that represents the current object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A string that represents the current object.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticForm.GetHashCode">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Serves as a hash function for a particular type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticForm.GetType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the <see cref="T:System.Type"/> of the current instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The exact runtime type of the current instance.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticForm.Equals(System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="obj">
 Another object to compare to.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified <see cref="T:System.Object"/> is equal to this instance; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticForm.Equals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are considered equal.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the objects are considered equal; otherwise, <see langword="False"/>.
 <para></para>
 If both <paramref name="objA"/> and <paramref name="objB"/> are <see langword="Nothing"/>, 
 the method returns <see langword="True"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticForm.ReferenceEquals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are the same instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if <paramref name="objA"/> is the same instance as <paramref name="objB"/> 
 or if both are <see langword="Nothing"/>; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Types.AestheticException">
 ----------------------------------------------------------------------------------------------------
 <summary>
 This is a class to consume for aesthetic purposes.
 <para></para>
 A default (emptyness) class that inherits from <see cref="T:System.Exception"/>, with these base members hidden:
 <para></para>
 <see cref="M:System.Object.GetHashCode"/>, <see cref="M:System.Exception.GetType"/>, 
 <see cref="M:System.Object.Equals(System.Object)"/>, <see cref="M:System.Object.Equals(System.Object,System.Object)"/>,
 <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>, <see cref="M:System.Exception.ToString"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticException.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Types.AestheticException"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticException.#ctor(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Types.AestheticException"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="message">
 The message that describes the error.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticException.#ctor(System.String,System.Exception)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Types.AestheticException"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="message">
 The message that describes the error.
 </param>
 
 <param name="innerException">
 The exception that is the cause of the current exception, 
 or a null reference (<see langword="Nothing"/> in <c>Visual Basic</c>) if no inner exception is specified.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Types.AestheticException"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 This constructor is used to deserialize values.
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="info">
 The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.
 </param>
 
 <param name="context">
 The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this deserialization.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">info</exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticException.GetType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the <see cref="T:System.Type"/> of the current instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The exact runtime type of the current instance.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticException.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a String that represents the current object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A string that represents the current object.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticException.GetHashCode">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Serves as a hash function for a particular type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticException.Equals(System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="obj">
 Another object to compare to.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified <see cref="T:System.Object"/> is equal to this instance; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticException.Equals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are considered equal.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the objects are considered equal; otherwise, <see langword="False"/>.
 <para></para>
 If both <paramref name="objA"/> and <paramref name="objB"/> are <see langword="Nothing"/>, 
 the method returns <see langword="True"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticException.ReferenceEquals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are the same instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if <paramref name="objA"/> is the same instance as <paramref name="objB"/> 
 or if both are <see langword="Nothing"/>; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Types.AestheticEventArgs">
 ----------------------------------------------------------------------------------------------------
 <summary>
 This is a class to consume for aesthetic purposes.
 <para></para>
 A default (emptyness) class that inherits from <see cref="T:System.EventArgs"/>, with these base members hidden:
 <para></para>
 <see cref="M:System.Object.GetHashCode"/>, <see cref="M:System.Object.GetType"/>, 
 <see cref="M:System.Object.Equals(System.Object)"/>, <see cref="M:System.Object.Equals(System.Object,System.Object)"/>,
 <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>, <see cref="M:System.Object.ToString"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticEventArgs.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Types.AestheticEventArgs"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticEventArgs.GetHashCode">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Serves as a hash function for a particular type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticEventArgs.GetType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the <see cref="T:System.Type"/> of the current instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The exact runtime type of the current instance.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticEventArgs.Equals(System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="obj">
 Another object to compare to.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified <see cref="T:System.Object"/> is equal to this instance; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticEventArgs.Equals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are considered equal.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the objects are considered equal; otherwise, <see langword="False"/>.
 <para></para>
 If both <paramref name="objA"/> and <paramref name="objB"/> are <see langword="Nothing"/>, 
 the method returns <see langword="True"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticEventArgs.ReferenceEquals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are the same instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if <paramref name="objA"/> is the same instance as <paramref name="objB"/> 
 or if both are <see langword="Nothing"/>; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticEventArgs.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a String that represents the current object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A string that represents the current object.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Types.AestheticCollection`1">
 ----------------------------------------------------------------------------------------------------
 <summary>
 This is a class to consume for aesthetic purposes.
 <para></para>
 A default (emptyness) class that inherits from <see cref="T:Microsoft.VisualBasic.Collection"/>, with these base members hidden:
 <para></para>
 <see cref="M:System.Object.GetHashCode"/>, <see cref="M:System.Object.GetType"/>, 
 <see cref="M:System.Object.Equals(System.Object)"/>, <see cref="M:System.Object.Equals(System.Object,System.Object)"/>,
 <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>, <see cref="M:System.Object.ToString"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticCollection`1.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Types.AestheticCollection`1"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticCollection`1.#ctor(System.Collections.Generic.IList{`0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Types.AestheticCollection`1"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="list">
 The list that is wrapped by the new collection.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticCollection`1.GetHashCode">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Serves as a hash function for a particular type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticCollection`1.GetType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the <see cref="T:System.Type"/> of the current instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The exact runtime type of the current instance.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticCollection`1.Equals(System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="obj">
 Another object to compare to.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified <see cref="T:System.Object"/> is equal to this instance; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticCollection`1.Equals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are considered equal.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the objects are considered equal; otherwise, <see langword="False"/>.
 <para></para>
 If both <paramref name="objA"/> and <paramref name="objB"/> are <see langword="Nothing"/>, 
 the method returns <see langword="True"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticCollection`1.ReferenceEquals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are the same instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if <paramref name="objA"/> is the same instance as <paramref name="objB"/> 
 or if both are <see langword="Nothing"/>; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticCollection`1.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a String that represents the current object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A string that represents the current object.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Types.AestheticNativeWindow">
 ----------------------------------------------------------------------------------------------------
 <summary>
 This is a class to consume for aesthetic purposes.
 <para></para>
 A default (emptyness) class that inherits from <see cref="T:System.Object"/>, with these base members hidden:
 <para></para>
 <see cref="M:System.Object.GetHashCode"/>, <see cref="M:System.Object.GetType"/>, 
 <see cref="M:System.Object.Equals(System.Object)"/>, <see cref="M:System.Object.Equals(System.Object,System.Object)"/>,
 <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>, <see cref="M:System.Object.ToString"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticNativeWindow.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Types.AestheticNativeWindow"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticNativeWindow.AssignHandle(System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Assigns a handle to this window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="handle">
 The handle to assign to this window.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticNativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates a window and its handle with the specified creation parameters.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="cp">
 A <see cref="T:System.Windows.Forms.CreateParams"/> that specifies the creation parameters for this window.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticNativeWindow.DestroyHandle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Destroys the window and its handle.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticNativeWindow.ReleaseHandle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases the handle associated with this window.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticNativeWindow.FromHandle(System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves the window associated with the specified handle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="handle">
 A handle to the window.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The <see cref="T:System.Windows.Forms.NativeWindow"/> associated with the specified handle.
 <para></para>
 This method returns null when the handle does not have an associated window.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticNativeWindow.GetLifeTimeService">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves the current lifetime service object that controls the lifetime policy for this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease"/> 
 used to control the lifetime policy for this instance.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticNativeWindow.InitializeLifeTimeService">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Obtains a lifetime service object to control the lifetime policy for this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease"/> 
 used to control the lifetime policy for this instance.
 <para></para>
 This is the current lifetime service object for this instance if one exists; 
 <para></para>
 otherwise, a new lifetime service object initialized to the value of the 
 <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"/> property.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticNativeWindow.CreateObjRef(System.Type)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates an object that contains all the relevant information to generate a proxy used to communicate with a remote object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="requestedType">
 The <see cref="T:System.Type"/> of the object that the new <see cref="T:System.Runtime.Remoting.ObjRef"/> will reference.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 Information required to generate a proxy.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticNativeWindow.DefWndProc(System.Windows.Forms.Message@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Invokes the default window procedure associated with this window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="m">
 The message that is currently being processed.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticNativeWindow.GetHashCode">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Serves as a hash function for a particular type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticNativeWindow.GetType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the <see cref="T:System.Type"/> of the current instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The exact runtime type of the current instance.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticNativeWindow.Equals(System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="obj">
 Another object to compare to.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified <see cref="T:System.Object"/> is equal to this instance; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticNativeWindow.Equals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are considered equal.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the objects are considered equal; otherwise, <see langword="False"/>.
 <para></para>
 If both <paramref name="objA"/> and <paramref name="objB"/> are <see langword="Nothing"/>, 
 the method returns <see langword="True"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticNativeWindow.ReferenceEquals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are the same instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if <paramref name="objA"/> is the same instance as <paramref name="objB"/> 
 or if both are <see langword="Nothing"/>; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticNativeWindow.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a String that represents the current object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A string that represents the current object.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Types.AestheticObject">
 ----------------------------------------------------------------------------------------------------
 <summary>
 This is a class to consume for aesthetic purposes.
 <para></para>
 A default (emptyness) class that inherits from <see cref="T:System.Object"/>, with these base members hidden:
 <para></para>
 <see cref="M:System.Object.GetHashCode"/>, <see cref="M:System.Object.GetType"/>, 
 <see cref="M:System.Object.Equals(System.Object)"/>, <see cref="M:System.Object.Equals(System.Object,System.Object)"/>,
 <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>, <see cref="M:System.Object.ToString"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticObject.GetHashCode">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Serves as a hash function for a particular type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticObject.GetType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the <see cref="T:System.Type"/> of the current instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The exact runtime type of the current instance.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticObject.Equals(System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="obj">
 Another object to compare to.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified <see cref="T:System.Object"/> is equal to this instance; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticObject.Equals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are considered equal.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the objects are considered equal; otherwise, <see langword="False"/>.
 <para></para>
 If both <paramref name="objA"/> and <paramref name="objB"/> are <see langword="Nothing"/>, 
 the method returns <see langword="True"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticObject.ReferenceEquals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are the same instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if <paramref name="objA"/> is the same instance as <paramref name="objB"/> 
 or if both are <see langword="Nothing"/>; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Types.AestheticObject.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a String that represents the current object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A string that represents the current object.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Cryptography.Enums.HexadecimalStyle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a style to represent an Hexadecimal value
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Cryptography.Enums.HexadecimalStyle.CSharp">
 <summary>
 C# Hexadecimal syntax.
 </summary>
</member>
<member name="F:Elektro.Core.Cryptography.Enums.HexadecimalStyle.VbNet">
 <summary>
 Visual Basic.Net Hexadecimal syntax.
 </summary>
</member>
<member name="T:Elektro.Core.Cryptography.Tools.CryptoUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains cryptography related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.Cryptography.Tools.CryptoUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.BinaryEncode(System.String,System.String,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Encodes a string using Binary codification.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim encoded As String = BinaryEncode("Hello World!", separator:="-")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="str">
 The string to encode.
 </param>
 
 <param name="separator">
 The string used to separate binary sequences.
 </param>
 
 <param name="enc">
 The text <see cref="T:System.Text.Encoding"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The encoded string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.BinaryDecode(System.String,System.String,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Decodes a string using Binary codification.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim decoded As String = BinaryDecode("01001000 01100101 01101100 01101100 01101111 00100000 01010111 01101111 01110010 01101100 01100100 00100001", separator:=" ")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="str">
 The string to decode.
 </param>
 
 <param name="enc">
 The text <see cref="T:System.Text.Encoding"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The decoded string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.HexadecimalEncode(System.String,System.String,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Encodes a string using Hexadecimal codification.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim encoded As String = HexadecimalEncode("Hello World!", separator:=" ")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="str">
 The string to encode.
 </param>
 
 <param name="separator">
 The string used to separate Hexadecimal sequences.
 </param>
 
 <param name="enc">
 The text <see cref="T:System.Text.Encoding"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The encoded string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.HexadecimalDecode(System.String,System.String,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Decodes a string using Hexadecimal codification.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim decoded As String = HexadecimalDecode("48 65 6c 6c 6f 20 57 6f 72 6c 64 21", separator:=" ")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="str">
 The string to decode.
 </param>
 
 <param name="separator">
 The string used to separate Hexadecimal sequences.
 </param>
 
 <param name="enc">
 The text <see cref="T:System.Text.Encoding"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The decoded string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.Base36Encode(System.Int64)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Encodes a number using Base36 codification.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim encoded As String = Base36Encode(1234567890) ' KF12OI
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="value">
 The number to encode.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The encoded string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.Base36Decode(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Decodes a string using Base36 codification.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim decoded As String = Base36Decode("KF12OI") ' 1234567890
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="str">
 The string to decode.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The decoded number.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.Base64Encode(System.String,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Encodes a string using Base64 codification.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim encoded As String = Base64Encode("Hello World!")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="str">
 The string to encode.
 </param>
 
 <param name="enc">
 The text <see cref="T:System.Text.Encoding"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The encoded string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.Base64Decode(System.String,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Decodes a string using Base64 codification.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim decoded As String = Base64Decode("SGVsbG8gV29ybGQh")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="str">
 The string to decode.
 </param>
 
 <param name="enc">
 The text <see cref="T:System.Text.Encoding"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The decoded string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.Base64DecodeAsImage(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Decodes a string encoded in Base64 to a <see cref="T:System.Drawing.Image"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="str">
 The source Base64 encoded string.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Drawing.Image"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.Base64DecodeAsBitmap(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Decodes a string encoded in Base64 to a <see cref="T:System.Drawing.Bitmap"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="str">
 The source Base64 encoded string.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Drawing.Bitmap"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.AtbashEncrypt(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Encrypts a string using Atbash substitution cipher.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim encrypted As String = AtbashEncrypt("Hello World!")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to encrypt.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The encrypted string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.AtbashDecrypt(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Decrypts a string using Atbash substitution cipher.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim encrypted As String = AtbashDecrypt("Svool Dliow!")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to decrypt.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The decrypted string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.CaesarEncrypt(System.String,System.Int32,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Encrypts a string using Caesar's substitution cipher.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim encrypted As String = CaesarEncrypt("Hello World!", positions:=15)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to encrypt.
 </param>
 
 <param name="positions">
 The character position shifting.
 </param>
 
 <param name="charSet">
 A set of characters to use in encoding.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The encrypted string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.CaesarDecrypt(System.String,System.Int32,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Decrypts a string using Caesar's substitution cipher.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim decrypted As String = CaesarDecrypt("WtAAD^ñDGAsg", positions:=15)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The encrypted text to decrypt.
 </param>
 
 <param name="positions">
 The character position shifting.
 </param>
 
 <param name="charSet">
 A set of characters to use in encoding.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The decrypted string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.AesEncrypt(System.String,System.String,System.Int32,System.Byte[],System.Security.Cryptography.CipherMode,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Encrypts a string using AES algorithm.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim encrypted As String = CryptoUtil.AesEncrypt("Hello World!", "my key", 256)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="str">
 The string to encrypt.
 </param>
 
 <param name="key">
 The encryption key.
 </param>
 
 <param name="size">
 The key size. 
 <para></para>
 <c>128</c>, <c>192</c> or <c>256</c> bits.
 </param>
 
 <param name="salt">
 The key salt.
 </param>
 
 <param name="mode">
 The AES encryption mode.
 </param>
 
 <param name="enc">
 The text <see cref="T:System.Text.Encoding"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The encrypted string.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 A value of 128, 192 or 256 is required for AES algorithm.;size
 or
 Salt should contain at least 8 bytes.;salt
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.AesDecrypt(System.String,System.String,System.Int32,System.Byte[],System.Security.Cryptography.CipherMode,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Decrypts a string using AES algorithm.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim decrypted As String = CryptoUtil.AesDecrypt("HHtV2WioKQ4b/999bytx9A==", "my key", 256)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="str">
 The string to decrypt.
 </param>
 
 <param name="key">
 The decryption key.
 </param>
 
 <param name="size">
 The key size. 
 <para></para>
 <c>128</c>, <c>192</c> or <c>256</c> bits.
 </param>
 
 <param name="salt">
 The key salt.
 </param>
 
 <param name="mode">
 The AES decryption mode.
 </param>
 
 <param name="enc">
 The text <see cref="T:System.Text.Encoding"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The decrypted string.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 A value of 128, 192 or 256 is required for AES algorithm.;size
 or
 Salt should contain at least 8 bytes.;salt
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.HexadecimalConvert``1(System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts an Hexadecimal value to its corresponding representation of the specified <see cref="T:System.Type"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As Integer = HexadecimalConvert(Of Integer)("0x0200")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The datatype.
 <para></para>
 Only <see cref="T:System.Byte"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt16"/>
 <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Int64"/> ans <see cref="T:System.UInt64"/> are supported.
 </typeparam>
 
 <param name="value">
 The Hexadecimal value.
 </param>
 
 <param name="separator">
 The string used to separate Hexadecimal sequences.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting value.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Not a valid datatype.;T
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.HexadecimalConvert(Elektro.Core.Cryptography.Enums.HexadecimalStyle,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts an Hexadecimal value to its corresponding representation in the specified language syntax.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As String = HexadecimalConvert(HexadecimalStyle.CSharp, "48 65 6C 6C 6F 20 57")
 Dim value As String = HexadecimalConvert(HexadecimalStyle.VbNet, "48 65 6C 6C 6F 20 57")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="style">
 The <see cref="T:Elektro.Core.Cryptography.Enums.HexadecimalStyle"/> to represent the Hexadecimal value.
 </param>
 
 <param name="value">
 The Hexadecimal value.
 </param>
 
 <param name="separator">
 The string used to separate Hexadecimal sequences.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting value.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 style
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Cryptography.Tools.CryptoUtil.rand">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A <see cref="T:System.Random"/> instance to generate random secuences of numbers.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.GetRandomString(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates a random alphanumeric string of the specified lenth.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As String = GetRandomString(length:=5)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="length">
 The string length.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting string.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Positive value is required.;length
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.GetRandomHex(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates a random hexadecimal string of the specified lenth.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As String = GetRandomHex(length:=5)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="length">
 The string length.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting string.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Positive value is required.;length
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.GetRandomNumber(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates a random numeric value of the specified lenth.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As String = GetRandomNumber(length:=5)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="length">
 The number length.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting numeric value.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Positive value is required.;length
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.GetRandomPassword(System.Int32,System.Int32,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates a random alphanumeric password of the specified amount of secuences delimited by a separator.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim pass As String = GetRandomPassword(secuences:=4, length:=5, separator:="-")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="secuences">
 The amount of secuences.
 </param>
 
 <param name="length">
 The secuence length.
 </param>
 
 <param name="separator">
 The string used to separate the secuences.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting password.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Positive value is required.;secuences
 or
 Positive value is required.;length
 </exception>
 
 <exception cref="T:System.ArgumentNullException">
 separator
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.GetRandomHexPassword(System.Int32,System.Int32,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates a random hexadecimal password of the specified amount of secuences delimited by a separator.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim pass As String = GetRandomHexPassword(secuences:=4, length:=5, separator:="-")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="secuences">
 The amount of secuences.
 </param>
 
 <param name="length">
 The secuence length.
 </param>
 
 <param name="separator">
 The string used to separate the secuences.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting password.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Positive value is required.;secuences
 or
 Positive value is required.;length
 </exception>
 
 <exception cref="T:System.ArgumentNullException">
 separator
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.GetRandomNumericPassword(System.Int32,System.Int32,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates a random numeric password of the specified amount of secuences delimited by a separator.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim pass As String = GetRandomNumericPassword(secuences:=4, length:=5, separator:="-")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="secuences">
 The amount of secuences.
 </param>
 
 <param name="length">
 The secuence length.
 </param>
 
 <param name="separator">
 The string used to separate the secuences.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting password.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Positive value is required.;secuences
 or
 Positive value is required.;length
 </exception>
 
 <exception cref="T:System.ArgumentNullException">
 separator
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Cryptography.Tools.CryptoUtil.base64Characters">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The valid <c>Base64</c> characters.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.IsBase64Encoded(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source string has been <c>Base64</c> encoded.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim isEncoded As String = IsBase64Encoded("SGVsbG8gV29ybGQh")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="value">
 The string to analyze.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the source string has been <c>Base64</c> encoded, otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.ComputeHashOfString``1(System.String,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Computes the hash, using the given hash algorithm, for the specified string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim md5 As String = ComputeHashOfString(Of MD5CryptoServiceProvider)("Hello World!")
 Dim sha1 As String = ComputeHashOfString(Of SHA1CryptoServiceProvider)("Hello World!")
 Dim sha256 As String = ComputeHashOfString(Of SHA256CryptoServiceProvider)("Hello World!")
 Dim sha384 As String = ComputeHashOfString(Of SHA384CryptoServiceProvider)("Hello World!")
 Dim sha512 As String = ComputeHashOfString(Of SHA512CryptoServiceProvider)("Hello World!")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The <see cref="T:System.Security.Cryptography.HashAlgorithm"/> provider.
 </typeparam>
 
 <param name="str">
 The string.
 </param>
 
 <param name="enc">
 The text <see cref="T:System.Text.Encoding"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An Hexadecimal representation of the resulting hash value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Cryptography.Tools.CryptoUtil.ComputeHashOfFile``1(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Computes the hash, using the given hash algorithm, for the specified file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim md5 As String = ComputeHashOfFile(Of MD5CryptoServiceProvider)("C:\File.ext")
 Dim sha1 As String = ComputeHashOfFile(Of SHA1CryptoServiceProvider)("C:\File.ext")
 Dim sha256 As String = ComputeHashOfFile(Of SHA256CryptoServiceProvider)("C:\File.ext")
 Dim sha384 As String = ComputeHashOfFile(Of SHA384CryptoServiceProvider)("C:\File.ext")
 Dim sha512 As String = ComputeHashOfFile(Of SHA512CryptoServiceProvider)("C:\File.ext")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The <see cref="T:System.Security.Cryptography.HashAlgorithm"/> provider.
 </typeparam>
 
 <param name="filepath">
 The filepath.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An Hexadecimal representation of the resulting hash value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Tools.JunkCodeUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains Junk-code related utilites.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Tools.JunkCodeUtil.rand">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A <see cref="T:System.Random"/> instance to generate random secuences of numbers.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Tools.JunkCodeUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.Tools.JunkCodeUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Tools.JunkCodeUtil.GenerateJunkField``1">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates a junk-code Field of the specified <see cref="T:System.Type"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The <see cref="T:System.Type"/> of the Field.
 </typeparam>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting Field.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.NotSupportedException">
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Tools.JunkCodeUtil.GenerateJunkMethod(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates a junk-code method.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="parameterCount">
 The amount of parameters to generate.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting method.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Tools.JunkCodeUtil.GenerateJunkFunction(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates a junk-code function.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="parameterCount">
 The amount of parameters to generate.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting function.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Tools.JunkCodeUtil.GenerateJunkClass(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates a junk-code class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="blockCount">
 The amount of method blocks to generate.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting class.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Tools.JunkCodeUtil.GenerateJunkModule(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates a junk-code module.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="blockCount">
 The amount of method blocks to generate.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting module.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Tools.JunkCodeUtil.GenerateJunkClassName">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates a junk-code class name.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting class name.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Tools.JunkCodeUtil.GenerateJunkModuleName">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates a junk-code module name.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting module name.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Tools.JunkCodeUtil.GenerateJunkFieldName">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates a junk-code field name.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting field name.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Tools.JunkCodeUtil.GenerateJunkMethodName">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates a junk-code method name.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting method name.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Tools.JunkCodeUtil.GenerateJunkFunctionName">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates a junk-code function name.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting function name.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Tools.JunkCodeUtil.GenerateJunkParameterName">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates a junk-code parameter name.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting parameter name.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Tools.JunkCodeUtil.GenerateJunkString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates a junk-code string value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Maths.Tools.CombinatoricsUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains combinatorics (Combinations, Permutations, Variations) related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Tools.CombinatoricsUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.Maths.Tools.CombinatoricsUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Tools.CombinatoricsUtil.PermuteCharacters(System.Collections.Generic.IEnumerable{System.Char},System.Int32,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generates all the permutations of the specified string-length using the given character set.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim permutations As IEnumerable(Of String) = PermuteCharacters("0123456789", 3, allowRepetition:=True)
 For Each value As String In permutations
     Debug.WriteLine(value)
 Next value
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="charSet">
 The character set.
 </param>
 
 <param name="length">
 The permuation length.
 </param>
 
 <param name="allowRepetition">
 If set to <see langword="True"/>, character repetition is allowed when generating the permutations.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the resulting permutations.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Char-set contains duplicated characters.;charSet
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Maths.Tools.MetaCollectionPrimeUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Utility class that maintains a small table of prime numbers and 
 provides simple implementations of <c>Prime Factorization</c> algorithms.  
 <para></para>
 This is a quick and dirty utility class to support calculations of permutation sets with indexes under <c>2^31</c>.
 <para></para>
 The prime table contains all primes up to <c>Sqrt(2^31)</c> which are all of the primes 
 requires to factorize any positive <see cref="T:System.Int32"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Maths.Tools.MetaCollectionPrimeUtil.PrimeTable">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a List of all primes from <c>2</c> to <c>2^16</c>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 A List of all primes from <c>2</c> to <c>2^16</c>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Maths.Tools.MetaCollectionPrimeUtil.primeTableB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A List of all primes from <c>2</c> to <c>2^16</c>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Tools.MetaCollectionPrimeUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.Maths.Tools.MetaCollectionPrimeUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Tools.MetaCollectionPrimeUtil.#cctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes static members of the <see cref="T:Elektro.Core.Maths.Tools.MetaCollectionPrimeUtil"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Tools.MetaCollectionPrimeUtil.Factor(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs a prime factorization of a given integer using the table of primes in <see cref="P:Elektro.Core.Maths.Tools.MetaCollectionPrimeUtil.PrimeTable"/>.
 <para></para>
 Since this will only factor sized <see cref="T:System.Int32"/>s, a simple list of factors is returned instead
 of the more scalable, but more difficult to consume, list of primes and associated exponents.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="i">
 The number to factorize, must be positive.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A list of factors.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Tools.MetaCollectionPrimeUtil.MultiplyPrimeFactors(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Given two integers expressed as a list of prime factors, multiplies these numbers
 together and returns an integer also expressed as a set of prime factors.
 <para></para>
 This allows multiplication to overflow well beyond a <see cref="T:System.Int64"/> if necessary.  
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="lhs">
 Left Hand Side argument, expressed as list of prime factors.
 </param>
 
 <param name="rhs">
 Right Hand Side argument, expressed as list of prime factors.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 Product, expressed as list of prime factors.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Tools.MetaCollectionPrimeUtil.DividePrimeFactors(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Given two integers expressed as a list of prime factors, divides these numbers
 and returns an integer also expressed as a set of prime factors.
 <para></para>
 If the result is not a <see cref="T:System.Int32"/>, then the result is undefined.
 That is, <c>11 / 5</c> when divided by this function will not yield a correct result.
 <para></para>
 As such, this function is ONLY useful for division with combinatorial results where 
 the result is known to be an <see cref="T:System.Int32"/> AND the division occurs as the last operation(s).
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="numerator">
 Numerator argument, expressed as list of prime factors.
 </param>
 
 <param name="denominator">
 Denominator argument, expressed as list of prime factors.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 Resultant, expressed as list of prime factors.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Tools.MetaCollectionPrimeUtil.EvaluatePrimeFactors(System.Collections.Generic.IList{System.Int32})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Given a list of prime factors returns the <see cref="T:System.Int64"/> representation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="value">
 Integer, expressed as list of prime factors.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 Standard long representation.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Tools.MetaCollectionPrimeUtil.CalculatePrimes">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Calculate all primes up to <c>Sqrt(2^32) = 2^16</c>.
 <para></para>
 This table will be large enough for all factorizations for <see cref="T:System.Int32"/>s.
 <para></para>
 Small tables are best built using the Sieve Of Eratosthenes.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 Reference: <see href="http://primes.utm.edu/glossary/page.php?sort=SieveOfEratosthenes"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Maths.Tools.MathUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains mathematic related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Tools.MathUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.Maths.Tools.MathUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Tools.MathUtil.ConvertSize(System.Double,Elektro.Core.IO.Enums.SizeUnits,Elektro.Core.IO.Enums.SizeUnits)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Convert between sizes based in bytes.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim byteToByte As Double = MathUtil.Convertsize(92928374, SizeUnits.Byte, SizeUnits.Byte)
 Dim byteToKb As Double = MathUtil.Convertsize(92928374, SizeUnits.Byte, SizeUnits.Kilobyte)
 Dim byteToMb As Double = MathUtil.Convertsize(92928374, SizeUnits.Byte, SizeUnits.Megabyte)
 Console.WriteLine(String.Format("92928374 bytes = {0} Bytes", byteToByte.ToString("n0"))) ' Result: 92.928.374 Bytes
 Console.WriteLine(String.Format("92928374 bytes = {0} KB", byteToKb.ToString("n2"))) ' Result: 90.750,37 KB
 Console.WriteLine(String.Format("92928374 bytes = {0} MB", byteToMb.ToString("n2"))) ' Result: 88,62 MB
 
 Dim gbToByte As Double = MathUtil.Convertsize(50, SizeUnits.Gigabyte, SizeUnits.Byte)
 Dim gbToKb As Double = MathUtil.Convertsize(50, SizeUnits.Gigabyte, SizeUnits.Kilobyte)
 Dim gbToMb As Double = MathUtil.Convertsize(50, SizeUnits.Gigabyte, SizeUnits.Megabyte)
 Console.WriteLine(String.Format("50 GB = {0} Bytes", gbToByte.ToString("n2"))) ' Result: 53.687.091.200,00 Bytes
 Console.WriteLine(String.Format("50 GB = {0} KB", gbToKb.ToString("n2"))) ' Result: 52.428.800,00 KB
 Console.WriteLine(String.Format("50 GB = {0} MB", gbToMb.ToString("n2"))) ' Result: 51.200,00 MB
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="size">
 The source size to convert.
 </param>
 
 <param name="fromUnit">
 From unit of size.
 </param>
 
 <param name="toUnit">
 To unit of size.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting value of the size conversion.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Tools.MathUtil.ConvertSizeToDiscStorage(System.Double,Elektro.Core.IO.Enums.SizeUnits,Elektro.Core.IO.Enums.DiscType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts a size to a disc-storage size.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim size As Double = 6.5 ' Gigabytes.
 Dim dvdSize As Double = ConvertSizeToDiscStorage(6.5, SizeUnits.Gigabyte, DiscType.Dvd)
 Console.WriteLine(String.Format("To write {0} GB you need to burn {1} DVDs.", size, Math.Ceiling(dvdSize)))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="size">
 The source size to convert.
 </param>
 
 <param name="fromSizeUnit">
 From unit of size.
 </param>
 
 <param name="toDiscType">
 To disc-storage size.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting value of the size conversion.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Maths.Enums.MetaCollectionType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies whether or not a <see cref="T:Elektro.Core.Maths.Types.CombinationCollection`1"/> 
 or <see cref="T:Elektro.Core.Maths.Types.PermutationCollection`1"/> 
 meta-collections will generate repetition sets.  
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Maths.Enums.MetaCollectionType.WithoutRepetition">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Do not generate additional sets.
 <para></para>
 This is the typical implementation.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Maths.Enums.MetaCollectionType.WithRepetition">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Generate additional sets even if repetition is required.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Maths.Extensions.Decimal.DecimalExtensions">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Decimal"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Decimal.DecimalExtensions.PercentageOf(System.Decimal,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Given a total number, calculates which percentage of is the source value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As Decimal = CDec(10D.PercentageOf(50D))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="total">
 The total value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The percentage value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Decimal.DecimalExtensions.FractionBy(System.Decimal,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Takes a fraction of the source value that corresponds to the given percent value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As Decimal = CDec(10D.FractionBy(50D))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="percentage">
 The percentage to fractionize by.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The fraction value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Decimal.DecimalExtensions.IsPositive(System.Decimal)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a positive number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10D.IsPositive()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a positive number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Decimal.DecimalExtensions.IsNegative(System.Decimal)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a negative number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10D.IsNegative()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a negative number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Decimal.DecimalExtensions.IsDivisibleBy(System.Decimal,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is divisible by the given value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10D.IsDivisibleBy(5D)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value to divide by.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is divisible, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Decimal.DecimalExtensions.IsMultipleOf(System.Decimal,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is a multiple of the given value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10D.IsMultipleOf(5D)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a multiple, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Decimal.DecimalExtensions.IsInRangeOf(System.Decimal,System.Double,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is in range of the given <paramref name="min"/> and <paramref name="max"/> values.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10.0D.IsInRangeOf(min:=1.0D, max:=100.0D)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="min">
 The minimum value of the range.
 </param>
 
 <param name="max">
 The maximum value of the range.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is in range, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Decimal.DecimalExtensions.IsEven(System.Decimal)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a even number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10D.IsEven()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a even number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Decimal.DecimalExtensions.IsOdd(System.Decimal)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a odd number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10D.IsOdd()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a odd number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Decimal.DecimalExtensions.DifferenceOf(System.Decimal,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the difference between the source value and the specified value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As Decimal = CDec(10.0D.DifferenceOf(100.0D))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The difference.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Decimal.DecimalExtensions.Formatted(System.Decimal,System.Int32,System.Globalization.CultureInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Formats a value by placing dots or commas in the corresponding positions depending on the specified culture.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim number As String = 10000D.Formatted(precision:=0, culture:=CultureInfo.GetCultureInfo("en-US"))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="precision">
 The decimals precision.
 </param>
 
 <param name="culture">
 The culture format.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The formatted value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Maths.Extensions.Double.DoubleExtensions">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Double"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Double.DoubleExtensions.Formatted(System.Double,System.Int32,System.Globalization.CultureInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Formats a value by placing dots or commas in the corresponding positions depending on the specified culture.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim number As String = 10000.0R.Formatted(precision:=0, culture:=CultureInfo.GetCultureInfo("en-US"))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="precision">
 The decimals precision.
 </param>
 
 <param name="culture">
 The culture format.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The formatted value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Double.DoubleExtensions.PercentageOf(System.Double,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Given a total number, calculates which percentage of is the source value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As Double = 10.0R.PercentageOf(50.0R)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="total">
 The total value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The percentage value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Double.DoubleExtensions.FractionBy(System.Double,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Takes a fraction of the source value that corresponds to the given percent value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As Double = 10.0R.FractionBy(50.0R)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="percentage">
 The percentage to fractionize by.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The fraction value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Double.DoubleExtensions.IsPositive(System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a positive number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10.0R.IsPositive()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a positive number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Double.DoubleExtensions.IsNegative(System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a negative number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10.0R.IsNegative()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a negative number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Double.DoubleExtensions.IsDivisibleBy(System.Double,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is divisible by the given value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10.0R.IsDivisibleBy(5.0R)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value to divide by.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is divisible, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Double.DoubleExtensions.IsMultipleOf(System.Double,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is a multiple of the given value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10.0R.IsMultipleOf(5.0R)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a multiple, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Double.DoubleExtensions.IsInRangeOf(System.Double,System.Double,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is in range of the given <paramref name="min"/> and <paramref name="max"/> values.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10.0R.IsInRangeOf(min:=1.0R, max:=100.0R)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="min">
 The minimum value of the range.
 </param>
 
 <param name="max">
 The maximum value of the range.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is in range, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Double.DoubleExtensions.IsEven(System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a even number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10.0R.IsEven()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a even number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Double.DoubleExtensions.IsOdd(System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a odd number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10.0R.IsOdd()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a odd number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Double.DoubleExtensions.DifferenceOf(System.Double,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the difference between the source value and the specified value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As Double = 10.DifferenceOf(100)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The difference.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Maths.Extensions.Integer.IntegerExtensions">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Int32"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Integer.IntegerExtensions.PercentageOf(System.Int32,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Given a total number, calculates which percentage of is the source value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As Integer = CInt(10I.PercentageOf(50I))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="total">
 The total value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The percentage value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Integer.IntegerExtensions.FractionBy(System.Int32,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Takes a fraction of the source value that corresponds to the given percent value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As Integer = CInt(10I.FractionBy(50I))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="percentage">
 The percentage to fractionize by.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The fraction value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Integer.IntegerExtensions.IsPositive(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a positive number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10I.IsPositive()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a positive number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Integer.IntegerExtensions.IsNegative(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a negative number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10I.IsNegative()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a negative number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Integer.IntegerExtensions.IsPrime(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is a prime number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10I.IsPrime()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is prime, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Integer.IntegerExtensions.IsDivisibleBy(System.Int32,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is divisible by the given value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10I.IsDivisibleBy(5I)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value to divide by.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is divisible, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Integer.IntegerExtensions.IsMultipleOf(System.Int32,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is a multiple of the given value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10I.IsMultipleOf(5I)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a multiple, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Integer.IntegerExtensions.IsInRangeOf(System.Int32,System.Double,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is in range of the given <paramref name="min"/> and <paramref name="max"/> values.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10I.IsInRangeOf(min:=1I, max:=100I)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="min">
 The minimum value of the range.
 </param>
 
 <param name="max">
 The maximum value of the range.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is in range, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Integer.IntegerExtensions.IsEven(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a even number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10I.IsEven()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a even number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Integer.IntegerExtensions.IsOdd(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a odd number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10I.IsOdd()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a odd number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Integer.IntegerExtensions.DifferenceOf(System.Int32,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the difference between the source value and the specified value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As Integer = CInt(10I.DifferenceOf(100I))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The difference.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Integer.IntegerExtensions.ToVBHex(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts a value to its Visual Basic literal Hexadecimal representation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbHex As String = 10I.ToVBHex()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The Hexadecimal value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Integer.IntegerExtensions.ToCSharpHex(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts a value to its C# literal Hexadecimal representation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbHex As String = 10I.ToCSharpHex()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The Hexadecimal value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Integer.IntegerExtensions.Formatted(System.Int32,System.Int32,System.Globalization.CultureInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Formats a value by placing dots or commas in the corresponding positions depending on the specified culture.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim number As String = 10000I.Formatted(precision:=0, culture:=CultureInfo.GetCultureInfo("en-US"))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="precision">
 The decimals precision.
 </param>
 
 <param name="culture">
 The culture format.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The formatted value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Maths.Extensions.Long.LongExtensions">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Int64"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Long.LongExtensions.PercentageOf(System.Int64,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Given a total number, calculates which percentage of is the source value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As Long = CLng(10L.PercentageOf(50L))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="total">
 The total value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The percentage value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Long.LongExtensions.FractionBy(System.Int64,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Takes a fraction of the source value that corresponds to the given percent value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As Long = CLng(10L.FractionBy(50L))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="percentage">
 The percentage to fractionize by.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The fraction value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Long.LongExtensions.IsPositive(System.Int64)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a positive number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10L.IsPositive()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a positive number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Long.LongExtensions.IsNegative(System.Int64)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a negative number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10L.IsNegative()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a negative number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Long.LongExtensions.IsPrime(System.Int64)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is a prime number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10L.IsPrime()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is prime, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Long.LongExtensions.IsDivisibleBy(System.Int64,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is divisible by the given value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10L.IsDivisibleBy(5L)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value to divide by.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is divisible, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Long.LongExtensions.IsMultipleOf(System.Int64,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is a multiple of the given value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10L.IsMultipleOf(5L)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a multiple, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Long.LongExtensions.IsInRangeOf(System.Int64,System.Double,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is in range of the given <paramref name="min"/> and <paramref name="max"/> values.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10L.IsInRangeOf(min:=1L, max:=100L)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="min">
 The minimum value of the range.
 </param>
 
 <param name="max">
 The maximum value of the range.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is in range, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Long.LongExtensions.IsEven(System.Int64)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a even number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10L.IsEven()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a even number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Long.LongExtensions.IsOdd(System.Int64)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a odd number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10L.IsOdd()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a odd number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Long.LongExtensions.DifferenceOf(System.Int64,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the difference between the source value and the specified value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As Long = CLng(10L.DifferenceOf(100L))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The difference.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Long.LongExtensions.ToVBHex(System.Int64)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts a value to its Visual Basic literal Hexadecimal representation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbHex As String = 10L.ToVBHex()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The Hexadecimal value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Long.LongExtensions.ToCSharpHex(System.Int64)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts a value to its C# literal Hexadecimal representation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim csharpHex As String = 10L.ToCSharpHex()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The Hexadecimal value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Long.LongExtensions.Formatted(System.Int64,System.Int32,System.Globalization.CultureInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Formats a value by placing dots or commas in the corresponding positions depending on the specified culture.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim number As String = 10000L.Formatted(precision:=0, culture:=CultureInfo.GetCultureInfo("en-US"))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="precision">
 The decimals precision.
 </param>
 
 <param name="culture">
 The culture format.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The formatted value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Maths.Extensions.NumericExtensions">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Int16"/>, <see cref="T:System.UInt16"/>, 
 <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.UInt64"/>, 
 <see cref="T:System.Decimal"/>, <see cref="T:System.Single"/> and <see cref="T:System.Double"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.NumericExtensions.InternalGetPercentageOf(System.Double,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Given a total number, calculates which percentage of is the value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="value">
 The source value.
 </param>
 
 <param name="total">
 The total value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The percentage value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.NumericExtensions.InternalFractionBy(System.Double,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Takes a fraction of the source value that corresponds to the given percent value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="total">
 The total value.
 </param>
 
 <param name="percent">
 The percentage to take from the <paramref name="total"/> value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The fraction value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.NumericExtensions.InternalIsPositive(System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a value is a positive number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a positive number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.NumericExtensions.InternalIsEven(System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a value is a even number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a even number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.NumericExtensions.InternalIsOdd(System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a value is a odd number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a odd number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.NumericExtensions.InternalIsNegative(System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a value is a negative number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a negative number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.NumericExtensions.InternalIsPrime(System.Int64)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is a prime number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 Source taken from: <see href="http://www.dotnetperls.com/prime"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is prime, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.NumericExtensions.InternalIsDivisibleBy(System.Double,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is a divisible by the given value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="source">
 The source value.
 </param>
 
 <param name="value">
 The value to divide by.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is divisible, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.NumericExtensions.InternalIsMultipleOf(System.Double,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is a multiple of the given value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="source">
 The source value.
 </param>
 
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a multiple, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.NumericExtensions.InternalIsInRangeOf(System.Double,System.Double,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is in range of the given <paramref name="min"/> and <paramref name="max"/> values.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="source">
 The source value.
 </param>
 
 <param name="min">
 The minimum value of the range.
 </param>
 
 <param name="max">
 The maximum value of the range.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is in range, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.NumericExtensions.InternalDifferenceOf(System.Double,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the difference between the source value and the specified value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="source">
 The source value.
 </param>
 
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The difference.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.NumericExtensions.InternalFormatted(System.Double,System.Int32,System.Globalization.CultureInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Formats a value by placing dots or commas in the corresponding positions depending on the specified culture.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="precision">
 The decimals precision.
 </param>
 
 <param name="culture">
 The culture format.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The formatted value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Maths.Extensions.Short.ShortExtensions">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Int16"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Short.ShortExtensions.ToVBHex(System.Int16)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts a value to its Visual Basic literal Hexadecimal representation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbHex As String = 10S.ToVBHex()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The Hexadecimal value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Short.ShortExtensions.ToCSharpHex(System.Int16)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts a value to its C# literal Hexadecimal representation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbHex As String = 10S.ToCSharpHex()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The Hexadecimal value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Short.ShortExtensions.Formatted(System.Int16,System.Int32,System.Globalization.CultureInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Formats a value by placing dots or commas in the corresponding positions depending on the specified culture.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim number As String = 10000S.Formatted(precision:=0, culture:=CultureInfo.GetCultureInfo("en-US"))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="precision">
 The decimals precision.
 </param>
 
 <param name="culture">
 The culture format.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The formatted value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Short.ShortExtensions.PercentageOf(System.Int16,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Given a total number, calculates which percentage of is the source value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As Short = CShort(10S.PercentageOf(50S))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="total">
 The total value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The percentage value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Short.ShortExtensions.FractionBy(System.Int16,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Takes a fraction of the source value that corresponds to the given percent value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As Short = CShort(10S.FractionBy(50S))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="percentage">
 The percentage to fractionize by.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The fraction value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Short.ShortExtensions.IsNegative(System.Int16)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a negative number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10S.IsNegative()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a negative number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Short.ShortExtensions.IsPrime(System.Int16)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is a prime number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10S.IsPrime()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is prime, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Short.ShortExtensions.IsDivisibleBy(System.Int16,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is divisible by the given value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10S.IsDivisibleBy(5S)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value to divide by.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is divisible, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Short.ShortExtensions.IsMultipleOf(System.Int16,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is a multiple of the given value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10S.IsMultipleOf(5S)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a multiple, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Short.ShortExtensions.IsInRangeOf(System.Int16,System.Double,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is in range of the given <paramref name="min"/> and <paramref name="max"/> values.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10S.IsInRangeOf(min:=1S, max:=100S)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="min">
 The minimum value of the range.
 </param>
 
 <param name="max">
 The maximum value of the range.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is in range, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Short.ShortExtensions.IsEven(System.Int16)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a even number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10S.IsEven()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a even number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Short.ShortExtensions.IsOdd(System.Int16)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a odd number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10S.IsOdd()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a odd number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Short.ShortExtensions.DifferenceOf(System.Int16,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the difference between the source value and the specified value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As Short = CShort(10S.DifferenceOf(100S))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The difference.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Short.ShortExtensions.IsPositive(System.Int16)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a positive number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10S.IsPositive()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a positive number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Maths.Extensions.Single.SingleExtensions">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Single"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Single.SingleExtensions.DifferenceOf(System.Single,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the difference between the source value and the specified value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As Single = CSng(10.0F.DifferenceOf(100.0F))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The difference.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Single.SingleExtensions.Formatted(System.Single,System.Int32,System.Globalization.CultureInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Formats a value by placing dots or commas in the corresponding positions depending on the specified culture.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim number As String = 10000.0F.Formatted(precision:=0, culture:=CultureInfo.GetCultureInfo("en-US"))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="precision">
 The decimals precision.
 </param>
 
 <param name="culture">
 The culture format.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The formatted value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Single.SingleExtensions.PercentageOf(System.Single,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Given a total number, calculates which percentage of is the source value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As Single = CSng(10.0F.PercentageOf(50.0F))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="total">
 The total value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The percentage value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Single.SingleExtensions.FractionBy(System.Single,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Takes a fraction of the source value that corresponds to the given percent value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As Single = CSng(10.0F.FractionBy(50.0F))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="percentage">
 The percentage to fractionize by.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The fraction value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Single.SingleExtensions.IsPositive(System.Single)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a positive number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10.0F.IsPositive()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a positive number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Single.SingleExtensions.IsNegative(System.Single)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a negative number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10.0F.IsNegative()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a negative number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Single.SingleExtensions.IsDivisibleBy(System.Single,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is divisible by the given value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10.0F.IsDivisibleBy(5.0F)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value to divide by.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is divisible, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Single.SingleExtensions.IsMultipleOf(System.Single,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is a multiple of the given value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10.0F.IsMultipleOf(5.0F)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a multiple, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Single.SingleExtensions.IsInRangeOf(System.Single,System.Double,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is in range of the given <paramref name="min"/> and <paramref name="max"/> values.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10.0F.IsInRangeOf(min:=1.0F, max:=100.0F)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="min">
 The minimum value of the range.
 </param>
 
 <param name="max">
 The maximum value of the range.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is in range, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Single.SingleExtensions.IsEven(System.Single)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a even number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10.0F.IsEven()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a even number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.Single.SingleExtensions.IsOdd(System.Single)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a odd number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10.0F.IsOdd()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a odd number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Maths.Extensions.UInteger.UIntegerExtensions">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.UInt32"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UInteger.UIntegerExtensions.DifferenceOf(System.UInt32,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the difference between the source value and the specified value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As UInteger = CUInt(10UI.DifferenceOf(100UI))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The difference.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UInteger.UIntegerExtensions.ToVBHex(System.UInt32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts a value to its Visual Basic literal Hexadecimal representation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbHex As String = 10UI.ToVBHex()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The Hexadecimal value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UInteger.UIntegerExtensions.ToCSharpHex(System.UInt32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts a value to its C# literal Hexadecimal representation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbHex As String = 10UI.ToCSharpHex()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The Hexadecimal value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UInteger.UIntegerExtensions.Formatted(System.UInt32,System.Int32,System.Globalization.CultureInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Formats a value by placing dots or commas in the corresponding positions depending on the specified culture.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim number As String = 10000UI.Formatted(precision:=0, culture:=CultureInfo.GetCultureInfo("en-US"))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="precision">
 The decimals precision.
 </param>
 
 <param name="culture">
 The culture format.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The formatted value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UInteger.UIntegerExtensions.PercentageOf(System.UInt32,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Given a total number, calculates which percentage of is the source value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As UInteger = CUInt(10UI.PercentageOf(50UI))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="total">
 The total value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The percentage value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UInteger.UIntegerExtensions.FractionBy(System.UInt32,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Takes a fraction of the source value that corresponds to the given percent value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As UInteger = CUInt(10UI.FractionBy(50UI))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="percentage">
 The percentage to fractionize by.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The fraction value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UInteger.UIntegerExtensions.IsPositive(System.UInt32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a positive number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10UI.IsPositive()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a positive number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UInteger.UIntegerExtensions.IsNegative(System.UInt32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a negative number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10UI.IsNegative()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a negative number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UInteger.UIntegerExtensions.IsPrime(System.UInt32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is a prime number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10UI.IsPrime()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is prime, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UInteger.UIntegerExtensions.IsDivisibleBy(System.UInt32,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is divisible by the given value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10UI.IsDivisibleBy(5UI)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value to divide by.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is divisible, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UInteger.UIntegerExtensions.IsMultipleOf(System.UInt32,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is a multiple of the given value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10UI.IsMultipleOf(5UI)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a multiple, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UInteger.UIntegerExtensions.IsInRangeOf(System.UInt32,System.Double,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is in range of the given <paramref name="min"/> and <paramref name="max"/> values.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10UI.IsInRangeOf(min:=1UI, max:=100UI)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="min">
 The minimum value of the range.
 </param>
 
 <param name="max">
 The maximum value of the range.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is in range, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UInteger.UIntegerExtensions.IsEven(System.UInt32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a even number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10UI.IsEven()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a even number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UInteger.UIntegerExtensions.IsOdd(System.UInt32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a odd number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10UI.IsOdd()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a odd number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Maths.Extensions.ULong.ULongExtensions">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.UInt64"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.ULong.ULongExtensions.IsOdd(System.UInt64)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a odd number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10UL.IsOdd()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a odd number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.ULong.ULongExtensions.DifferenceOf(System.UInt64,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the difference between the source value and the specified value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As ULong = CULng(10UL.DifferenceOf(100UL))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The difference.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.ULong.ULongExtensions.Formatted(System.UInt64,System.Int32,System.Globalization.CultureInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Formats a value by placing dots or commas in the corresponding positions depending on the specified culture.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim number As String = 10000UL.Formatted(precision:=0, culture:=CultureInfo.GetCultureInfo("en-US"))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="precision">
 The decimals precision.
 </param>
 
 <param name="culture">
 The culture format.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The formatted value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.ULong.ULongExtensions.PercentageOf(System.UInt64,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Given a total number, calculates which percentage of is the source value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As ULong = CULng(10UL.PercentageOf(50UL))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="total">
 The total value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The percentage value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.ULong.ULongExtensions.FractionBy(System.UInt64,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Takes a fraction of the source value that corresponds to the given percent value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As ULong = CULng(10UL.FractionBy(50UL))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="percentage">
 The percentage to fractionize by.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The fraction value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.ULong.ULongExtensions.IsPositive(System.UInt64)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a positive number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10UL.IsPositive()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a positive number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.ULong.ULongExtensions.IsNegative(System.UInt64)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a negative number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10UL.IsNegative()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a negative number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.ULong.ULongExtensions.IsDivisibleBy(System.UInt64,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is divisible by the given value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10UL.IsDivisibleBy(5UL)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value to divide by.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is divisible, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.ULong.ULongExtensions.IsMultipleOf(System.UInt64,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is a multiple of the given value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10UL.IsMultipleOf(5UL)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a multiple, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.ULong.ULongExtensions.IsInRangeOf(System.UInt64,System.Double,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is in range of the given <paramref name="min"/> and <paramref name="max"/> values.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10UL.IsInRangeOf(min:=1UL, max:=100UL)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="min">
 The minimum value of the range.
 </param>
 
 <param name="max">
 The maximum value of the range.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is in range, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.ULong.ULongExtensions.IsEven(System.UInt64)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a even number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10UL.IsEven()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a even number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Maths.Extensions.UShort.UShortExtensions">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.UInt16"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UShort.UShortExtensions.IsOdd(System.UInt16)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a odd number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10US.IsOdd()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a odd number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UShort.UShortExtensions.DifferenceOf(System.UInt16,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the difference between the source value and the specified value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As UShort = CUShort(10US.DifferenceOf(100US))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The difference.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UShort.UShortExtensions.ToVBHex(System.UInt16)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts a value to its Visual Basic literal Hexadecimal representation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbHex As String = 10US.ToVBHex()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The Hexadecimal value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UShort.UShortExtensions.ToCSharpHex(System.UInt16)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts a value to its C# literal Hexadecimal representation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim vbHex As String = 10US.ToCSharpHex()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The Hexadecimal value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UShort.UShortExtensions.Formatted(System.UInt16,System.Int32,System.Globalization.CultureInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Formats a value by placing dots or commas in the corresponding positions depending on the specified culture.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim number As String = 10000US.Formatted(precision:=0, culture:=CultureInfo.GetCultureInfo("en-US"))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="precision">
 The decimals precision.
 </param>
 
 <param name="culture">
 The culture format.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The formatted value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UShort.UShortExtensions.PercentageOf(System.UInt16,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Given a total number, calculates which percentage of is the source value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As UShort = CUShort(10US.PercentageOf(50US))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="total">
 The total value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The percentage value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UShort.UShortExtensions.FractionBy(System.UInt16,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Takes a fraction of the source value that corresponds to the given percent value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As UShort = CUShort(10US.FractionBy(50US))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="percentage">
 The percentage to fractionize by.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The fraction value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UShort.UShortExtensions.IsPositive(System.UInt16)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a positive number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10US.IsPositive()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a positive number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UShort.UShortExtensions.IsNegative(System.UInt16)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a negative number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10US.IsNegative()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a negative number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UShort.UShortExtensions.IsPrime(System.UInt16)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is a prime number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10US.IsPrime()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is prime, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UShort.UShortExtensions.IsDivisibleBy(System.UInt16,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is divisible by the given value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10US.IsDivisibleBy(5US)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value to divide by.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is divisible, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UShort.UShortExtensions.IsEven(System.UInt16)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the value is a even number.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10US.IsEven()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a even number, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UShort.UShortExtensions.IsMultipleOf(System.UInt16,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is a multiple of the given value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10US.IsMultipleOf(5US)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is a multiple, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Extensions.UShort.UShortExtensions.IsInRangeOf(System.UInt16,System.Double,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source value is in range of the given <paramref name="min"/> and <paramref name="max"/> values.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = 10US.IsInRangeOf(min:=1US, max:=100US)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source value.
 </param>
 
 <param name="min">
 The minimum value of the range.
 </param>
 
 <param name="max">
 The maximum value of the range.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the value is in range, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Maths.Types.CombinationCollection`1">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Combinations defines a meta-collection, typically a list of lists, of all possible subsets of a particular size from the set of values.
 <para></para>
 This list is enumerable and allows the scanning of all possible combinations using a simple <c>For Each</c> loop.
 <para></para>
 Within the returned set, there is no prescribed order. This follows the mathematical concept of choose.
 <para></para>
 For example, put 10 dominoes in a hat and pick 5. 
 The number of possible combinations is defined as "<c>10 choose 5</c>", which is calculated as <c>(10!) / ((10 - 5)! * 5!)</c>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim combinations As New CombinationCollection(Of String)({"a", "b", "c"}, 3, MetaCollectionType.WithRepetition)
 
 For Each combination As List(Of String) In combinations
     Console.WriteLine(String.Join(", ", combination))
 Next permutation
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 When given a input collect <c>{A, B, C}</c> and lower index of <c>2</c>, the following sets are generated:
 <para></para>
 <c>MetaCollectionType.WithRepetition    => {A, A},  {A, B},  {A, C},  {B, B},  {B, C},  {C, C}</c>
 <para></para>
 <c>MetaCollectionType.WithoutRepetition => {A, B},  {A, C},  {B, C}</c>
 <para></para>
 <para></para>
 Input sets with multiple equal values will generate redundant combinations in proprotion to the likelyhood of outcome.
 <para></para>
 For example, <c>{A, A, B, B}</c> and a lower index of <c>3</c> will generate:
 <para></para>
 <c>{A, A, B},  {A, A, B},  {A, B, B},  {A, B, B}</c>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of the values within the list.
 </typeparam>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Maths.Types.CombinationCollection`1.myValues">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copy of values object is intialized with, required for enumerator reset.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Maths.Types.CombinationCollection`1.myPermutations">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Permutations object that handles permutations on booleans for combination inclusion.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Maths.Types.CombinationCollection`1.myMetaCollectionType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The type of the combination collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Maths.Types.CombinationCollection`1.myLowerIndex">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The lower index defined in the constructor.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Maths.Types.CombinationCollection`1.Count">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the number of unique combinations that are defined in this meta-collection.
 <para></para>
 This value is mathematically defined as <c>Choose(M, N)</c> where <c>M</c> is the set size and <c>N</c> is the subset size. 
 <para></para>
 This is, <c>M! / (N! * (M-N)!)</c>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Maths.Types.CombinationCollection`1.Type">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the type of Combinations set that is generated.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Maths.Types.CombinationCollection`1.LowerIndex">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the lower index of the meta-collection, equal to the number of items returned each iteration.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Maths.Types.CombinationCollection`1.UpperIndex">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the upper index of the meta-collection, equal to the number of items in the initial set.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.CombinationCollection`1.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.Maths.Types.CombinationCollection`1"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.CombinationCollection`1.#ctor(System.Collections.Generic.IList{`0},System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Maths.Types.CombinationCollection`1"/> class.
 <para></para>
 Create a combination set from the provided list of values.
 <para></para>
 The upper index is calculated as <c>values.Count</c>, the lower index is user specified.
 <para></para>
 Collection type defaults to <see cref="F:Elektro.Core.Maths.Enums.MetaCollectionType.WithoutRepetition"/>
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="values">
 List of values to select combinations from.
 </param>
 
 <param name="lowerIndex">
 The size of each combination set to return.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.CombinationCollection`1.#ctor(System.Collections.Generic.IList{`0},System.Int32,Elektro.Core.Maths.Enums.MetaCollectionType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Maths.Types.CombinationCollection`1"/> class.
 <para></para>
 Create a combination set from the provided list of values.
 <para></para>
 The upper index is calculated as <c>values.Count</c>, the lower index is user specified.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="values">
 List of values to select combinations from.
 </param>
 
 <param name="lowerIndex">
 The size of each combination set to return.
 </param>
 
 <param name="type">
 The type of Combinations set to generate.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.CombinationCollection`1.GetEnumerator">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets an enumerator for collecting the list of combinations.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The enumerator.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.CombinationCollection`1.SystemCollectionsIEnumerableGetEnumerator">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets an enumerator for collecting the list of combinations.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The enumerator.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.CombinationCollection`1.Initialize(System.Collections.Generic.IList{`0},System.Int32,Elektro.Core.Maths.Enums.MetaCollectionType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initialize the combinations by settings a copy of the values from the 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="values">
 List of values to select combinations from.
 </param>
 
 <param name="lowerIndex">
 The size of each combination set to return.
 </param>
 
 <param name="type">
 The type of Combinations set to generate.
 </param>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 Copies the array and parameters and then creates a map of booleans that will be used by 
 a permutations object to refence the subset.
 <para></para>
 This map is slightly different based on whether the type is with or without repetition.
 <para></para>
 <para></para>
 When the type is <see cref="F:Elektro.Core.Maths.Enums.MetaCollectionType.WithoutRepetition"/>, 
 then a map of upper index elements is created with lower index false's. 
 <para></para> 
 E.g. <c>8 choose 3</c> generates:
 <para></para>
 Map: <c>{1 1 1 1 1 0 0 0}</c>
 <para></para>
 Note: For sorting reasons, false denotes inclusion in output.
 <para></para>
 <para></para>
 When the type is <see cref="F:Elektro.Core.Maths.Enums.MetaCollectionType.WithRepetition"/>, 
 then a map of upper index <c>- 1 +</c> lower index elements is created with the 
 <c>falses</c> indicating that the 'current' element should be included and 
 the <c>trues</c> meaning to advance the 'current' element by one.
 <para></para>
 E.g. <c>8 choose 3</c> generates:
 <para></para>
 Map: <c>{1 1 1 1 1 1 1 1 0 0 0}</c> (<c>7</c> trues, <c>3</c> falses).
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Maths.Types.CombinationCollection`1.Enumerator">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The enumerator that enumerates each meta-collection of the enclosing Combinations class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Maths.Types.CombinationCollection`1.Enumerator.myParent">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Parent object this is an enumerator for.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Maths.Types.CombinationCollection`1.Enumerator.myCurrentList">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The current list of values, this is lazy evaluated by the Current property.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Maths.Types.CombinationCollection`1.Enumerator.myPermutationsEnumerator">
 ----------------------------------------------------------------------------------------------------
 <summary>
 An enumertor of the parents list of lexicographic orderings.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Maths.Types.CombinationCollection`1.Enumerator.Current">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The current combination
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Maths.Types.CombinationCollection`1.Enumerator.SystemCollectionsIEnumeratorCurrent">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The current combination
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.CombinationCollection`1.Enumerator.#ctor(Elektro.Core.Maths.Types.CombinationCollection{`0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Maths.Types.CombinationCollection`1.Enumerator"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="source">
 The source combinations object.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.CombinationCollection`1.Enumerator.Reset">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Resets the combinations enumerator to the first combination.  
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.CombinationCollection`1.Enumerator.MoveNext">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Advances to the next combination of items from the set.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 The heavy lifting is done by the permutations object, the combination is generated
 by creating a new list of those items that have a true in the permutation parrellel array.
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if successfully moved to next combination, 
 <see langword="False"/> if no more unique combinations exist.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.CombinationCollection`1.Enumerator.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.CombinationCollection`1.Enumerator.ComputeCurrent">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The only complex function of this entire wrapper, ComputeCurrent() creates
 a list of original values from the bool permutation provided.  
 The exception for accessing current (InvalidOperationException) is generated
 by the call to .Current on the underlying enumeration.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 To compute the current list of values, the underlying permutation object
 which moves with this enumerator, is scanned differently based on the type.
 The items have only two values, true and false, which have different meanings:
 
 For type WithoutRepetition, the output is a straightforward subset of the input array.  
 E.g. 6 choose 3 without repetition
 Input array:   {A B C D E F}
 Permutations:  {0 1 0 0 1 1}
 Generates set: {A   C D    }
 Note: size of permutation is equal to upper index.
 
 For type WithRepetition, the output is defined by runs of characters and when to 
 move to the next element.
 E.g. 6 choose 5 with repetition
 Input array:   {A B C D E F}
 Permutations:  {0 1 0 0 1 1 0 0 1 1}
 Generates set: {A   B B     D D    }
 Note: size of permutation is equal to upper index - 1 + lower index.
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Maths.Types.PermutationCollection`1">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Permutations defines a meta-collection, typically a list of lists, of all possible orderings of a set of values.
 <para></para>
 This list is enumerable and allows the scanning of all possible permutations using a simple <c>For Each</c> loop.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim permutations As New PermutationCollection(Of String)({"a", "b", "c"}, MetaCollectionType.WithoutRepetition)
 
 For Each permutation As List(Of String) In permutations
     Console.WriteLine(String.Join(", ", permutation))
 Next permutation
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 When given a input collect <c>{A, A, B}</c> and lower index of <c>2</c>, the following sets are generated:
 <para></para>
 <c>MetaCollectionType.WithRepetition    => {A, A, B},  {A, B, A},  {A, A, B},  {A, B, A},  {B, A, A},  {B, A, A}</c>
 <para></para>
 <c>MetaCollectionType.WithoutRepetition => {A, A, B},  {A, B, A},  {B, A, A}</c>
 <para></para>
 <para></para>
 When generating non-repetition sets, ordering is based on the lexicographic ordering of the lists based on 
 the provided <see cref="T:System.Collections.Comparer"/>. 
 If no comparer is provided, then <c>T</c> must be <see cref="T:System.IComparable"/> on <c>T</c>.
 <para></para>
 When generating repetition sets, no comparisions are performed and therefore no comparer is required 
 and <c>T</c> does not need to be <see cref="T:System.IComparable"/>.
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type of the values within the list.
 </typeparam>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Maths.Types.PermutationCollection`1.myValues">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A list of T that represents the order of elements as originally provided, used for Reset.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Maths.Types.PermutationCollection`1.myLexicographicOrders">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Parrellel array of <see cref="T:System.Int32"/>s that represent the location of items in the <see cref="F:Elektro.Core.Maths.Types.PermutationCollection`1.myValues"/> array.
 <para></para>
 This is generated at Initialization and is used as a performance speed up rather that comparing <c>T</c> each time, 
 much faster to let the <c>CLR</c> optimize around integers.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Maths.Types.PermutationCollection`1.myCount">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The count of all permutations.
 <para></para>
 Calculated at Initialization and returned by <see cref="P:Elektro.Core.Maths.Types.PermutationCollection`1.Count"/> property.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Maths.Types.PermutationCollection`1.myMetaCollectionType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The type of Permutations that this was intialized from.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Maths.Types.PermutationCollection`1.SelfComparer`1">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Inner class that wraps a <see cref="T:System.Collections.IComparer"/> around a type <c>U</c> 
 when it is <see cref="T:System.IComparable"/>
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Maths.Types.PermutationCollection`1.Count">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The count of all permutations that will be returned.
 <para></para>
 If type is <see cref="F:Elektro.Core.Maths.Enums.MetaCollectionType.WithoutRepetition"/>, 
 then this does not double count permutations with multiple identical values.  
 <para></para>
 I.e. count of permutations of "<c>AAB</c>" will be <c>3</c> instead of <c>6</c>.  
 If type is <see cref="F:Elektro.Core.Maths.Enums.MetaCollectionType.WithRepetition"/>, 
 then this is all combinations and is therefore <c>N!</c>, where <c>N</c> is the number of values.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Maths.Types.PermutationCollection`1.Type">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The type of Permutations set that is generated.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Maths.Types.PermutationCollection`1.UpperIndex">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The upper index of the meta-collection, equal to the number of items in the initial set.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Maths.Types.PermutationCollection`1.LowerIndex">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The lower index of the meta-collection, equal to the number of items returned each iteration.
 <para></para>
 For Permutation, this is always equal to the <see cref="P:Elektro.Core.Maths.Types.PermutationCollection`1.UpperIndex"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.PermutationCollection`1.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.Maths.Types.PermutationCollection`1"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.PermutationCollection`1.#ctor(System.Collections.Generic.IList{`0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Maths.Types.PermutationCollection`1"/> class.
 <para></para>
 Create a permutation set from the provided list of values.
 <para></para>
 The values <c>T</c> must implement <see cref="T:System.IComparable"/>.
 <para></para>
 If <c>T</c> does not implement <see cref="T:System.IComparable"/> use a constructor with an explict <see cref="T:System.Collections.IComparer"/>.
 <para></para>
 The repetition type defaults to <see cref="F:Elektro.Core.Maths.Enums.MetaCollectionType.WithoutRepetition"/>
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="values">
 List of values to permute.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.PermutationCollection`1.#ctor(System.Collections.Generic.IList{`0},Elektro.Core.Maths.Enums.MetaCollectionType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Maths.Types.PermutationCollection`1"/> class.
 <para></para>
 Create a permutation set from the provided list of values.
 <para></para>
 If type is <see cref="F:Elektro.Core.Maths.Enums.MetaCollectionType.WithoutRepetition"/>, 
 then values (<c>T</c>) must implement <see cref="T:System.IComparable"/>.
 <para></para>  
 If T does not implement <see cref="T:System.IComparable"/> use a constructor with an explict <see cref="T:System.Collections.IComparer"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="values">
 List of values to permute.
 </param>
 
 <param name="type">
 The type of permutation set to calculate.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.PermutationCollection`1.#ctor(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Maths.Types.PermutationCollection`1"/> class.
 <para></para>
 Create a permutation set from the provided list of values.
 <para></para>  
 The values will be compared using the supplied <see cref="T:System.Collections.IComparer"/>.
 <para></para>  
 The repetition type defaults to <see cref="F:Elektro.Core.Maths.Enums.MetaCollectionType.WithoutRepetition"/>
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="values">
 List of values to permute.
 </param>
 
 <param name="comparer">
 Comparer used for defining the lexigraphic order.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.PermutationCollection`1.GetEnumerator">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets an enumerator for collecting the list of permutations.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The enumerator.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.PermutationCollection`1.SystemCollectionsIEnumerableGetEnumerator">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets an enumerator for collecting the list of permutations.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The enumerator.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.PermutationCollection`1.Initialize(System.Collections.Generic.IList{`0},Elektro.Core.Maths.Enums.MetaCollectionType,System.Collections.Generic.IComparer{`0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Common intializer used by the multiple flavors of constructors.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 Copies information provided and then creates a parellel int array of lexicographic 
 orders that will be used for the actual permutation algorithm.
 <para></para>
 The input array is first sorted as required for WithoutRepetition and always just for consistency.
 <para></para>
 This array is constructed one of two way depending on the type of the collection.
 <para></para>
 <para></para>
 When type is <see cref="F:Elektro.Core.Maths.Enums.MetaCollectionType.WithRepetition"/>, then all <c>N!</c> permutations are returned 
 and the lexicographic orders are simply generated as <c>1, 2, ... N</c>.
 <para></para>
 E.g.
 <para></para>
 Input array:          <c>{A, A, B, C, D, E, E}</c>
 <para></para>
 Lexicograhpic Orders: <c>{1, 2, 3, 4, 5, 6, 7}</c>
 <para></para>
 <para></para>
 When type is <see cref="F:Elektro.Core.Maths.Enums.MetaCollectionType.WithoutRepetition"/>, then fewer are generated, 
 with each identical element in the input array not repeated.
 <para></para>
 The lexicographic sort algorithm handles this natively as long as the repetition is repeated.
 <para></para>
 E.g.
 <para></para>
 Input array:          <c>{A, A, B, C, D, E, E}</c>
 <para></para>
 Lexicograhpic Orders: <c>{1, 1, 2, 3, 4, 5, 5}</c>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.PermutationCollection`1.GetCount">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Calculates the total number of permutations that will be returned.
 <para></para>
 As this can grow very large, extra effort is taken to avoid overflowing the accumulator.
 <para></para>
 While the algorithm looks complex, it really is just collecting numerator and denominator terms, 
 and cancelling out all of the denominator terms before taking the product of the numerator terms.  
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The number of permutations.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Maths.Types.PermutationCollection`1.Enumerator">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The enumerator that enumerates each meta-collection of the enclosing Permutations class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Maths.Types.PermutationCollection`1.Enumerator.myTemp">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Single instance of swap variable for T, small performance improvement over declaring in Swap function scope.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Maths.Types.PermutationCollection`1.Enumerator.myKviTemp">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Single instance of swap variable for int, small performance improvement over declaring in Swap function scope.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Maths.Types.PermutationCollection`1.Enumerator.myPosition">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Flag indicating the position of the enumerator.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Maths.Types.PermutationCollection`1.Enumerator.myLexicographicalOrders">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Parrellel array of integers that represent the location of items in the myValues array.
 <para></para>
 This is generated at Initialization and is used as a performance speed up rather that
 comparing <c>T</c> each time, much faster to let the <c>CLR</c> optimize around integers.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Maths.Types.PermutationCollection`1.Enumerator.myValues">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The list of values that are current to the enumerator.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Maths.Types.PermutationCollection`1.Enumerator.myParent">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The set of permuations that this enumerator enumerates.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Maths.Types.PermutationCollection`1.Enumerator.SystemCollectionsIEnumeratorCurrent">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The current permutation.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Maths.Types.PermutationCollection`1.Enumerator.Current">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The current permutation.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Maths.Types.PermutationCollection`1.Enumerator.Position">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Internal position type for tracking enumertor position.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.PermutationCollection`1.Enumerator.#ctor(Elektro.Core.Maths.Types.PermutationCollection{`0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Maths.Types.PermutationCollection`1.Enumerator"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="source">
 The source Permutations object.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.PermutationCollection`1.Enumerator.Reset">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Resets the permutations enumerator to the first permutation.
 <para></para>
 This will be the first lexicographically order permutation.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.PermutationCollection`1.Enumerator.MoveNext">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Advances to the next permutation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if successfully moved to next permutation, 
 <see langword="False"/> if no more permutations exist.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 Continuation was tried (i.e. yield return) by was not nearly as efficient.
 <para></para>
 Performance is further increased by using value types and removing generics, that is, the LexicographicOrder parellel array.
 <para></para>
 This is a issue with the .NET <c>CLR</c> not optimizing as well as it could in this infrequently used scenario.
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.PermutationCollection`1.Enumerator.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.PermutationCollection`1.Enumerator.NextPermutation">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Calculates the next lexicographical permutation of the set.
 <para></para>
 This is a permutation with repetition where values that compare as equal will not 
 swap positions to create a new permutation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 This uses the integers of the lexicographical order of the values so that any
 comparison of values are only performed during initialization. 
 <para></para>
 See "E. W. Dijkstra, A Discipline of Programming, Prentice-Hall, 1997":
 <para></para>
 <see href="http://www.cut-the-knot.org/do_you_know/AllPerm.shtml"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if a new permutation has been returned, <see langword="False"/> if not.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Maths.Types.PermutationCollection`1.Enumerator.Swap(System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Helper function for swapping two elements within the internal collection.
 <para></para>
 This swaps both the lexicographical order and the values, maintaining the parallel array.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Maths.Types.IMetaCollection`1">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Interface for Permutations, Combinations and any other classes that present
 a collection of collections based on an input collection.
 <para></para>
 The enumerators that this class inherits defines the mechanism for enumerating through the collections.  
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The of the elements in the collection, not the type of the collection.
 </typeparam>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Maths.Types.IMetaCollection`1.Count">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The count of items in the collection.
 <para></para>
 This is not inherited from <see cref="T:System.Collections.ICollection"/> since this meta-collection cannot be extended by users.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Maths.Types.IMetaCollection`1.Type">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The type of the meta-collection, determining how the collections are determined from the inputs.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Maths.Types.IMetaCollection`1.UpperIndex">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The upper index of the meta-collection, which is the size of the input collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Maths.Types.IMetaCollection`1.LowerIndex">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The lower index of the meta-collection, which is the size of each output collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.DateAndTime.Enums.TimeMeasurerState">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies the current state of a <see cref="T:Elektro.Core.DateAndTime.Types.TimeMeasurer"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.DateAndTime.Enums.TimeMeasurerState.Enabled">
 <summary>
 The <see cref="T:Elektro.Core.DateAndTime.Types.TimeMeasurer"/> is running.
 </summary>
</member>
<member name="F:Elektro.Core.DateAndTime.Enums.TimeMeasurerState.Paused">
 <summary>
 The <see cref="T:Elektro.Core.DateAndTime.Types.TimeMeasurer"/> is paused.
 </summary>
</member>
<member name="F:Elektro.Core.DateAndTime.Enums.TimeMeasurerState.Disabled">
 <summary>
 The <see cref="T:Elektro.Core.DateAndTime.Types.TimeMeasurer"/> is fully stopped, it cannot be resumed.
 </summary>
</member>
<member name="T:Elektro.Core.DateAndTime.Enums.TimeUnit">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a unit of time.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.DateAndTime.Enums.TimeUnit.Milliseconds">
 <summary>
 Milliseconds.
 </summary>
</member>
<member name="F:Elektro.Core.DateAndTime.Enums.TimeUnit.Seconds">
 <summary>
 Seconds.
 </summary>
</member>
<member name="F:Elektro.Core.DateAndTime.Enums.TimeUnit.Minutes">
 <summary>
 Minutes.
 </summary>
</member>
<member name="F:Elektro.Core.DateAndTime.Enums.TimeUnit.Hours">
 <summary>
 Hours.
 </summary>
</member>
<member name="F:Elektro.Core.DateAndTime.Enums.TimeUnit.Days">
 <summary>
 Days.
 </summary>
</member>
<member name="T:Elektro.Core.DateAndTime.Extensions.Date.Timestamp">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.DateTime"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Extensions.Date.Timestamp.GetTimeStamp(System.DateTime)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the time stamp of the source specified <see cref="T:System.DateTime"/>, in <c>ISO 8601</c> format.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <c>https://en.wikipedia.org/wiki/ISO_8601</c>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting time stamp.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.DateAndTime.Extensions.Date.Is">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.DateTime"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Extensions.Date.Is.IsNow(System.DateTime)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.DateTime"/> is now.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = Date.Now.IsNow()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.DateTime"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified <see cref="T:System.DateTime"/> is now;
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Extensions.Date.Is.IsFutureTime(System.DateTime)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.DateTime"/> is in the future time from now.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = Date.Now.AddHours(1).IsFutureTime()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.DateTime"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified <see cref="T:System.DateTime"/> is in the future time from now;
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Extensions.Date.Is.IsPastTime(System.DateTime)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.DateTime"/> is in the past time from now.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = Date.Now.AddHours(-1).IsPastTime()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.DateTime"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified <see cref="T:System.DateTime"/> is in the past time from now;
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Extensions.Date.Is.IsToday(System.DateTime)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.DateTime"/> is today.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = Date.Today.IsToday()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.DateTime"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified <see cref="T:System.DateTime"/> is today;
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Extensions.Date.Is.IsTomorrow(System.DateTime)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.DateTime"/> is tomorrow.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = Date.Today.AddDays(1).IsTomorrow()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.DateTime"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified <see cref="T:System.DateTime"/> is tomorrow;
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Extensions.Date.Is.IsYesterday(System.DateTime)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.DateTime"/> is tomorrow.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = Date.Today.AddDays(-1).IsYesterday()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.DateTime"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified <see cref="T:System.DateTime"/> is tomorrow;
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.DateAndTime.Extensions.Date.Elapsed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.DateTime"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Extensions.Date.Elapsed.ElapsedFromNow(System.DateTime)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns the elapsed time between the date represented by the specified <see cref="T:System.DateTime"/> and 
 the current date and time.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim elapsed As TimeSpan = Date.Now.AddDays(1).ElapsedFromNow()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.DateTime"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.TimeSpan"/> representing the elapsed time between 
 the date represented by the specified <see cref="T:System.DateTime"/> and 
 the current date and time.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.DateAndTime.Extensions.Date.Add">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.DateTime"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Extensions.Date.Add.AddWeeks(System.DateTime,System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a new <see cref="T:System.DateTime"/> that adds the specified number of weeks to the value of this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim day As Date = Date.Today.AddWeeks(1)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 A valid <see cref="T:System.DateTime"/> instance.
 </param>
 
 <param name="value">
 A number of whole and fractional weeks.
 <para></para>
 The <paramref name="value"/> parameter can be negative or positive.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.DateTime"/> whose value is the sum of the date and time represented by this instance and 
 the number of weeks represented by <paramref name="value"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.DateAndTime.Extensions.Date.Days">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.DateTime"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Extensions.Date.Days.DaysInMonth(System.DateTime)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns the number of days in the month for the date represented by the specified <see cref="T:System.DateTime"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim days As Integer = Date.Today.DaysInMonth()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.DateTime"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The number of days in the month for the date represented by the specified <see cref="T:System.DateTime"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Extensions.Date.Days.FirstDayOfWeek(System.DateTime)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a <see cref="T:System.DateTime"/> which represents the first day of the week of the date represented by 
 the specified <see cref="T:System.DateTime"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dt As Date = Date.Today.FirstDayOfWeek()
 Dim day As Integer = dt.Day
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.DateTime"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.DateTime"/> which represents the first day of the week of the date represented by 
 the specified <see cref="T:System.DateTime"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Extensions.Date.Days.FirstDayOfWeek(System.DateTime,System.DayOfWeek)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a <see cref="T:System.DateTime"/> which represents the first day of the week of the date represented by 
 the specified <see cref="T:System.DateTime"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dt As Date = Date.Today.FirstDayOfWeek(DayOfWeek.Sunday)
 Dim day As Integer = dt.Day
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.DateTime"/>.
 </param>
 
 <param name="startOfWeek">
 An enumeration value that represents the first day of the week.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.DateTime"/> which represents the first day of the week of the date represented by 
 the specified <see cref="T:System.DateTime"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Extensions.Date.Days.FirstDayOfMonth(System.DateTime)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a <see cref="T:System.DateTime"/> representing the first day of the month for the date represented by 
 the specified <see cref="T:System.DateTime"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dt As Date = Date.Today.FirstDayOfMonth()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.DateTime"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.DateTime"/> representing the first day of the month for the date represented by 
 the specified <see cref="T:System.DateTime"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Extensions.Date.Days.FirstDayOfYear(System.DateTime)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a <see cref="T:System.DateTime"/> representing the first day of the year for the date represented by 
 the specified <see cref="T:System.DateTime"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dt As Date = Date.Today.FirstDayOfYear()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.DateTime"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.DateTime"/> representing the first day of the year for the date represented by 
 the specified <see cref="T:System.DateTime"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Extensions.Date.Days.LastDayOfWeek(System.DateTime)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a <see cref="T:System.DateTime"/> which represents the last day of the week of the date represented by 
 the specified <see cref="T:System.DateTime"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dt As Date = Date.Today.LastDayOfWeek()
 Dim day As Integer = dt.Day
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.DateTime"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.DateTime"/> which represents the last day of the week of the date represented by 
 the specified <see cref="T:System.DateTime"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Extensions.Date.Days.LastDayOfWeek(System.DateTime,System.DayOfWeek)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a <see cref="T:System.DateTime"/> which represents the last day of the week of the date represented by 
 the specified <see cref="T:System.DateTime"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dt As Date = Date.Today.LastDayOfWeek(DayOfWeek.Sunday)
 Dim day As Integer = dt.Day
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.DateTime"/>.
 </param>
 
 <param name="firstDayOfWeek">
 An enumeration value that represents the first day of the week.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.DateTime"/> which represents the last day of the week of the date represented by 
 the specified <see cref="T:System.DateTime"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Extensions.Date.Days.LastDayOfMonth(System.DateTime)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a <see cref="T:System.DateTime"/> representing the last day of the month for the date represented by 
 the specified <see cref="T:System.DateTime"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dt As Date = Date.Today.LastDayOfMonth()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.DateTime"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.DateTime"/> representing the last day of the month for the date represented by 
 the specified <see cref="T:System.DateTime"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Extensions.Date.Days.LastDayOfYear(System.DateTime)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a <see cref="T:System.DateTime"/> representing the last day of the year for the date represented by 
 the specified <see cref="T:System.DateTime"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dt As Date = Date.Today.LastDayOfYear()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.DateTime"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.DateTime"/> representing the last day of the year for the date represented by 
 the specified <see cref="T:System.DateTime"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.DateAndTime.Tools.DateTimeUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains date and time related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Tools.DateTimeUtil.ConvertTime(System.Double,Elektro.Core.DateAndTime.Enums.TimeUnit,Elektro.Core.DateAndTime.Enums.TimeUnit)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts between units of time.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 MsgBox(ConvertTime(1, TimeUnit.Hours, TimeUnit.Milliseconds)) ' Result: 3.600.000
 MsgBox(ConvertTime(1, TimeUnit.Hours, TimeUnit.Seconds))      ' Result: 3.600
 MsgBox(ConvertTime(1, TimeUnit.Hours, TimeUnit.Minutes))      ' Result: 60
 MsgBox(ConvertTime(1, TimeUnit.Hours, TimeUnit.Hours))        ' Result: 1
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="value">
 The time value.
 </param>
 
 <param name="fromUnit">
 The source <see cref="T:Elektro.Core.DateAndTime.Enums.TimeUnit"/> unit.
 </param>
 
 <param name="toUnit">
 The target <see cref="T:Elektro.Core.DateAndTime.Enums.TimeUnit"/> unit.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting value of the conversion.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Tools.DateTimeUtil.DateDiff(System.DateTime,System.DateTime)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Calculates the difference between two dates.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim date1 As Date = Date.Now
 Dim date2 As Date = Date.Now.AddHours(1)
 Dim diff As TimeSpan = DateTimeUtil.DateDiff(date1, date2)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="startDate">
 The start date.
 </param>
 
 <param name="endDate">
 The end date.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.TimeSpan"/> that contains the time difference.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Tools.DateTimeUtil.TimeDiff(System.TimeSpan,System.TimeSpan)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Calculates the difference between two intervals of time.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim ts1 As TimeSpan = TimeSpan.FromHours(0)
 Dim ts2 As TimeSpan = TimeSpan.FromHours(1)
 Dim diff As TimeSpan = DateTimeUtil.TimeDiff(ts1, ts2)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="startTime">
 The start time.
 </param>
 
 <param name="endTime">
 The end time.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.TimeSpan"/> that contains the time difference.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.DateAndTime.Tools.DateTimeUtil.Tommorrow">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the date of tomorrow.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim tommorrow As Date = Tommorrow
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The date of tomorrow.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.DateAndTime.Tools.DateTimeUtil.Yesterday">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the date of yesterday.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim yesterday As Date = Yesterday
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The date of yesterday.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.DateAndTime.Tools.DateTimeUtil.Timestamp">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the current time stamp, in <c>ISO 8601</c> format.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <c>https://en.wikipedia.org/wiki/ISO_8601</c>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <value>
 The resulting time stamp.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Tools.DateTimeUtil.GetAge(System.DateTime)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the current years old of a person from the specified birth date.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim birthdDate As Date = Date.ParseExact("08/09/1986", "dd/MM/yyyy", CultureInfo.InvariantCulture)
 Dim age As Integer = GetAge(birthdDate)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="birthDate">
 The birth date.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The years old.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 at
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Tools.DateTimeUtil.GetAge(System.DateTime,System.DateTime)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the years old of a person at specified date from the specified birth date.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim birthdDate As Date = Date.ParseExact("08/09/1986", "dd/MM/yyyy", CultureInfo.InvariantCulture)
 Dim age As Integer = GetAge(birthdDate, birthdDate.AddYears(20))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="birthDate">
 The birth date.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The years old.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 at
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Tools.DateTimeUtil.GetAgeTime(System.DateTime)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the current elapsed life time of a person from the specified birth date.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim birthdDate As Date = Date.ParseExact("08/09/1986", "dd/MM/yyyy", CultureInfo.InvariantCulture)
 Dim time As TimeSpan = GetAgeTime(birthdDate)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="birthDate">
 The birth date.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The elapsed life time.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 at
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Tools.DateTimeUtil.GetAgeTime(System.DateTime,System.DateTime)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the elapsed life time of a person at specified date from the specified birth date.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim birthdDate As Date = Date.ParseExact("08/09/1986", "dd/MM/yyyy", CultureInfo.InvariantCulture)
 Dim time As TimeSpan = GetAgeTime(birthdDate, birthdDate.AddYears(20))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="birthDate">
 The birth date.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The life time.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 at
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Tools.DateTimeUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.DateAndTime.Tools.DateTimeUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.DateAndTime.Types.EventArgs.TimeMeasurerUpdatedEventArgs">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains the event-data of a <see cref="T:Elektro.Core.DateAndTime.Types.TimeMeasurer"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.DateAndTime.Types.EventArgs.TimeMeasurerUpdatedEventArgs.Elapsed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the elapsed time.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The elapsed time.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.DateAndTime.Types.EventArgs.TimeMeasurerUpdatedEventArgs.elapsedB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Baking Field )
 The elapsed time.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.DateAndTime.Types.EventArgs.TimeMeasurerUpdatedEventArgs.Remaining">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the remaining time.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The remaining time.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.DateAndTime.Types.EventArgs.TimeMeasurerUpdatedEventArgs.remainingB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Baking Field )
 The remaining time.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.DateAndTime.Types.EventArgs.TimeMeasurerUpdatedEventArgs.Goal">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the goal time.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The goal time.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.DateAndTime.Types.EventArgs.TimeMeasurerUpdatedEventArgs.goalB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Baking Field )
 The goal time.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Types.EventArgs.TimeMeasurerUpdatedEventArgs.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.DateAndTime.Types.EventArgs.TimeMeasurerUpdatedEventArgs"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Types.EventArgs.TimeMeasurerUpdatedEventArgs.#ctor(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.DateAndTime.Types.EventArgs.TimeMeasurerUpdatedEventArgs"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="elapsed">
 The elapsed time.
 </param>
 
 <param name="remaining">
 The remaining time.
 </param>
 
 <param name="goal">
 The goal time.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.DateAndTime.Types.TimeMeasurer">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Measures the elapsed and/or remaining time of a time interval. 
 The time measurer can be used as a chronometer or a countdown.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example to use a chronometer.
 <code>
 Public Class Form1 : Inherits Form
 
     ''' ----------------------------------------------------------------------------------------------------
     ''' &lt;summary&gt;
     ''' A &lt;see cref="TimeMeasurer"/&gt; instance which is used as a chronometer.
     ''' &lt;/summary&gt;
     ''' ----------------------------------------------------------------------------------------------------
     Private WithEvents chrono As New TimeMeasurer With {.UpdateInterval = 100}
 
     ' Label used to display the elapsed time.
     Private lblChrono As Label

     Private Shadows Sub Shown() Handles MyBase.Shown
 
         Me.lblChrono = Me.Label1
         Me.chrono.Start(TimeSpan.FromMinutes(1.0R))
 
     End Sub
 
     ''' ----------------------------------------------------------------------------------------------------
     ''' &lt;summary&gt;
     ''' Handles the &lt;see cref="TimeMeasurer.TimeUpdated"/&gt; event of the chrono instance.
     ''' &lt;/summary&gt;
     ''' ----------------------------------------------------------------------------------------------------
     ''' &lt;param name="sender"&gt;
     ''' The source of the event.
     ''' &lt;/param&gt;
     ''' 
     ''' &lt;param name="e"&gt;
     ''' The &lt;see cref="TimeMeasurerUpdatedEventArgs"/&gt; instance containing the event data.
     ''' &lt;/param&gt;
     ''' ----------------------------------------------------------------------------------------------------
     Private Sub Chrono_TimeUpdated(ByVal sender As Object, ByVal e As TimeMeasurerUpdatedEventArgs) _
     Handles chrono.TimeUpdated
 
         ' H:M:S:MS
         Me.lblChrono.Text = String.Format("{0:00}:{1:00}:{2:00}:{3:000}",
                                           e.Elapsed.Hours, e.Elapsed.Minutes, e.Elapsed.Seconds, e.Elapsed.Milliseconds)
 
         If (e.Elapsed = e.Goal) Then
             Me.lblChrono.Text = "Chronometer Done!"
         End If
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example to use a countdown.
 <code>
 Public Class Form1 : Inherits Form
 
 
     ''' ----------------------------------------------------------------------------------------------------
     ''' &lt;summary&gt;
     ''' A &lt;see cref="TimeMeasurer"/&gt; instance which is used as a countdown.
     ''' &lt;/summary&gt;
     ''' ----------------------------------------------------------------------------------------------------
     Private WithEvents countdown As New TimeMeasurer With {.UpdateInterval = 100}
 
     ' Label used to display the remaining time.
     Private lblCountdown As Label
 
     Private Shadows Sub Shown() Handles MyBase.Shown
 
         Me.lblCountdown = Me.Label1
         Me.countdown.Start(TimeSpan.FromMinutes(1.0R))
 
     End Sub
 
     ''' ----------------------------------------------------------------------------------------------------
     ''' &lt;summary&gt;
     ''' Handles the &lt;see cref="TimeMeasurer.TimeUpdated"/&gt; event of the countdown instance.
     ''' &lt;/summary&gt;
     ''' ----------------------------------------------------------------------------------------------------
     ''' &lt;param name="sender"&gt;
     ''' The source of the event.
     ''' &lt;/param&gt;
     ''' 
     ''' &lt;param name="e"&gt;
     ''' The &lt;see cref="TimeMeasurerUpdatedEventArgs"/&gt; instance containing the event data.
     ''' &lt;/param&gt;
     ''' ----------------------------------------------------------------------------------------------------
     Private Sub Countdown_TimeUpdated(ByVal sender As Object, ByVal e As TimeMeasurerUpdatedEventArgs) _
     Handles countdown.TimeUpdated
 
         ' Measure H:M:S:MS
         Me.lblCountdown.Text = String.Format("{0:00}:{1:00}:{2:00}:{3:000}",
                                              e.Remaining.Hours, e.Remaining.Minutes, e.Remaining.Seconds, e.Remaining.Milliseconds)
 
         If (e.Elapsed.Subtract(e.Remaining) = e.Goal) Then
             Me.lblCountdown.Text = "Countdown Done!"
         End If
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.DateAndTime.Types.TimeMeasurer.timeElapsed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 An <see cref="T:System.Diagnostics.Stopwatch"/> instance to retrieve the elapsed time. (a chronometer)
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.DateAndTime.Types.TimeMeasurer.timeRemaining">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A <see cref="T:System.TimeSpan"/> instance to retrieve the remaining time. (a countdown)
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.DateAndTime.Types.TimeMeasurer._measureTimer">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A <see cref="T:System.Windows.Forms.Timer"/> instance that updates the elapsed and remaining time, 
 and also raise <see cref="T:Elektro.Core.DateAndTime.Types.TimeMeasurer"/> events.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.DateAndTime.Types.TimeMeasurer.isFinished">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Flag that indicates wheter this <see cref="T:Elektro.Core.DateAndTime.Types.TimeMeasurer"/> instance has finished to measure time interval.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.DateAndTime.Types.TimeMeasurer.MaxValue">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the maximum time that the <see cref="T:Elektro.Core.DateAndTime.Types.TimeMeasurer"/> can measure, in milliseconds.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The maximum time that the <see cref="T:Elektro.Core.DateAndTime.Types.TimeMeasurer"/> can measure, in milliseconds.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.DateAndTime.Types.TimeMeasurer.State">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the current state of this <see cref="T:Elektro.Core.DateAndTime.Types.TimeMeasurer"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The update interval.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.DateAndTime.Types.TimeMeasurer.UpdateInterval">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the update interval.
 Maximum value is 1000 (1 second).
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The update interval.
 </value>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 A value smaller than 1000 is required.;value
 </exception>
</member>
<member name="F:Elektro.Core.DateAndTime.Types.TimeMeasurer.updateIntervalB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The update interval.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:Elektro.Core.DateAndTime.Types.TimeMeasurer.TimeUpdated">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when the elapsed/remaining time updates.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Types.TimeMeasurer.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.DateAndTime.Types.TimeMeasurer"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Types.TimeMeasurer.Start(System.Double)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Starts the time interval measurement.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="milliseconds">
 The time interval to measure, in milliseconds.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentOutOfRangeException">
 milliseconds;A value smaller than <see cref="P:Elektro.Core.DateAndTime.Types.TimeMeasurer.MaxValue"/> is required.
 </exception>
 
 <exception cref="T:System.ArgumentOutOfRangeException">
 milliseconds;A value greater than 0 is required.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Types.TimeMeasurer.Start(System.DateTime,System.DateTime)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Starts a time interval measurement given a difference between two dates.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="startDate">
 The starting date.
 </param>
 
 <param name="endDate">
 The ending date.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Types.TimeMeasurer.Start(System.TimeSpan)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Starts a time interval measurement given a <see cref="T:System.TimeSpan"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="time">
 A <see cref="T:System.TimeSpan"/> instance that contains the time interval.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Types.TimeMeasurer.Pause">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Pauses the time interval measurement.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.Exception">
 TimeMeasurer is not running.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Types.TimeMeasurer.Resume">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Resumes the time interval measurement.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.Exception">
 TimeMeasurer is not paused.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Types.TimeMeasurer.Stop">
 <summary>
 Stops the time interval measurement.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.Exception">
 TimeMeasurer is not running.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Types.TimeMeasurer.Reset">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Stops Time intervals and resets the elapsed and remaining time to zero.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Types.TimeMeasurer.MeasureTimer_Tick(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Timer.Tick"/> event of the <see cref="P:Elektro.Core.DateAndTime.Types.TimeMeasurer.measureTimer"/> timer.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="N:Elektro.Core.DateAndTime.Types.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.DateAndTime.Types.TimeMeasurer.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Types.TimeMeasurer.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.DateAndTime.Types.TimeMeasurer.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Diagnostics.Extensions.Boolean.TypeConversion">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Boolean"/> datatype.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Boolean.TypeConversion.ToBit(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns the binary representation of the specified <see cref="T:System.Boolean"/> value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim bit As Integer = (True).ToBit()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Boolean"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the <see cref="T:System.Boolean"/> value is <see langword="True"/>, <c>1</c> (one); otherwise, <c>0</c> (zero).
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Boolean.TypeConversion.ToString(System.Boolean,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a custom string representation for a the <see cref="T:System.Boolean"/> value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = (True).ToString(iftrue:="Yes", ifFalse:="No")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Boolean"/>.
 </param>
 
 <param name="iftrue">
 A string representation to return if the source <see cref="T:System.Boolean"/> is <see langword="True"/>.
 </param>
 
 <param name="ifFalse">
 A string representation to return if the source <see cref="T:System.Boolean"/> is <see langword="False"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 Returns <paramref name="iftrue"/> if the <see cref="T:System.Boolean"/> value is <see langword="True"/>; 
 or the <paramref name="ifFalse"/> if the <see cref="T:System.Boolean"/> value is <see langword="False"/>
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Diagnostics.Extensions.Enum.Flags">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Enum"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Enum.Flags.HasFlagsAttribute(System.Enum)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified enumeration is declared with <see cref="T:System.FlagsAttribute"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = (New FileAttributes).HasFlagsAttribute()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Enum"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified enumeration is declared with <see cref="T:System.FlagsAttribute"/>; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Enum.Flags.AddFlag``1(System.Enum,``0)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds the specified flag into a flags combination of the source enumeration.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim flags As FileAttributes = FileAttributes.ReadOnly Or FileAttributes.Hidden
 flags = flags.AddFlag(FileAttributes.Compressed)
 
 MsgBox(flags.ToString)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Enum"/>.
 </param>
 
 <param name="flag">
 The flag to add.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting flags combination.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Enum.Flags.AddFlags``1(System.Enum,``0[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Adds the specified flags into a flags combination of the source enumeration.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim flags As FileAttributes = FileAttributes.ReadOnly Or FileAttributes.Hidden
 flags = flags.AddFlags({FileAttributes.Compressed, FileAttributes.Encrypted})
 
 MsgBox(flags.ToString)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Enum"/>.
 </param>
 
 <param name="flags">
 The flags to add.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting flags combination.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Enum.Flags.RemoveFlag``1(System.Enum,``0)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes the specified flag from a flags combination of the source enumeration.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim flags As FileAttributes = FileAttributes.ReadOnly Or FileAttributes.Hidden Or FileAttributes.System
 flags = flags.RemoveFlag(FileAttributes.Hidden)
 
 MsgBox(flags.ToString)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Enum"/>.
 </param>
 
 <param name="flag">
 The flag to remove.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting flags combination.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Enum.Flags.RemoveFlags``1(System.Enum,``0[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes the specified flags from a flags combination of the source enumeration.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim flags As FileAttributes = FileAttributes.ReadOnly Or FileAttributes.Hidden Or FileAttributes.System
 flags = flags.RemoveFlags({FileAttributes.ReadOnly, FileAttributes.System})
 
 MsgBox(flags.ToString)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Enum"/>.
 </param>
 
 <param name="flags">
 The flags to remove.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting flags combination.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Enum.Flags.Flags``1(System.Enum)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the current flags of the source enumeration.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As FileAttributes = FileAttributes.ReadOnly Or FileAttributes.Hidden Or FileAttributes.System
 Dim flags As FileAttributes() = value.Flags(Of FileAttributes)
 
 For Each flag As FileAttributes In flags
     MsgBox(flag.ToString)
 Next
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Enum"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The current flags.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Enum.Flags.ForEachFlag``1(System.Enum,System.Action{``0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs the specified action for each flag of the source enumeration.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim flags As FileAttributes = FileAttributes.ReadOnly Or FileAttributes.Hidden Or FileAttributes.System
 
 flags.ForEachFlag(Of FileAttributes)(
     Sub(ByVal x As FileAttributes)
         MsgBox(x.ToString())
     End Sub)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Enum"/>.
 </param>
 
 <param name="action">
 The  <see cref="T:System.Action"/> to perform on each flag.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Enum.Flags.FlagCount(System.Enum)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines the amount of flags in the specified flag combination.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim flags As FileAttributes = (FileAttributes.Archive Or FileAttributes.Compressed)
 Dim flagCount As Integer = Me.FlagCount(flags)
 MsgBox(flagCount)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Enum"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The amount of flags.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Diagnostics.Extensions.Exception.Localization">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Exception"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Exception.Localization.ToEnglish``1(``0)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts the message of a <see cref="T:System.Exception"/> to English language.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Try
     Throw New FileNotFoundException
 
 Catch ex As FileNotFoundException
     Dim message As String = ex.ToEnglish
 
 End Try
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="ex">
 An <see cref="T:System.Exception"/> that contains an exception message in a non-english language.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The exception message in English language.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Diagnostics.Extensions.Object.Is">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Object"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Object.Is.IsDisposable(System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified object is disposable.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = (New Process).IsDisposable()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Object"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified object is disposable; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Object.Is.ConvertTo``1(System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts an object to the specified target type.
 <para></para>
 If the conversion fails, an exception is thrown.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As String = "Red"
 Dim color As Color = value.ConvertTo(Of Color)()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Object"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting object of the specified target type.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Object.Is.ConvertTo``1(System.Object,``0)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts an object to the specified target type.
 <para></para>
 If the conversion fails, returns the specified default value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As String = "1000000000000000000000000"
 Dim obj As Integer = value.ConvertTo(Of Integer)(Integer.MaxValue)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Object"/>.
 </param>
 
 <param name="defaultValue">
 The default value to return if the conversion fails.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the conversion fails, returns the resulting object of the specified target type.
 <para></para>
 If the conversion fails, returns the specified default value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Object.Is.CanConvertTo``1(System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source object can be converted to the specified target type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = "Red".CanConvertTo(Of Color)()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Object"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the source object can be converted to the specified target type; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Object.Is.CanConvertTo(System.Object,System.Type)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source object can be converted to the specified target type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = "Red".CanConvertTo(GetType(Color))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Object"/>.
 </param>
 
 <param name="t">
 The target <see cref="T:System.Type"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the source object can be converted to the specified target type; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Diagnostics.Extensions.Object.TypeConversion">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Object"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Object.TypeConversion.ConvertTo``1(System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts an object to the specified target type.
 <para></para>
 If the conversion fails, an exception is thrown.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As String = "Red"
 Dim color As Color = value.ConvertTo(Of Color)()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Object"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting object of the specified target type.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Object.TypeConversion.ConvertTo``1(System.Object,``0)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts an object to the specified target type.
 <para></para>
 If the conversion fails, returns the specified default value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim value As String = "1000000000000000000000000"
 Dim obj As Integer = value.ConvertTo(Of Integer)(Integer.MaxValue)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Object"/>.
 </param>
 
 <param name="defaultValue">
 The default value to return if the conversion fails.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the conversion fails, returns the resulting object of the specified target type.
 <para></para>
 If the conversion fails, returns the specified default value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Object.TypeConversion.CanConvertTo``1(System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source object can be converted to the specified target type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = "Red".CanConvertTo(Of Color)()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source <see cref="T:System.Object"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the source object can be converted to the specified target type; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Object.TypeConversion.CanConvertTo(System.Object,System.Type)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the source object can be converted to the specified target type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = "Red".CanConvertTo(GetType(Color))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Object"/>.
 </param>
 
 <param name="t">
 The target <see cref="T:System.Type"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the source object can be converted to the specified target type; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Diagnostics.Extensions.Type.Inheritance">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Type"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Type.Inheritance.InheritsFrom(System.Type,System.Type)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified type inherits from the specified <see cref="T:System.Type"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = GetType(Control).InheritsFrom(GetType(Component))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The type to test.
 </param>
 
 <param name="baseType">
 The base type to check.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the source type inherits from the specified <see cref="T:System.Type"/>;
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Diagnostics.Extensions.Type.Instance">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Type"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Type.Instance.CreateInstance(System.Type,System.Object[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates an instance of the specified type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim t As Type = GetType(Control)
 Dim instance As Control = DirectCast(t.CreateInstance, Control)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source type.
 </param>
 
 <param name="ctorParameters">
 Optional constructor parameters.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The instanciated object.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Type.Instance.CreateInstance``1(System.Type,System.Object[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates an instance of the specified type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim t As Type = GetType(Control)
 Dim instance As Control = t.CreateInstance(Of Control)()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source type.
 </param>
 
 <param name="ctorParameters">
 Optional constructor parameters.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The instanciated object.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Diagnostics.Extensions.Type.Is">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.Type"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Type.Is.IsDisposable(System.Type)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified type is disposable.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = GetType(Form).IsDisposable()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The type to test.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified type is disposable; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Extensions.Type.Is.IsNullable(System.Type)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified type is nullable.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim Dim result As Boolean = GetType(Nullable(Of Boolean)).IsNullable()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The type to test.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified type is nullable; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Diagnostics.Tools.DebugUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains debugging related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Tools.DebugUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.Diagnostics.Tools.DebugUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Tools.DebugUtil.ClearBuildOutputWindow">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Clears the Build window output of the Visual Studio instance that hosts the current application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 ClearBuildOutputWindow()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Tools.DebugUtil.ClearDebugOutputWindow">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Clears the Debug window output of the Visual Studio instance that hosts the current application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Debug.WriteLine("Hello World")
 ClearDebugOutputWindow()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Tools.DebugUtil.GetOutputWindow(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the output of the specified output window of the Visual Studio instance that hosts the current application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Clipboard.SetText(GetOutputWindow("Build"))
 Clipboard.SetText(GetOutputWindow("Debug"))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The output.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Diagnostics.Tools.DebugUtil.antiDebugCallback">
 ----------------------------------------------------------------------------------------------------
 <summary>
 An encapsulated method that will be invoked 
 if a debugger is found by <see cref="M:Elektro.Core.Diagnostics.Tools.DebugUtil.EnableAntiDebugProtection(System.Action)"/> method.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Tools.DebugUtil.IsVisualStudioHostingProcessAttached">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the Visual Studio Hosting Process is attached on the current application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = IsVisualStudioHostingProcessAttached()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if Visual Studio Hosting Process is attached; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Tools.DebugUtil.EnableAntiDebugProtection(System.Action)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Enables Anti-Debug protection for the current application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim antiDebugCallback As Action =
     Sub()
         Environment.FailFast(Nothing)
     End Sub
 
 DebugUtil.EnableAntiDebugProtection(antiDebugCallback)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="callback">
 An encapsulated method that will be invoked if a debugger is found.
 <para></para>
 Normally it should be a method containing instructions to terminate the current application.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Tools.DebugUtil.DisableAntiDebugProtection">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Disables the Anti-Debug protection previouslly enabled 
 by <see cref="M:Elektro.Core.Diagnostics.Tools.DebugUtil.EnableAntiDebugProtection(System.Action)"/> method for the current application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim antiDebugCallback As Action =
     Sub()
         Debug.WriteLine("An attached debugger found!")
         Debug.WriteLine("Disabling anti-debug protection...")
         DebugUtil.DisableAntiDebugProtection
         Debug.WriteLine("Anti-debug protection disabled.")
     End Sub
 
 Debug.WriteLine("Enabling anti-debug protection...")
 DebugUtil.EnableAntiDebugProtection(antiDebugCallback)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Tools.DebugUtil.AntiDebugWork(System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs Anti-Debug analysis in background.
 <para></para>
 If a debugger is found, <see cref="F:Elektro.Core.Diagnostics.Tools.DebugUtil.antiDebugCallback"/> callback will be invoked.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="thr">
 The calling <see cref="T:System.Threading.Thread"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Diagnostics.Tools.DebugUtil.CurrentVisualStudioInstance">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a <see cref="T:EnvDTE80.DTE2"/> object that represents the current Visual Studio instance that is running this project.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim instance As DTE2 = CurrentVisualStudioInstance()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 A <see cref="T:EnvDTE80.DTE2"/> object that represents the current Visual Studio instance that is running this project.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Diagnostics.Tools.DebugUtil.VisualStudioInstances">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a collection of the Visual Studio instances that are running on this PC.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim instances As IEnumerable(Of DTE2) = VisualStudioInstances()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the running Visual Studio instances, if any.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Diagnostics.Tools.DebugUtil.CurrentMember">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the current executing member in the stack trace of the application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Private Sub TestMethod()
 
    MsgBox(CurrentMember.Name)
 
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The current executing member.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Diagnostics.Tools.DebugUtil.BuildOutputWindow">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the Build window output of the Visual Studio instance that hosts the current application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Clipboard.SetText(BuildOutputWindow)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Build window output of the Visual Studio instance that hosts the current application.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Diagnostics.Tools.DebugUtil.DebugOutputWindow">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the Debug window output of the Visual Studio instance that hosts the current application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Clipboard.SetText(DebugOutputWindow)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Debug window output of the Visual Studio instance that hosts the current application.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Diagnostics.Tools.DebugUtil.IsAntiDebugProtectionEnabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that indicates whether anti-debug protection is enabled for the current application.
 <para></para>
 Anti-debug protection can be enabled by calling <see cref="M:Elektro.Core.Diagnostics.Tools.DebugUtil.EnableAntiDebugProtection(System.Action)"/> method,
 and disabled by calling <see cref="M:Elektro.Core.Diagnostics.Tools.DebugUtil.DisableAntiDebugProtection"/> method.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim isEnabled As Boolean = IsAntiDebugProtectionEnabled
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if anti-debug protection is enabled for the current application,
 otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Diagnostics.Tools.DebugUtil.isAntiDebugProtectionEnabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 (Backing Field)
 A value that indicates whether anti-debug protection is enabled for the current application.
 <para></para>
 Anti-debug protection can be enabled by calling <see cref="M:Elektro.Core.Diagnostics.Tools.DebugUtil.EnableAntiDebugProtection(System.Action)"/> method,
 and disabled by calling <see cref="M:Elektro.Core.Diagnostics.Tools.DebugUtil.DisableAntiDebugProtection"/> method.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Tools.DebugUtil.GetVisualStudioInstances">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a collection of the Visual Studio instances that are running on this PC.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim instances As IEnumerable(Of DTE2) = GetVisualStudioInstances()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the running Visual Studio instances, if any.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Tools.DebugUtil.GetCurrentVisualStudioInstance">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a <see cref="T:EnvDTE80.DTE2"/> object that represents the current Visual Studio instance that is running this project.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim instance As DTE2 = GetCurrentVisualStudioInstance()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:EnvDTE80.DTE2"/> object that represents the current Visual Studio instance that is running this project.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Diagnostics.Tools.ProfillingUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains profilling and unit testing related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Tools.ProfillingUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.Diagnostics.Tools.ProfillingUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Tools.ProfillingUtil.InlineAssignHelper``1(``0@,``0)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Helper function that assigns <paramref name="b"/> to <paramref name="a"/>, then returns <paramref name="b"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="a">
 The target by reference value.
 </param>
 
 <param name="b">
 The value to return.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The value returned is <paramref name="b"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Tools.ProfillingUtil.InlineAssignHelper(System.Object@,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Helper function that assigns <paramref name="b"/> to <paramref name="a"/>, then returns <paramref name="b"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="a">
 The target by reference value.
 </param>
 
 <param name="b">
 The value to return.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The value returned is <paramref name="b"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Tools.ProfillingUtil.SwapObjects``1(``0@,``0@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Swaps the given objects.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim a As Integer = 10
 Dim b As Integer = 20
 
 SwapObjects(a, b)
 Console.WriteLine("a: {0}, b: {1}", a, b)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The Type parameter.
 </typeparam>
 
 <param name="objectA">
 The first object.
 </param>
 
 <param name="objectB">
 The second object.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Tools.ProfillingUtil.CollectGarbage">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Invokes the GarbageCollector to occur immediately.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 CollectGarbage()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Tools.ProfillingUtil.FlushMemory">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Flushes the memory of the current process.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 FlushMemory()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the function succeeds, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Tools.ProfillingUtil.FlushMemory(System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Flushes the memory of the current process.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 FlushMemory(Me.Handle)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="handle">
 The target process handle.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the function succeeds, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Tools.ProfillingUtil.TestSuccess(System.Action)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Tests the execution of a <see cref="T:System.Action"/> then returns a value that indicates whether the execution was successful.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = TestSuccess(Sub() Integer.Parse("qwerty"))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="action">
 The <see cref="T:System.Action"/> to invoke.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if execution was successful, otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Tools.ProfillingUtil.TestSuccessAsync(System.Action)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Tests the execution of a <see cref="T:System.Action"/> then returns a value that indicates whether the execution was successful.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim result As Boolean = TestSuccessAsync(Sub() Integer.Parse("qwerty")).Result
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="action">
 The <see cref="T:System.Action"/> to invoke.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if execution was successful, otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Tools.ProfillingUtil.TestTime(System.Action)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Tests the execution of a <see cref="T:System.Action"/> and measures the elapsed time.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Sub Test()
 
     Dim successful As Boolean =
         TestSuccess(Sub() Convert.ToInt32("Hello World!"))
 
     Dim teInfo As TestExecutionInfo =
         TestTime(Sub()
                                     For x As Integer = 0 To 2500
                                         Console.WriteLine(x)
                                     Next x
                                 End Sub)
 
     Dim sb As New StringBuilder
     Select Case teInfo.Success
 
         Case True
             With sb ' Set an information message.
                 .AppendLine(String.Format("Method Name: {0}", teInfo.Method.Name))
                 .AppendLine()
                 .AppendLine(String.Format("Elapsed Time: {0}", teInfo.Elapsed.ToString("hh\:mm\:ss\:fff")))
             End With
             MessageBox.Show(sb.ToString, "Code Execution Measurer", MessageBoxButtons.OK, MessageBoxIcon.Information)
 
         Case Else
             With sb ' Set an error message.
                 .AppendLine("Exception occurred during code execution measuring.")
                 .AppendLine()
                 .AppendLine(String.Format("Method Name: {0}", teInfo.Method.Name))
                 .AppendLine()
                 .AppendLine(String.Format("Exception Type: {0}", teInfo.Exception.GetType.Name))
                 .AppendLine()
                 .AppendLine("Exception Message:")
                 .AppendLine(teInfo.Exception.Message)
                 .AppendLine()
                 .AppendLine("Exception Stack Trace:")
                 .AppendLine(teInfo.Exception.StackTrace)
             End With
             MessageBox.Show(sb.ToString, "Code Execution Measurer", MessageBoxButtons.OK, MessageBoxIcon.Error)
 
     End Select
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="action">
 The <see cref="T:System.Action"/> to invoke.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:Elektro.Core.Diagnostics.Types.TestExecutionInfo"/> instance that contains the test info.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Tools.ProfillingUtil.TestTimeAsync(System.Action)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronously tests the execution of a <see cref="T:System.Action"/> and measures the elapsed time.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Sub Test()
 
     Dim taskTestTime As Task(Of TestExecutionInfo) =
         TestTimeAsync(Sub()
                                          For x As Integer = 0 To 2500
                                              Console.WriteLine(x)
                                          Next x
                                      End Sub)
 
     taskTestTime.ContinueWith(Sub() Me.ShowTestExecutionInfo(taskTestTime.Result))
 
 End Sub
 
 Private Sub ShowTestExecutionInfo(ByVal teInfo As TestExecutionInfo)
 
     Dim sb As New StringBuilder
     Select Case teInfo.Success
 
         Case True
             With sb ' Set an information message.
                 .AppendLine(String.Format("Method Name: {0}", teInfo.Method.Name))
                 .AppendLine()
                 .AppendLine(String.Format("Elapsed Time: {0}", teInfo.Elapsed.ToString("hh\:mm\:ss\:fff")))
             End With
             MessageBox.Show(sb.ToString, "Code Execution Measurer", MessageBoxButtons.OK, MessageBoxIcon.Information)
 
         Case Else
             With sb ' Set an error message.
                 .AppendLine("Exception occurred during code execution measuring.")
                 .AppendLine()
                 .AppendLine(String.Format("Method Name: {0}", teInfo.Method.Name))
                 .AppendLine()
                 .AppendLine(String.Format("Exception Type: {0}", teInfo.Exception.GetType.Name))
                 .AppendLine()
                 .AppendLine("Exception Message:")
                 .AppendLine(teInfo.Exception.Message)
                 .AppendLine()
                 .AppendLine("Exception Stack Trace:")
                 .AppendLine(teInfo.Exception.StackTrace)
             End With
             MessageBox.Show(sb.ToString, "Code Execution Measurer", MessageBoxButtons.OK, MessageBoxIcon.Error)
 
     End Select
 
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="action">
 The <see cref="T:System.Action"/> to invoke.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An async <see cref="T:System.Threading.Tasks.Task`1"/> object that contains the result of the test.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Diagnostics.Types.LogfileWriter">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A simple logging system assistant that helps to create a log for the current application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public Class Form1 : Inherits Form
 
     Private logfile As New LogfileWriter(String.Format("{0}.log", My.Application.Info.AssemblyName)) With
         {
             .EntryFormat = "[{1}] | {2,-11} | {3}"
         } ' {0}=Date, {1}=Time, {2}=Event, {3}=Message.
 
     Private Sub Form1_Load() Handles MyBase.Load
 
         With Me.logfile
             .Clear()
             .WriteText("#########################################")
             .WriteNewLine()
             .WriteText(String.Format("          Log Date {0}          ", DateTime.Now.Date.ToShortDateString))
             .WriteNewLine()
             .WriteText("#########################################")
             .WriteNewLine()
             .WriteEntry(TraceEventType.Information, "Application is being initialized.")
         End With
 
         Try
             Dim setting As Integer = Integer.Parse(" Hello World! :D ")
 
         Catch ex As Exception
             Me.logfile.WriteEntry(TraceEventType.Critical, "Cannot parse 'setting' object in 'Sub Form1_Load()' method.")
             Me.logfile.WriteEntry(TraceEventType.Information, "Exiting...")
             Application.Exit()
 
         End Try
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Diagnostics.Types.LogfileWriter.sw">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The <see cref="T:System.IO.StreamWriter"/> where is written the logging data
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Diagnostics.Types.LogfileWriter.Filepath">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the log filepath.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The log filepath.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Diagnostics.Types.LogfileWriter.filepathB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The log filepath.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Diagnostics.Types.LogfileWriter.Encoding">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the logfile encoding.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The logfile encoding.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Diagnostics.Types.LogfileWriter.encodingB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The logfile encoding.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Diagnostics.Types.LogfileWriter.EntryFormat">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the format of a log entry.
 {0}=Date, {1}=Time, {2}=Event, {3}=Message.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The format of a log entry.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Types.LogfileWriter.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.Diagnostics.Types.LogfileWriter"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Types.LogfileWriter.#ctor(System.String,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Diagnostics.Types.LogfileWriter"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The log filepath.
 </param>
 
 <param name="enc">
 The file encoding.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Types.LogfileWriter.WriteEntry(System.Diagnostics.TraceEventType,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes a new entry on the logfile.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="eventType">
 The type of event.
 </param>
 
 <param name="message">
 The message to log.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Types.LogfileWriter.WriteText(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes any text on the logfile.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to write.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Types.LogfileWriter.WriteNewLine">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes an empty line on the logfile.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Types.LogfileWriter.Clear">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Clears the logfile content.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Diagnostics.Types.LogfileWriter.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Types.LogfileWriter.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Types.LogfileWriter.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Diagnostics.Types.TestExecutionInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Defines the info of a code-execution test. 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example of a synchronous TestExecutionInfo.
 <code>
 Sub Test()
 
     Dim successful As Boolean =
         TestSuccess(Sub() Convert.ToInt32("Hello World!"))
 
     Dim teInfo As TestExecutionInfo =
         TestTime(Sub()
                     For x As Integer = 0 To 2500
                         Console.WriteLine(x)
                     Next x
                  End Sub)
 
     Dim sb As New StringBuilder
     Select Case teInfo.Success
 
         Case True
             With sb ' Set an information message.
                 .AppendLine(String.Format("Method Name: {0}", teInfo.Method.Name))
                 .AppendLine()
                 .AppendLine(String.Format("Elapsed Time: {0}", teInfo.Elapsed.ToString("hh\:mm\:ss\:fff")))
             End With
             MessageBox.Show(sb.ToString, "Code Execution Measurer", MessageBoxButtons.OK, MessageBoxIcon.Information)
 
         Case Else
             With sb ' Set an error message.
                 .AppendLine("Exception occurred during code execution measuring.")
                 .AppendLine()
                 .AppendLine(String.Format("Method Name: {0}", teInfo.Method.Name))
                 .AppendLine()
                 .AppendLine(String.Format("Exception Type: {0}", teInfo.Exception.GetType.Name))
                 .AppendLine()
                 .AppendLine("Exception Message:")
                 .AppendLine(teInfo.Exception.Message)
                 .AppendLine()
                 .AppendLine("Exception Stack Trace:")
                 .AppendLine(teInfo.Exception.StackTrace)
             End With
             MessageBox.Show(sb.ToString, "Code Execution Measurer", MessageBoxButtons.OK, MessageBoxIcon.Error)
 
     End Select
 
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example of an asynchronous TestExecutionInfo.
 <code>
 Sub Test()
 
     Dim taskTestTime As Task(Of TestExecutionInfo) =
         TestTimeAsync(Sub()
                          For x As Integer = 0 To 5000
                              Console.WriteLine(x)
                          Next x
                       End Sub)
 
     taskTestTime.ContinueWith(Sub() Me.ShowTestExecutionInfo(taskTestTime.Result))
 
 End Sub
 
 Private Sub ShowTestExecutionInfo(ByVal teInfo As TestExecutionInfo)
 
     Dim sb As New StringBuilder
     Select Case teInfo.Success
 
         Case True
             With sb ' Set an information message.
                 .AppendLine(String.Format("Method Name: {0}", teInfo.Method.Name))
                 .AppendLine()
                 .AppendLine(String.Format("Elapsed Time: {0}", teInfo.Elapsed.ToString("hh\:mm\:ss\:fff")))
             End With
             MessageBox.Show(sb.ToString, "Code Execution Measurer", MessageBoxButtons.OK, MessageBoxIcon.Information)
 
         Case Else
             With sb ' Set an error message.
                 .AppendLine("Exception occurred during code execution measuring.")
                 .AppendLine()
                 .AppendLine(String.Format("Method Name: {0}", teInfo.Method.Name))
                 .AppendLine()
                 .AppendLine(String.Format("Exception Type: {0}", teInfo.Exception.GetType.Name))
                 .AppendLine()
                 .AppendLine("Exception Message:")
                 .AppendLine(teInfo.Exception.Message)
                 .AppendLine()
                 .AppendLine("Exception Stack Trace:")
                 .AppendLine(teInfo.Exception.StackTrace)
             End With
             MessageBox.Show(sb.ToString, "Code Execution Measurer", MessageBoxButtons.OK, MessageBoxIcon.Error)
 
     End Select
 
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Diagnostics.Types.TestExecutionInfo.Elapsed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the elapsed execution time.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The elapsed execution time.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Diagnostics.Types.TestExecutionInfo.elapsedB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The elapsed time.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Diagnostics.Types.TestExecutionInfo.Method">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the method metadata.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The method metadata.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Diagnostics.Types.TestExecutionInfo.methodB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The method metadata.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Diagnostics.Types.TestExecutionInfo.Success">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value indicating whether the execution of the method was successful.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if success; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Diagnostics.Types.TestExecutionInfo.successB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the execution of the method was successful.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Diagnostics.Types.TestExecutionInfo.Exception">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the <see cref="P:Elektro.Core.Diagnostics.Types.TestExecutionInfo.Exception"/> that occured during method execution, if any.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The <see cref="P:Elektro.Core.Diagnostics.Types.TestExecutionInfo.Exception"/> that occured during method execution, if any.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Diagnostics.Types.TestExecutionInfo.exceptionB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The <see cref="P:Elektro.Core.Diagnostics.Types.TestExecutionInfo.Exception"/> that occured during method execution, if any.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Types.TestExecutionInfo.#ctor(System.TimeSpan,System.Reflection.MethodInfo,System.Boolean,System.Exception)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Diagnostics.Types.TestExecutionInfo"/> struct.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="elapsed">
 The elapsed execution time.
 </param>
 
 <param name="method">
 The method metadata.
 </param>
 
 <param name="success">
 A value indicating whether the execution of the method was successful.
 </param>
 
 <param name="exception">
 The <see cref="P:Elektro.Core.Diagnostics.Types.TestExecutionInfo.Exception"/> that occured during method execution, if any.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Types.TestExecutionInfo.GetType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the ddd<see cref="T:System.Type"/> of the current instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The exact runtime type of the current instance.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Types.TestExecutionInfo.Equals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are considered equal.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the objects are considered equal; otherwise, <see langword="False"/>.
 <para></para>
 If both <paramref name="objA"/> and <paramref name="objB"/> are <see langword="Nothing"/>, 
 the method returns <see langword="True"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Types.TestExecutionInfo.ReferenceEquals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are the same instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if <paramref name="objA"/> is the same instance as <paramref name="objB"/> 
 or if both are <see langword="Nothing"/>; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Diagnostics.Types.TestExecutionInfo.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a String that represents the current object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A string that represents the current object.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Xml.Extensions.Char.Escape">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Char"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Extensions.Char.Escape.EscapeXml(System.Char)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Escapes any Xml reserved character in the source <see cref="T:System.Char"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim unescaped As Char = "&amp;"c
 Dim escaped As String = unescaped.EscapeXml()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Char"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Xml.Extensions.IEnumerableOfXElement.Distinct">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Collections.Generic.IEnumerable`1"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Extensions.IEnumerableOfXElement.Distinct.DistinctByElement(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Deletes duplicated values by the specified element of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim xDoc As XDocument =
     &lt;?xml version="1.0" encoding="Windows-1252"?&gt;
     &lt;!--Xml Songs Database--&gt;
     &lt;Songs&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 1.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 1.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 2.mp3&lt;/Name&gt;&lt;/Song&gt;
     &lt;/Songs&gt;
 
 For Each el As XElement In xDoc.&lt;Songs&gt;.&lt;Song&gt;.DistinctByElement(elementName:="Name")
     MessageBox.Show(el.Value)
 Next
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="elementName">
 The element name to remove its duplicated values.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Xml.Extensions.IEnumerableOfXElement.Sort">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Collections.Generic.IEnumerable`1"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Extensions.IEnumerableOfXElement.Sort.SortByElement(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sorts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> by the specified element.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim xml As String =
     &lt;Songs&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 3.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 1.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 2.mp3&lt;/Name&gt;&lt;/Song&gt;
     &lt;/Songs&gt;.ToString
 
 Dim xmlDoc As New XmlDocument
 xmlDoc.LoadXml(xml)
 
 xmlDoc = xmlDoc.SortByElement(rootElementName:="Song", elementName:="Name")
 MessageBox.Show(xmlDoc.InnerXml)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </param>
 
 <param name="elementName">
 The element name to sort by.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The sorted <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Xml.Extensions.String.Escape">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.String"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Extensions.String.Escape.EscapeXml(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Escapes any Xml reserved characters contained in a <see cref="T:System.String"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim unescaped As String = "&lt;hello&gt;"
 Dim escaped As String = unescaped.EscapeXml()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Extensions.String.Escape.UnescapeXml(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Unescapes any Xml reserved characters contained in a <see cref="T:System.String"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim escaped As String = "&amp;lt;hello&amp;gt;"
 Dim unescaped As String = unescaped.UnescapeXml()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Xml.Extensions.XDocument.Distinct">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Xml.Linq.XDocument"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Extensions.XDocument.Distinct.DistinctByElement(System.Xml.Linq.XDocument,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Deletes duplicated values by the specified element of an <see cref="T:System.Xml.Linq.XDocument"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim xDoc As XDocument =
     &lt;?xml version="1.0" encoding="Windows-1252"?&gt;
     &lt;!--Xml Songs Database--&gt;
     &lt;Songs&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 1.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 1.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 2.mp3&lt;/Name&gt;&lt;/Song&gt;
     &lt;/Songs&gt;
 
 xDoc = xDoc.DistinctByElement(rootElementName:="Song", elementName:="Name")
 MessageBox.Show(xDoc.ToString)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Xml.Linq.XDocument"/>.
 </param>
 
 <param name="rootElementName">
 The root Xml element name.
 </param>
 
 <param name="elementName">
 The element name to remove its duplicated values.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The <see cref="T:System.Xml.Linq.XDocument"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Xml.Extensions.XDocument.Sort">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Xml.Linq.XDocument"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Extensions.XDocument.Sort.SortByElement(System.Xml.Linq.XDocument,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sorts an <see cref="T:System.Xml.Linq.XDocument"/> by the specified element.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim xDoc As XDocument =
     &lt;?xml version="1.0" encoding="Windows-1252"?&gt;
     &lt;!--Xml Songs Database--&gt;
     &lt;Songs&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 3.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 1.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 2.mp3&lt;/Name&gt;&lt;/Song&gt;
     &lt;/Songs&gt;
 
 xDoc = xDoc.SortByElement(rootElementName:="Song", elementName:="Name")
 
 MessageBox.Show(xDoc.ToString)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Xml.Linq.XDocument"/>.
 </param>
 
 <param name="rootElementName">
 The root element name.
 </param>
 
 <param name="elementName">
 The element name to sort by.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The sorted <see cref="T:System.Xml.Linq.XDocument"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Xml.Extensions.XDocument.TypeConversion">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Xml.Linq.XDocument"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Extensions.XDocument.TypeConversion.ToXmlDocument(System.Xml.Linq.XDocument)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts an <see cref="T:System.Xml.Linq.XDocument"/> to <see cref="T:System.Xml.XmlDocument"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim xDoc As XDocument =
     &lt;?xml version="1.0" encoding="Windows-1252"?&gt;
     &lt;!--Xml Songs Database--&gt;
     &lt;Songs&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 3.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 1.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 2.mp3&lt;/Name&gt;&lt;/Song&gt;
     &lt;/Songs&gt;
 
 Dim xmlDoc As XmlDocument = xDoc.ToXmlDocument
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Xml.Linq.XDocument"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The <see cref="T:System.Xml.XmlDocument"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Xml.Extensions.XDocument.XPath">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Xml.Linq.XDocument"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Extensions.XDocument.XPath.GetXPaths(System.Xml.Linq.XDocument)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection with the available XPath expressions of 
 an <see cref="T:System.Xml.Linq.XDocument"/> document.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim xDoc As XDocument =
     &lt;?xml version="1.0" encoding="Windows-1252"?&gt;
     &lt;!--Xml Songs Database--&gt;
     &lt;Songs&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 3.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 1.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 2.mp3&lt;/Name&gt;&lt;/Song&gt;
     &lt;/Songs&gt;
 
 Dim xPathList As IEnumerable(Of String) = xDoc.GetXPaths
 MessageBox.Show(String.Join(Environment.NewLine, xPathList))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Xml.Linq.XDocument"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection with the available XPath expressions.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Xml.Extensions.XElement.Namespaces">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Xml.Linq.XElement"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Extensions.XElement.Namespaces.RemoveAllNamespaces(System.Xml.Linq.XElement)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes all namespaces on the source <see cref="T:System.Xml.Linq.XElement"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim element As XElement = XElement.Parse("<Root>abc <b>def </b>ghi</Root>")
 Dim elementWithoutNamespaces As XElement = element.RemoveAllNamespaces()
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Xml.Linq.XElement"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Xml.Linq.XElement"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Xml.Extensions.XmlDocument.Distinct">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Xml.XmlDocument"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Extensions.XmlDocument.Distinct.DistinctByElement(System.Xml.XmlDocument,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Deletes duplicated values by the specified element of an <see cref="T:System.Xml.XmlDocument"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim xml As String =
     &lt;Songs&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 1.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 1.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 2.mp3&lt;/Name&gt;&lt;/Song&gt;
     &lt;/Songs&gt;.ToString
 
 Dim xmlDoc As New XmlDocument
 xmlDoc.LoadXml(xml)
 
 xmlDoc = xmlDoc.DistinctByElement(rootElementName:="Song", elementName:="Name")
 MessageBox.Show(xmlDoc.InnerXml)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Xml.XmlDocument"/>.
 </param>
 
 <param name="rootElementName">
 The root Xml element name.
 </param>
 
 <param name="elementName">
 The element name to remove its duplicated values.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Xml.XmlDocument"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Xml.Extensions.XmlDocument.Sort">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Xml.XmlDocument"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Extensions.XmlDocument.Sort.SortByElement(System.Xml.XmlDocument,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sorts an <see cref="T:System.Xml.XmlDocument"/> by the specified element.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim xml As String =
     &lt;Songs&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 3.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 1.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 2.mp3&lt;/Name&gt;&lt;/Song&gt;
     &lt;/Songs&gt;.ToString
 
 Dim xmlDoc As New XmlDocument
 xmlDoc.LoadXml(xml)
 
 xmlDoc = xmlDoc.SortByElement(rootElementName:="Song", elementName:="Name")
 MessageBox.Show(xmlDoc.InnerXml)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Xml.XmlDocument"/>.
 </param>
 
 <param name="rootElementName">
 The root element name.
 </param>
 
 <param name="elementName">
 The element name to sort by.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Xml.XmlDocument"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Xml.Extensions.XmlDocument.TypeConversion">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Xml.XmlDocument"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Extensions.XmlDocument.TypeConversion.ToXDocument(System.Xml.XmlDocument)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts an <see cref="T:System.Xml.XmlDocument"/> to <see cref="T:System.Xml.Linq.XDocument"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim xml As String =
     &lt;Songs&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 3.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 1.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 2.mp3&lt;/Name&gt;&lt;/Song&gt;
     &lt;/Songs&gt;.ToString
 
 Dim xmlDoc As New XmlDocument
 xmlDoc.LoadXml(xml)
 
 Dim xDoc As XDocument = xmlDoc.ToXDocument
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Xml.XmlDocument"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The <see cref="T:System.Xml.Linq.XDocument"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Xml.Extensions.XmlDocument.XPath">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Xml.XmlDocument"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Extensions.XmlDocument.XPath.GetXPaths(System.Xml.XmlDocument)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection with the available XPath expressions of 
 an <see cref="T:System.Xml.XmlDocument"/> document.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim xml As String =
     &lt;Songs&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 3.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 1.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 2.mp3&lt;/Name&gt;&lt;/Song&gt;
     &lt;/Songs&gt;.ToString
 
 Dim xmlDoc As New XmlDocument
 xmlDoc.LoadXml(xml)
 
 Dim xPathList As IEnumerable(Of String) = xmlDoc.GetXPaths
 MessageBox.Show(String.Join(Environment.NewLine, xPathList))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Xml.XmlDocument"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection with the available XPath expressions.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Xml.Extensions.XmlNode.CData">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Xml.XmlNode"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Extensions.XmlNode.CData.CreateCDataSection(System.Xml.XmlNode)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Appends a CData section to a Xml node.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim xml As String =
     &lt;Songs&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 3.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 1.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 2.mp3&lt;/Name&gt;&lt;/Song&gt;
     &lt;/Songs&gt;.ToString
 
 Dim xmlDoc As New XmlDocument
 xmlDoc.LoadXml(xml)
 
 xmlDoc.ChildNodes(0).CreateCDataSection()
 MessageBox.Show(xmlDoc.ChildNodes(0).InnerXml)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="parentNode">
 The parent node.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Xml.XmlCDataSection"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Extensions.XmlNode.CData.CreateCDataSection(System.Xml.XmlNode,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Appends a CData section to a Xml node.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim xml As String =
     &lt;Songs&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 3.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 1.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 2.mp3&lt;/Name&gt;&lt;/Song&gt;
     &lt;/Songs&gt;.ToString
 
 Dim xmlDoc As New XmlDocument
 xmlDoc.LoadXml(xml)
 
 xmlDoc.ChildNodes(0).CreateCDataSection("This is the CDATA Text.")
 MessageBox.Show(xmlDoc.ChildNodes(0).InnerXml)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="parentNode">
 The parent node.
 </param>
 
 <param name="data">
 The content of the CData section.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Xml.XmlCDataSection"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Extensions.XmlNode.CData.GetCDataSection(System.Xml.XmlNode)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the content of a nested CData section.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim xml As String =
     &lt;Songs&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 3.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 1.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 2.mp3&lt;/Name&gt;&lt;/Song&gt;
     &lt;/Songs&gt;.ToString
 
 Dim xmlDoc As New XmlDocument
 xmlDoc.LoadXml(xml)
 
 xmlDoc.ChildNodes(0).CreateCDataSection("This is the CDATA Text.")
 MessageBox.Show(xmlDoc.ChildNodes(0).GetCDataSection())
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="parentNode">
 The parent node.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The content of the CData section.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Extensions.XmlNode.CData.Equals(System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="obj">
 Another object to compare to.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Extensions.XmlNode.CData.ReferenceEquals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are the same instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if <paramref name="objA"/> is the same instance as <paramref name="objB"/> 
 or if both are <see langword="Nothing"/>; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Xml.Extensions.XmlNode.TypeConversion">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Xml.XmlNode"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Extensions.XmlNode.TypeConversion.ToXNode(System.Xml.XmlNode)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts an <see cref="T:System.Xml.XmlNode"/> to <see cref="T:System.Xml.Linq.XNode"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim xml As String =
     &lt;Songs&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 3.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 1.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 2.mp3&lt;/Name&gt;&lt;/Song&gt;
     &lt;/Songs&gt;.ToString
 
 Dim xmlDoc As New XmlDocument
 xmlDoc.LoadXml(xml)
 
 Dim xmlNode As XmlNode = xmlDoc.ChildNodes(0)
 Dim xNode As XNode = xmlNode.ToXNode()
 
 MessageBox.Show(xNode.ToString())
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="node">
 The source Xml node.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Xml.Linq.XNode"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Xml.Extensions.XNode.TypeConversion">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with the <see cref="T:System.Xml.Linq.XNode"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Extensions.XNode.TypeConversion.ToXmlNode(System.Xml.Linq.XNode)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts an <see cref="T:System.Xml.Linq.XNode"/> to <see cref="T:System.Xml.XmlNode"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim xDoc As XDocument =
     &lt;?xml version="1.0" encoding="Windows-1252"?&gt;
     &lt;!--Xml Songs Database--&gt;
     &lt;Songs&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 3.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 1.mp3&lt;/Name&gt;&lt;/Song&gt;
         &lt;Song&gt;&lt;Name&gt;My Song 2.mp3&lt;/Name&gt;&lt;/Song&gt;
     &lt;/Songs&gt;

 Dim xNode As XNode = xDoc.Nodes(1)
 Dim xmlNode As XmlNode = xNode.ToXmlNode()
 
 MessageBox.Show(xmlNode.InnerXml)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="node">
 The source Xml node.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Xml.XmlNode"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Xml.Tools.XmlUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains Xml related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Tools.XmlUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.Xml.Tools.XmlUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Xml.Tools.XmlUtil.ReservedXmlOperators">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the reserved Xml operators.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim reservedChars As String = New String(ReservedXmlOperators)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 The reserved Xml operators.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Tools.XmlUtil.XmlBeautifier(System.String,System.String,System.Boolean,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Beautifies the contents of an Xml document.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim enc As Encoding = Encoding.Default
 
 Dim unformattedXmlDocument As String =
     File.ReadAllText("C:\Unformatted Document.xml", enc)
 
 Dim formattedXmlDocument As String =
     XmlBeautifier(xmlText:=unformattedXmlDocument,
                   indentChars:=New String(" "c, 2),
                   indentOnAttributes:=True,
                   enc:=enc)
 
 File.WriteAllText("C:\Formatted Document.xml", formattedXmlDocument, enc)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="xmlText">
 The Xml text content. 
 It can be an entire document or a fragment.
 </param>
 
 <param name="indentChars">
 The string that is used to indent the Xml.
 <para></para>
 Default value is <see cref="F:Microsoft.VisualBasic.ControlChars.Tab"/>
 </param>
 
 <param name="indentOnAttributes">
 If set to <see langword="True"/>, attributes will be separated by newlines.
 </param>
 
 <param name="enc">
 The Xml text encoding to use.
 <para></para>
 Default value is <see cref="P:System.Text.Encoding.Default"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The beautified Xml text.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 xmlText
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Tools.XmlUtil.XmlBeautifier(System.Xml.XmlDocument,System.String,System.Boolean,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Beautifies the contents of an Xml document.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim enc As Encoding = Encoding.Default
 
 Dim xmlDoc As New XmlDocument
 xmlDoc.LoadXml("xmlText")
 
 Dim formattedXmlDocument As String =
     XmlBeautifier(xmlDoc:=xmlDoc,
                   indentChars:=New String(" "c, 2),
                   indentOnAttributes:=True,
                   enc:=enc)
 
 File.WriteAllText("C:\Formatted Document.xml", formattedXmlDocument, enc)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="xmlDoc">
 The Xml document. 
 It can be an entire document or a fragment.
 </param>
 
 <param name="indentChars">
 The string that is used to indent the Xml.
 <para></para>
 Default value is <see cref="F:Microsoft.VisualBasic.ControlChars.Tab"/>
 </param>
 
 <param name="indentOnAttributes">
 If set to <see langword="True"/>, attributes will be separated by newlines.
 </param>
 
 <param name="enc">
 The Xml text encoding to use.
 <para></para>
 Default value is <see cref="P:System.Text.Encoding.Default"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The beautified Xml text.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 xmlText
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Elektro.Core.Xml.Types.EasyXmlTextWriter">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Wraps a <see cref="T:System.Xml.XmlTextWriter"/> to write an Xml document in a easier way
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 ' Create a disposable instance od the EasyXmlTextWriter class.
 Using xmlWriter As New EasyXmlTextWriter("C:\My Xml File.xml", Encoding.Default)
 
     xmlWriter.XmlWriter.Formatting = Formatting.Indented
 
     ' Write the Xml header.
     xmlWriter.WriteHeader()
     ' Output at this point:
     ' &lt;?xml version="1.0" encoding="Windows-1252"?&gt;
 
     ' Write a comment line.
     xmlWriter.WriteCommentLine("Xml Songs Database", Formatting.Indented)
     ' Output at this point:
     ' &lt;?xml version="1.0" encoding="Windows-1252"?&gt;
     ' &lt;!--Xml Songs Database--&gt;
 
     ' Write the "Songs" root element.
     xmlWriter.WriteBeginningElement("Songs", Formatting.Indented)
     ' Output at this point:
     ' &lt;?xml version="1.0" encoding="Windows-1252"?&gt;
     ' &lt;!--Xml Songs Database--&gt;
     ' &lt;Songs&gt;
 
     ' Write the start of a "song" element.
     xmlWriter.WriteBeginningElement("Song", Formatting.Indented)
     ' Output at this point:
     ' &lt;?xml version="1.0" encoding="Windows-1252"?&gt;
     ' &lt;!--Xml Songs Database--&gt;
     ' &lt;Songs&gt;
     '  &lt;Song&gt;
 
     ' Write a "song" element.
     xmlWriter.WriteElements({
                              {"Name", "My Song file.mp3"},
                              {"Year", "2013"},
                              {"Genre", "Rock"}
                             }, Formatting.None)
     ' Output at this point:
     ' &lt;?xml version="1.0" encoding="Windows-1252"?&gt;
     ' &lt;!--Xml Songs Database--&gt;
     ' &lt;Songs&gt;
     '  &lt;Song&gt;&lt;Name&gt;My Song file.mp3&lt;/Name&gt;&lt;Year&gt;2007&lt;/Year&gt;&lt;Genre&gt;Dance&lt;/Genre&gt;
 
     ' Write the end of a "song" element.
     xmlWriter.WriteEndElement(Formatting.None)
     ' Output at this point:
     ' &lt;?xml version="1.0" encoding="Windows-1252"?&gt;
     ' &lt;!--Xml Songs Database--&gt;
     ' &lt;Songs&gt;
     '  &lt;Song&gt;&lt;Name&gt;My Song file.mp3&lt;/Name&gt;&lt;Year&gt;2007&lt;/Year&gt;&lt;Genre&gt;Dance&lt;/Genre&gt;&lt;/Song&gt;
 
     ' Write the end of the "Songs" root element.
     xmlWriter.WriteEndElement(Formatting.Indented)
     ' Output at this point:
     ' Output at this point:
     ' &lt;?xml version="1.0" encoding="Windows-1252"?&gt;
     ' &lt;!--Xml Songs Database--&gt;
     ' &lt;Songs&gt;
     '  &lt;Song&gt;&lt;Name&gt;My Song file.mp3&lt;/Name&gt;&lt;Year&gt;2007&lt;/Year&gt;&lt;Genre&gt;Dance&lt;/Genre&gt;&lt;/Song&gt;
     ' &lt;/Songs&gt;
 
     ' Write the Xml end of file.
     xmlWriter.WriteEof(closeXmlWriter:=True)
 
     ' Final output:
     '
     '&lt;?xml version="1.0" encoding="Windows-1252"?&gt;
     '&lt;!--Xml Songs Database--&gt;
     '&lt;Songs&gt;
     '  &lt;Song&gt;&lt;Name&gt;My Song file.mp3&lt;/Name&gt;&lt;Year&gt;2007&lt;/Year&gt;&lt;Genre&gt;Dance&lt;/Genre&gt;&lt;/Song&gt;
     '&lt;/Songs&gt;
 
 End Using
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:Elektro.Core.Xml.Types.EasyXmlTextWriter.XmlWriter">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The underlying <see cref="T:System.Xml.XmlTextWriter"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Xml.Types.EasyXmlTextWriter.xmlWriterB">
 <summary>
 ( Backing field )
 The underlying <see cref="T:System.Xml.XmlTextWriter"/> instance.
 </summary>
</member>
<member name="M:Elektro.Core.Xml.Types.EasyXmlTextWriter.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:Elektro.Core.Xml.Types.EasyXmlTextWriter"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Types.EasyXmlTextWriter.#ctor(System.String,System.Text.Encoding)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:Elektro.Core.Xml.Types.EasyXmlTextWriter"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="filename">
 The filename to write to. 
 <para></para>
 If the file exists, it truncates it and overwrites it with the new content.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="enc">
 The encoding to generate.
 <para></para>
 If encoding is null it writes the file out as UTF-8, and omits the encoding attribute from the ProcessingInstruction.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Types.EasyXmlTextWriter.WriteHeader">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes the starting Xml header.
 This method should be called to start writting the Xml.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Types.EasyXmlTextWriter.WriteEof(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes the ending Xml end of file.
 This method should be called to terminate writting the Xml.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="closeXmlWriter">
 if set to <see langword="True"/>, closes the <see cref="T:System.Xml.XmlTextWriter"/> instance.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Types.EasyXmlTextWriter.WriteCommentLine(System.String,System.Xml.Formatting)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes an Xml comment line.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="comment">
 The commentary to write.
 </param>
 
 <param name="indentation">
 The Xml indentation formatting.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Types.EasyXmlTextWriter.WriteBeginningElement(System.String,System.Xml.Formatting)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes the beginning of an Xml element.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="element">
 The element.
 </param>
 
 <param name="indentation">
 The Xml indentation formatting.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Types.EasyXmlTextWriter.WriteEndElement(System.Xml.Formatting)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes the end of an Xml element.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="indentation">
 The Xml indentation formatting.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Types.EasyXmlTextWriter.WriteElement(System.String,System.String,System.Xml.Formatting)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes an Xml element.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="startElement">
 The starting element.
 </param>
 
 <param name="element">
 The element.
 </param>
 
 <param name="indentation">
 The Xml indentation formatting.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Types.EasyXmlTextWriter.WriteElements(System.String[0:,0:],System.Xml.Formatting)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Writes multiple Xml elements.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="elements">
 The elements.
 </param>
 
 <param name="indentation">
 The Xml indentation formatting.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Elektro.Core.Xml.Types.EasyXmlTextWriter.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Types.EasyXmlTextWriter.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Elektro.Core.Xml.Types.EasyXmlTextWriter.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
</members>
</doc>
